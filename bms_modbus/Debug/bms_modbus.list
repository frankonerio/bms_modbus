
bms_modbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b0  080071b0  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b8  080071b8  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071bc  080071bc  000171bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  080071c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000130  080072f0  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080072f0  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e780  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e7  00000000  00000000  0002e923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0e  00000000  00000000  00032020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004210  00000000  00000000  00032a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114d2  00000000  00000000  00036c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0f73  00000000  00000000  00048110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e14  00000000  00000000  00119084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0011ce98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000130 	.word	0x20000130
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d4c 	.word	0x08006d4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000134 	.word	0x20000134
 800020c:	08006d4c 	.word	0x08006d4c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t i;
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80005e2:	4bb2      	ldr	r3, [pc, #712]	; (80008ac <main+0x2d0>)
 80005e4:	f107 0408 	add.w	r4, r7, #8
 80005e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f002 fbf9 	bl	8002de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f99f 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fa6f 	bl	8000ad8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 fa43 	bl	8000a84 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005fe:	f000 fa0b 	bl	8000a18 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

   /* Chip selection call back */

  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port,GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	48aa      	ldr	r0, [pc, #680]	; (80008b0 <main+0x2d4>)
 8000608:	f002 ffba 	bl	8003580 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f002 fc5b 	bl	8002ec8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port,GPIO_W5500_RESET_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	48a6      	ldr	r0, [pc, #664]	; (80008b0 <main+0x2d4>)
 8000618:	f002 ffb2 	bl	8003580 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000620:	f002 fc52 	bl	8002ec8 <HAL_Delay>

	 /* SPI Read & Write callback function */
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000624:	49a3      	ldr	r1, [pc, #652]	; (80008b4 <main+0x2d8>)
 8000626:	48a4      	ldr	r0, [pc, #656]	; (80008b8 <main+0x2dc>)
 8000628:	f001 fe96 	bl	8002358 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800062c:	49a3      	ldr	r1, [pc, #652]	; (80008bc <main+0x2e0>)
 800062e:	48a4      	ldr	r0, [pc, #656]	; (80008c0 <main+0x2e4>)
 8000630:	f001 feb8 	bl	80023a4 <reg_wizchip_spi_cbfunc>

	////////////////////////////////////////////////////////////////////////
	/* WIZCHIP SOCKET Buffer initialize */
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4619      	mov	r1, r3
 800063a:	2001      	movs	r0, #1
 800063c:	f001 fede 	bl	80023fc <ctlwizchip>
 8000640:	4603      	mov	r3, r0
 8000642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000646:	d100      	bne.n	800064a <main+0x6e>
	{
	   //init fail

	   while(1);
 8000648:	e7fe      	b.n	8000648 <main+0x6c>
	}

	/* Network initialization */
	network_init();
 800064a:	f000 faf7 	bl	8000c3c <network_init>

	//memset(holding_registers,0,sizeof(holding_registers));
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);

	 wizchip_setnetinfo(&gWIZNETINFO);
 800064e:	489d      	ldr	r0, [pc, #628]	; (80008c4 <main+0x2e8>)
 8000650:	f002 fab0 	bl	8002bb4 <wizchip_setnetinfo>
	  PRINT_NETINFO(gWIZNETINFO);
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	2218      	movs	r2, #24
 8000658:	499b      	ldr	r1, [pc, #620]	; (80008c8 <main+0x2ec>)
 800065a:	489c      	ldr	r0, [pc, #624]	; (80008cc <main+0x2f0>)
 800065c:	f004 fa5a 	bl	8004b14 <HAL_UART_Transmit>
 8000660:	4b98      	ldr	r3, [pc, #608]	; (80008c4 <main+0x2e8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461c      	mov	r4, r3
 8000666:	4b97      	ldr	r3, [pc, #604]	; (80008c4 <main+0x2e8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	461d      	mov	r5, r3
 800066c:	4b95      	ldr	r3, [pc, #596]	; (80008c4 <main+0x2e8>)
 800066e:	789b      	ldrb	r3, [r3, #2]
 8000670:	461a      	mov	r2, r3
 8000672:	4b94      	ldr	r3, [pc, #592]	; (80008c4 <main+0x2e8>)
 8000674:	78db      	ldrb	r3, [r3, #3]
 8000676:	4619      	mov	r1, r3
 8000678:	4b92      	ldr	r3, [pc, #584]	; (80008c4 <main+0x2e8>)
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	4618      	mov	r0, r3
 800067e:	4b91      	ldr	r3, [pc, #580]	; (80008c4 <main+0x2e8>)
 8000680:	795b      	ldrb	r3, [r3, #5]
 8000682:	9303      	str	r3, [sp, #12]
 8000684:	9002      	str	r0, [sp, #8]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	462b      	mov	r3, r5
 800068c:	4622      	mov	r2, r4
 800068e:	4990      	ldr	r1, [pc, #576]	; (80008d0 <main+0x2f4>)
 8000690:	4890      	ldr	r0, [pc, #576]	; (80008d4 <main+0x2f8>)
 8000692:	f005 fb21 	bl	8005cd8 <siprintf>
 8000696:	488f      	ldr	r0, [pc, #572]	; (80008d4 <main+0x2f8>)
 8000698:	f7ff fdc4 	bl	8000224 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	498c      	ldr	r1, [pc, #560]	; (80008d4 <main+0x2f8>)
 80006a4:	4889      	ldr	r0, [pc, #548]	; (80008cc <main+0x2f0>)
 80006a6:	f004 fa35 	bl	8004b14 <HAL_UART_Transmit>
 80006aa:	4b86      	ldr	r3, [pc, #536]	; (80008c4 <main+0x2e8>)
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4b84      	ldr	r3, [pc, #528]	; (80008c4 <main+0x2e8>)
 80006b2:	79db      	ldrb	r3, [r3, #7]
 80006b4:	4618      	mov	r0, r3
 80006b6:	4b83      	ldr	r3, [pc, #524]	; (80008c4 <main+0x2e8>)
 80006b8:	7a1b      	ldrb	r3, [r3, #8]
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b81      	ldr	r3, [pc, #516]	; (80008c4 <main+0x2e8>)
 80006be:	7a5b      	ldrb	r3, [r3, #9]
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	9200      	str	r2, [sp, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	460a      	mov	r2, r1
 80006c8:	4983      	ldr	r1, [pc, #524]	; (80008d8 <main+0x2fc>)
 80006ca:	4882      	ldr	r0, [pc, #520]	; (80008d4 <main+0x2f8>)
 80006cc:	f005 fb04 	bl	8005cd8 <siprintf>
 80006d0:	4880      	ldr	r0, [pc, #512]	; (80008d4 <main+0x2f8>)
 80006d2:	f7ff fda7 	bl	8000224 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	497d      	ldr	r1, [pc, #500]	; (80008d4 <main+0x2f8>)
 80006de:	487b      	ldr	r0, [pc, #492]	; (80008cc <main+0x2f0>)
 80006e0:	f004 fa18 	bl	8004b14 <HAL_UART_Transmit>
 80006e4:	4b77      	ldr	r3, [pc, #476]	; (80008c4 <main+0x2e8>)
 80006e6:	7a9b      	ldrb	r3, [r3, #10]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b76      	ldr	r3, [pc, #472]	; (80008c4 <main+0x2e8>)
 80006ec:	7adb      	ldrb	r3, [r3, #11]
 80006ee:	4618      	mov	r0, r3
 80006f0:	4b74      	ldr	r3, [pc, #464]	; (80008c4 <main+0x2e8>)
 80006f2:	7b1b      	ldrb	r3, [r3, #12]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b73      	ldr	r3, [pc, #460]	; (80008c4 <main+0x2e8>)
 80006f8:	7b5b      	ldrb	r3, [r3, #13]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9200      	str	r2, [sp, #0]
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	4976      	ldr	r1, [pc, #472]	; (80008dc <main+0x300>)
 8000704:	4873      	ldr	r0, [pc, #460]	; (80008d4 <main+0x2f8>)
 8000706:	f005 fae7 	bl	8005cd8 <siprintf>
 800070a:	4872      	ldr	r0, [pc, #456]	; (80008d4 <main+0x2f8>)
 800070c:	f7ff fd8a 	bl	8000224 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	496f      	ldr	r1, [pc, #444]	; (80008d4 <main+0x2f8>)
 8000718:	486c      	ldr	r0, [pc, #432]	; (80008cc <main+0x2f0>)
 800071a:	f004 f9fb 	bl	8004b14 <HAL_UART_Transmit>
 800071e:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <main+0x2e8>)
 8000720:	7b9b      	ldrb	r3, [r3, #14]
 8000722:	4619      	mov	r1, r3
 8000724:	4b67      	ldr	r3, [pc, #412]	; (80008c4 <main+0x2e8>)
 8000726:	7bdb      	ldrb	r3, [r3, #15]
 8000728:	4618      	mov	r0, r3
 800072a:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <main+0x2e8>)
 800072c:	7c1b      	ldrb	r3, [r3, #16]
 800072e:	461a      	mov	r2, r3
 8000730:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <main+0x2e8>)
 8000732:	7c5b      	ldrb	r3, [r3, #17]
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	4603      	mov	r3, r0
 800073a:	460a      	mov	r2, r1
 800073c:	4968      	ldr	r1, [pc, #416]	; (80008e0 <main+0x304>)
 800073e:	4865      	ldr	r0, [pc, #404]	; (80008d4 <main+0x2f8>)
 8000740:	f005 faca 	bl	8005cd8 <siprintf>
 8000744:	4863      	ldr	r0, [pc, #396]	; (80008d4 <main+0x2f8>)
 8000746:	f7ff fd6d 	bl	8000224 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	4960      	ldr	r1, [pc, #384]	; (80008d4 <main+0x2f8>)
 8000752:	485e      	ldr	r0, [pc, #376]	; (80008cc <main+0x2f0>)
 8000754:	f004 f9de 	bl	8004b14 <HAL_UART_Transmit>

	  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000758:	495a      	ldr	r1, [pc, #360]	; (80008c4 <main+0x2e8>)
 800075a:	2000      	movs	r0, #0
 800075c:	f001 ff30 	bl	80025c0 <ctlnetwork>
	  //so that user can use any model w5500 board
	  //else the PINs on the board configure it, which may
	  //lead to different configurations in different boards.
	  wiz_PhyConf phyconf;

	  phyconf.by=PHY_CONFBY_SW;
 8000760:	2301      	movs	r3, #1
 8000762:	713b      	strb	r3, [r7, #4]
	  phyconf.duplex=PHY_DUPLEX_FULL;
 8000764:	2301      	movs	r3, #1
 8000766:	71fb      	strb	r3, [r7, #7]
	  phyconf.speed=PHY_SPEED_10;//10MBps Ethernet link speed
 8000768:	2300      	movs	r3, #0
 800076a:	71bb      	strb	r3, [r7, #6]
	  phyconf.mode=PHY_MODE_AUTONEGO;//best to go with auto-negotiation
 800076c:	2301      	movs	r3, #1
 800076e:	717b      	strb	r3, [r7, #5]

	  ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);//PHY Configuration Command
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	200a      	movs	r0, #10
 8000776:	f001 fe41 	bl	80023fc <ctlwizchip>
	  //*** End Phy Configuration

	  PHYStatusCheck();
 800077a:	f000 fa99 	bl	8000cb0 <PHYStatusCheck>
	  PrintPHYConf();
 800077e:	f000 fabd 	bl	8000cfc <PrintPHYConf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("\r\nInitializing server socket\r\n");
 8000782:	4858      	ldr	r0, [pc, #352]	; (80008e4 <main+0x308>)
 8000784:	f005 faa0 	bl	8005cc8 <puts>

	  	  //Parameters in order socket_id, protocol TCP or UDP, Port number, Flags=0
	  	  //Return value is socket ID on success
	  	  if(socket(1,Sn_MR_TCP,LISTEN_PORT,0)!=1)
 8000788:	2300      	movs	r3, #0
 800078a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800078e:	2101      	movs	r1, #1
 8000790:	2001      	movs	r0, #1
 8000792:	f001 f8b9 	bl	8001908 <socket>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d003      	beq.n	80007a4 <main+0x1c8>
	  	  {
	  		  //error
	  		  printf("Cannot create Socket!\r\n");
 800079c:	4852      	ldr	r0, [pc, #328]	; (80008e8 <main+0x30c>)
 800079e:	f005 fa93 	bl	8005cc8 <puts>
	  		  while(1);//halt here
 80007a2:	e7fe      	b.n	80007a2 <main+0x1c6>
	  	  }

	  	  //success
	  	  printf("Socket Created Successfully ! \r\n");
 80007a4:	4851      	ldr	r0, [pc, #324]	; (80008ec <main+0x310>)
 80007a6:	f005 fa8f 	bl	8005cc8 <puts>

	  	  uint8_t socket_io_mode=SOCK_IO_BLOCK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	70fb      	strb	r3, [r7, #3]

	  	  ctlsocket(1, CS_SET_IOMODE , &socket_io_mode);//set blocking IO mode
 80007ae:	1cfb      	adds	r3, r7, #3
 80007b0:	461a      	mov	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	2001      	movs	r0, #1
 80007b6:	f001 fca9 	bl	800210c <ctlsocket>

	  	  printf("Start listening on port %d ! \r\n",LISTEN_PORT);
 80007ba:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80007be:	484c      	ldr	r0, [pc, #304]	; (80008f0 <main+0x314>)
 80007c0:	f005 fa1c 	bl	8005bfc <iprintf>
	  	  printf("Waiting for a client connection. \r\n");
 80007c4:	484b      	ldr	r0, [pc, #300]	; (80008f4 <main+0x318>)
 80007c6:	f005 fa7f 	bl	8005cc8 <puts>

	  	  //Make it a passive socket (i.e. listen for connection)
	  	  if(listen(1)!=SOCK_OK)//our socket id is 1 (w5500 have 8 sockets from 0-7)
 80007ca:	2001      	movs	r0, #1
 80007cc:	f001 fa1e 	bl	8001c0c <listen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d005      	beq.n	80007e2 <main+0x206>
	  	  {
	  		  //error
	  		  printf("Cannot listen on port %d",LISTEN_PORT);
 80007d6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80007da:	4847      	ldr	r0, [pc, #284]	; (80008f8 <main+0x31c>)
 80007dc:	f005 fa0e 	bl	8005bfc <iprintf>

	  		  while(1);
 80007e0:	e7fe      	b.n	80007e0 <main+0x204>

	  	  }

	  	  uint8_t sr=0x00;//socket status register
 80007e2:	2300      	movs	r3, #0
 80007e4:	77fb      	strb	r3, [r7, #31]

	  	  do
	  	  {
	  		  sr=getSn_SR(1);//read status reg (SR of socket 1)
 80007e6:	f44f 704a 	mov.w	r0, #808	; 0x328
 80007ea:	f000 fde5 	bl	80013b8 <WIZCHIP_READ>
 80007ee:	4603      	mov	r3, r0
 80007f0:	77fb      	strb	r3, [r7, #31]
	  	  }while (sr!=0x17 && sr!=0x00);
 80007f2:	7ffb      	ldrb	r3, [r7, #31]
 80007f4:	2b17      	cmp	r3, #23
 80007f6:	d002      	beq.n	80007fe <main+0x222>
 80007f8:	7ffb      	ldrb	r3, [r7, #31]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f3      	bne.n	80007e6 <main+0x20a>

	  	  if(sr==0x00)
 80007fe:	7ffb      	ldrb	r3, [r7, #31]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d103      	bne.n	800080c <main+0x230>
	  	  {
	  		  printf("Some error occurred on server socket. Please restart.\r\n");
 8000804:	483d      	ldr	r0, [pc, #244]	; (80008fc <main+0x320>)
 8000806:	f005 fa5f 	bl	8005cc8 <puts>
	  		  while(1);
 800080a:	e7fe      	b.n	800080a <main+0x22e>
	  	  }

	  	  if(sr==0x17)
 800080c:	7ffb      	ldrb	r3, [r7, #31]
 800080e:	2b17      	cmp	r3, #23
 8000810:	d1b7      	bne.n	8000782 <main+0x1a6>
	  	  {
	  		  //we come here only when a client has connected.
	  		  //Now we can read data from the socket
	  		  printf("A client connected!\r\n");
 8000812:	483b      	ldr	r0, [pc, #236]	; (8000900 <main+0x324>)
 8000814:	f005 fa58 	bl	8005cc8 <puts>
	  		  printf("Waiting for Client Data ...!\r\n");
 8000818:	483a      	ldr	r0, [pc, #232]	; (8000904 <main+0x328>)
 800081a:	f005 fa55 	bl	8005cc8 <puts>

	  		  while(1)
	  		  {
	  			  int len=recv(1,RX_buffer, RX_buffer_length);
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	4939      	ldr	r1, [pc, #228]	; (8000908 <main+0x32c>)
 8000822:	2001      	movs	r0, #1
 8000824:	f001 fbbc 	bl	8001fa0 <recv>
 8000828:	61b8      	str	r0, [r7, #24]

	  			  if(len==SOCKERR_SOCKSTATUS)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	f113 0f07 	cmn.w	r3, #7
 8000830:	d106      	bne.n	8000840 <main+0x264>
	  			  {
	  				  //client has disconnected
	  				  printf("Client has disconnected\r\n");
 8000832:	4836      	ldr	r0, [pc, #216]	; (800090c <main+0x330>)
 8000834:	f005 fa48 	bl	8005cc8 <puts>
	  				  printf("*** SESSION OVER ***\r\n\r\n");
 8000838:	4835      	ldr	r0, [pc, #212]	; (8000910 <main+0x334>)
 800083a:	f005 fa45 	bl	8005cc8 <puts>
	  				  break;
 800083e:	e033      	b.n	80008a8 <main+0x2cc>
	  			  }

	  			 RX_buffer[len]='\0';
 8000840:	4a31      	ldr	r2, [pc, #196]	; (8000908 <main+0x32c>)
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	4413      	add	r3, r2
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]

	  			  printf("Received %d bytes from client\r\n",len);
 800084a:	69b9      	ldr	r1, [r7, #24]
 800084c:	4831      	ldr	r0, [pc, #196]	; (8000914 <main+0x338>)
 800084e:	f005 f9d5 	bl	8005bfc <iprintf>
	  			  printf("Data Received: %s",  RX_buffer);
 8000852:	492d      	ldr	r1, [pc, #180]	; (8000908 <main+0x32c>)
 8000854:	4830      	ldr	r0, [pc, #192]	; (8000918 <main+0x33c>)
 8000856:	f005 f9d1 	bl	8005bfc <iprintf>
	  			  //Echo the data back encloused in a [] pair
//	  			  send(1,(uint8_t*)"[",1);//starting sq bracket
//	  			  send(1,receive_buff,len);// the data
//	  			  send(1,(uint8_t*)"]",1);//closing sq bracket
//
	  			  memset(TX_buffer,0,sizeof(TX_buffer));
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	2100      	movs	r1, #0
 800085e:	482f      	ldr	r0, [pc, #188]	; (800091c <main+0x340>)
 8000860:	f005 fb32 	bl	8005ec8 <memset>
	  			  modbus_receive(RX_buffer, TX_buffer, len, holding_register);
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <main+0x344>)
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	492c      	ldr	r1, [pc, #176]	; (800091c <main+0x340>)
 800086a:	4827      	ldr	r0, [pc, #156]	; (8000908 <main+0x32c>)
 800086c:	f000 fac2 	bl	8000df4 <modbus_receive>
	  			  holding_register[3] = holding_register[3] + 1;
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <main+0x344>)
 8000872:	88db      	ldrh	r3, [r3, #6]
 8000874:	3301      	adds	r3, #1
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <main+0x344>)
 800087a:	80da      	strh	r2, [r3, #6]
//	  			send(1,test_buffer,4);//closing sq bracket

//	  			  uint8_t test_buffer[29]= {0,10,0,0,0,23,1,3,20,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10};
//	  			  send(1,test_buffer,29);//closing sq bracket

	  			  printf("\r\nECHO sent back to client\r\n");
 800087c:	4829      	ldr	r0, [pc, #164]	; (8000924 <main+0x348>)
 800087e:	f005 fa23 	bl	8005cc8 <puts>

	  			  //Look for quit message and quit if received
	  			  if(strcmp((char*) RX_buffer,"QUIT")==0)
 8000882:	4929      	ldr	r1, [pc, #164]	; (8000928 <main+0x34c>)
 8000884:	4820      	ldr	r0, [pc, #128]	; (8000908 <main+0x32c>)
 8000886:	f7ff fcc3 	bl	8000210 <strcmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1c6      	bne.n	800081e <main+0x242>
	  			  {
	  				  printf("Received QUIT command from client\r\n");
 8000890:	4826      	ldr	r0, [pc, #152]	; (800092c <main+0x350>)
 8000892:	f005 fa19 	bl	8005cc8 <puts>
	  				  printf("Disconnecting ... \r\n");
 8000896:	4826      	ldr	r0, [pc, #152]	; (8000930 <main+0x354>)
 8000898:	f005 fa16 	bl	8005cc8 <puts>
	  				  printf("*** SESSION OVER ***\r\n\r\n");
 800089c:	481c      	ldr	r0, [pc, #112]	; (8000910 <main+0x334>)
 800089e:	f005 fa13 	bl	8005cc8 <puts>
	  				  disconnect(1);//disconnect from the clinet
 80008a2:	2001      	movs	r0, #1
 80008a4:	f001 fa0c 	bl	8001cc0 <disconnect>
  {
 80008a8:	e76b      	b.n	8000782 <main+0x1a6>
 80008aa:	bf00      	nop
 80008ac:	08006ff0 	.word	0x08006ff0
 80008b0:	40020000 	.word	0x40020000
 80008b4:	08000bf9 	.word	0x08000bf9
 80008b8:	08000be1 	.word	0x08000be1
 80008bc:	08000c11 	.word	0x08000c11
 80008c0:	08000c2b 	.word	0x08000c2b
 80008c4:	20000000 	.word	0x20000000
 80008c8:	08006d64 	.word	0x08006d64
 80008cc:	200001e0 	.word	0x200001e0
 80008d0:	08006d80 	.word	0x08006d80
 80008d4:	2000014c 	.word	0x2000014c
 80008d8:	08006da4 	.word	0x08006da4
 80008dc:	08006dc4 	.word	0x08006dc4
 80008e0:	08006de4 	.word	0x08006de4
 80008e4:	08006e04 	.word	0x08006e04
 80008e8:	08006e24 	.word	0x08006e24
 80008ec:	08006e3c 	.word	0x08006e3c
 80008f0:	08006e5c 	.word	0x08006e5c
 80008f4:	08006e7c 	.word	0x08006e7c
 80008f8:	08006ea0 	.word	0x08006ea0
 80008fc:	08006ebc 	.word	0x08006ebc
 8000900:	08006ef4 	.word	0x08006ef4
 8000904:	08006f0c 	.word	0x08006f0c
 8000908:	200002a8 	.word	0x200002a8
 800090c:	08006f2c 	.word	0x08006f2c
 8000910:	08006f48 	.word	0x08006f48
 8000914:	08006f60 	.word	0x08006f60
 8000918:	08006f80 	.word	0x08006f80
 800091c:	20000228 	.word	0x20000228
 8000920:	20000018 	.word	0x20000018
 8000924:	08006f94 	.word	0x08006f94
 8000928:	08006fb0 	.word	0x08006fb0
 800092c:	08006fb8 	.word	0x08006fb8
 8000930:	08006fdc 	.word	0x08006fdc

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	; 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2234      	movs	r2, #52	; 0x34
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fac0 	bl	8005ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <SystemClock_Config+0xdc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <SystemClock_Config+0xdc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <SystemClock_Config+0xdc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <SystemClock_Config+0xe0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <SystemClock_Config+0xe0>)
 800097e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SystemClock_Config+0xe0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000998:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009a8:	23b4      	movs	r3, #180	; 0xb4
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f993 	bl	8003ce8 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c8:	f000 f9dc 	bl	8000d84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009cc:	f002 fdf2 	bl	80035b4 <HAL_PWREx_EnableOverDrive>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009d6:	f000 f9d5 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2105      	movs	r1, #5
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fe2b 	bl	8003654 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a04:	f000 f9be 	bl	8000d84 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3750      	adds	r7, #80	; 0x50
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <MX_SPI2_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_SPI2_Init+0x64>)
 8000a6a:	f003 fbdb 	bl	8004224 <HAL_SPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a74:	f000 f986 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000188 	.word	0x20000188
 8000a80:	40003800 	.word	0x40003800

08000a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_USART2_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000abc:	f003 ffda 	bl	8004a74 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f000 f95d 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001e0 	.word	0x200001e0
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a25      	ldr	r2, [pc, #148]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_GPIO_Init+0xd0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500_CS_Pin|LD2_Pin|GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2162      	movs	r1, #98	; 0x62
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <MX_GPIO_Init+0xd4>)
 8000b64:	f002 fd0c 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_GPIO_Init+0xd8>)
 8000b80:	f002 fb6a 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_W5500_CS_Pin LD2_Pin GPIO_W5500_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500_CS_Pin|LD2_Pin|GPIO_W5500_RESET_Pin;
 8000b84:	2362      	movs	r3, #98	; 0x62
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_GPIO_Init+0xd4>)
 8000b9c:	f002 fb5c 	bl	8003258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <W5500_rxtx>:
{
	DelayIncCnt();
}

uint8_t W5500_rxtx(uint8_t data)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;

	HAL_SPI_TransmitReceive(&hspi2, &data, &rxdata, 1, 50);
 8000bbe:	f107 020f 	add.w	r2, r7, #15
 8000bc2:	1df9      	adds	r1, r7, #7
 8000bc4:	2332      	movs	r3, #50	; 0x32
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <W5500_rxtx+0x28>)
 8000bcc:	f003 fbb3 	bl	8004336 <HAL_SPI_TransmitReceive>

	return (rxdata);
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000188 	.word	0x20000188

08000be0 <wizchip_select>:

void  wizchip_select(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	W5500_select();
 8000be4:	2200      	movs	r2, #0
 8000be6:	2102      	movs	r1, #2
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <wizchip_select+0x14>)
 8000bea:	f002 fcc9 	bl	8003580 <HAL_GPIO_WritePin>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	W5500_release();
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <wizchip_deselect+0x14>)
 8000c02:	f002 fcbd 	bl	8003580 <HAL_GPIO_WritePin>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40020000 	.word	0x40020000

08000c10 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	W5500_tx(wb);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ffc9 	bl	8000bb4 <W5500_rxtx>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <wizchip_read>:

uint8_t wizchip_read()
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
   return W5500_rx();
 8000c2e:	20ff      	movs	r0, #255	; 0xff
 8000c30:	f7ff ffc0 	bl	8000bb4 <W5500_rxtx>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
   uint8_t tmpstr[6];

	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000c42:	4906      	ldr	r1, [pc, #24]	; (8000c5c <network_init+0x20>)
 8000c44:	2000      	movs	r0, #0
 8000c46:	f001 fcbb 	bl	80025c0 <ctlnetwork>

	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	2008      	movs	r0, #8
 8000c50:	f001 fbd4 	bl	80023fc <ctlwizchip>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000

08000c60 <UWriteData>:

void UWriteData(const char data)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 8000c6a:	bf00      	nop
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <UWriteData+0x30>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	2b80      	cmp	r3, #128	; 0x80
 8000c78:	d1f8      	bne.n	8000c6c <UWriteData+0xc>

	huart2.Instance->DR=data;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <UWriteData+0x30>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	605a      	str	r2, [r3, #4]

}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200001e0 	.word	0x200001e0

08000c94 <__io_putchar>:

int __io_putchar(int ch)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffdd 	bl	8000c60 <UWriteData>
	return ch;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <PHYStatusCheck+0x40>)
 8000cb8:	f004 ffa0 	bl	8005bfc <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	200f      	movs	r0, #15
 8000cc2:	f001 fb9b 	bl	80023fc <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d106      	bne.n	8000cda <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <PHYStatusCheck+0x44>)
 8000cce:	f004 ff95 	bl	8005bfc <iprintf>
			HAL_Delay(1500);
 8000cd2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000cd6:	f002 f8f7 	bl	8002ec8 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0ea      	beq.n	8000cb6 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <PHYStatusCheck+0x48>)
 8000ce2:	f004 ff8b 	bl	8005bfc <iprintf>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	08007000 	.word	0x08007000
 8000cf4:	08007028 	.word	0x08007028
 8000cf8:	0800703c 	.word	0x0800703c

08000cfc <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	200b      	movs	r0, #11
 8000d08:	f001 fb78 	bl	80023fc <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000d0c:	793b      	ldrb	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d103      	bne.n	8000d1a <PrintPHYConf+0x1e>
	{
		printf("\r\nPHY Configured by Hardware Pins");
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <PrintPHYConf+0x68>)
 8000d14:	f004 ff72 	bl	8005bfc <iprintf>
 8000d18:	e002      	b.n	8000d20 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\r\nPHY Configured by Registers");
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <PrintPHYConf+0x6c>)
 8000d1c:	f004 ff6e 	bl	8005bfc <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8000d20:	797b      	ldrb	r3, [r7, #5]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d103      	bne.n	8000d2e <PrintPHYConf+0x32>
	{
		printf("\r\nAutonegotiation Enabled");
 8000d26:	4811      	ldr	r0, [pc, #68]	; (8000d6c <PrintPHYConf+0x70>)
 8000d28:	f004 ff68 	bl	8005bfc <iprintf>
 8000d2c:	e002      	b.n	8000d34 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\r\nAutonegotiation NOT Enabled");
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <PrintPHYConf+0x74>)
 8000d30:	f004 ff64 	bl	8005bfc <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d103      	bne.n	8000d42 <PrintPHYConf+0x46>
	{
		printf("\r\nDuplex Mode: Full");
 8000d3a:	480e      	ldr	r0, [pc, #56]	; (8000d74 <PrintPHYConf+0x78>)
 8000d3c:	f004 ff5e 	bl	8005bfc <iprintf>
 8000d40:	e002      	b.n	8000d48 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\r\nDuplex Mode: Half");
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <PrintPHYConf+0x7c>)
 8000d44:	f004 ff5a 	bl	8005bfc <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <PrintPHYConf+0x5a>
	{
		printf("\r\nSpeed: 10Mbps");
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <PrintPHYConf+0x80>)
 8000d50:	f004 ff54 	bl	8005bfc <iprintf>
	}
	else
	{
		printf("\r\nSpeed: 100Mbps");
	}
}
 8000d54:	e002      	b.n	8000d5c <PrintPHYConf+0x60>
		printf("\r\nSpeed: 100Mbps");
 8000d56:	480a      	ldr	r0, [pc, #40]	; (8000d80 <PrintPHYConf+0x84>)
 8000d58:	f004 ff50 	bl	8005bfc <iprintf>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	08007058 	.word	0x08007058
 8000d68:	0800707c 	.word	0x0800707c
 8000d6c:	0800709c 	.word	0x0800709c
 8000d70:	080070b8 	.word	0x080070b8
 8000d74:	080070d8 	.word	0x080070d8
 8000d78:	080070ec 	.word	0x080070ec
 8000d7c:	08007100 	.word	0x08007100
 8000d80:	08007110 	.word	0x08007110

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>

08000d8e <get_HB_LB>:
unsigned char low_byte = 0x00;
unsigned char high_byte = 0x00;


void get_HB_LB(uint16_t  value, unsigned char *HB, unsigned char *LB)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	81fb      	strh	r3, [r7, #14]
    *LB = (value & 0x00FF);
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	701a      	strb	r2, [r3, #0]
    *HB = ((value & 0xFF00) >> 0x08);
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	701a      	strb	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <make_word>:



uint16_t  make_word(unsigned char HB, unsigned char LB)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
   uint16_t tmp = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	81fb      	strh	r3, [r7, #14]

    tmp = HB;
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	81fb      	strh	r3, [r7, #14]
    tmp <<= 8;
 8000dd4:	89fb      	ldrh	r3, [r7, #14]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	81fb      	strh	r3, [r7, #14]
    tmp |= LB;
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	81fb      	strh	r3, [r7, #14]

    return tmp;
 8000de4:	89fb      	ldrh	r3, [r7, #14]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <modbus_receive>:
		}
	}

	return CRC_word;
}
void modbus_receive(uint8_t *rx_buffer, uint8_t *tx_buffer ,int recv_lenght, uint16_t *read_registers ){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]

	uint16_t temp1 = 0x0000;
 8000e02:	2300      	movs	r3, #0
 8000e04:	83fb      	strh	r3, [r7, #30]
	uint16_t temp2 = 0x0000;
 8000e06:	2300      	movs	r3, #0
 8000e08:	83bb      	strh	r3, [r7, #28]
	uint16_t temp3 = 0x0000;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t temp4 = 0x0000;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	837b      	strh	r3, [r7, #26]
	uint16_t temp5 = 0x0000;
 8000e12:	2300      	movs	r3, #0
 8000e14:	833b      	strh	r3, [r7, #24]
	uint16_t temp6 = 0x0000;
 8000e16:	2300      	movs	r3, #0
 8000e18:	82fb      	strh	r3, [r7, #22]
	uint16_t temp7 = 0x0000;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	82bb      	strh	r3, [r7, #20]

	//memset(tx_buffer,0,sizeof(tx_buffer));

	//send(1,rx_buffer,recv_lenght);// the data

	if(rx_buffer[id_byte] ==  Slave_ID){
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3306      	adds	r3, #6
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	f040 80bb 	bne.w	8000fa0 <modbus_receive+0x1ac>
	tx_buffer[id_byte] = rx_buffer[id_byte];
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	3306      	adds	r3, #6
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	7992      	ldrb	r2, [r2, #6]
 8000e32:	701a      	strb	r2, [r3, #0]

	switch(rx_buffer[function_code_byte]) {
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3307      	adds	r3, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	f000 80a8 	beq.w	8000f90 <modbus_receive+0x19c>
 8000e40:	2b10      	cmp	r3, #16
 8000e42:	f300 80a9 	bgt.w	8000f98 <modbus_receive+0x1a4>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d003      	beq.n	8000e52 <modbus_receive+0x5e>
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	f000 809c 	beq.w	8000f88 <modbus_receive+0x194>
 8000e50:	e0a2      	b.n	8000f98 <modbus_receive+0x1a4>

		case FC_read_holding_registers:
		{
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3308      	adds	r3, #8
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3309      	adds	r3, #9
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4610      	mov	r0, r2
 8000e62:	f7ff ffab 	bl	8000dbc <make_word>
 8000e66:	4603      	mov	r3, r0
 8000e68:	83fb      	strh	r3, [r7, #30]
			if ((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8000e6a:	8bfb      	ldrh	r3, [r7, #30]
 8000e6c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e6e:	f200 8084 	bhi.w	8000f7a <modbus_receive+0x186>
			{
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	330a      	adds	r3, #10
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	330b      	adds	r3, #11
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4610      	mov	r0, r2
 8000e82:	f7ff ff9b 	bl	8000dbc <make_word>
 8000e86:	4603      	mov	r3, r0
 8000e88:	83bb      	strh	r3, [r7, #28]
				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8000e8a:	8bbb      	ldrh	r3, [r7, #28]
 8000e8c:	2b40      	cmp	r3, #64	; 0x40
 8000e8e:	d870      	bhi.n	8000f72 <modbus_receive+0x17e>
 8000e90:	8bba      	ldrh	r2, [r7, #28]
 8000e92:	8bfb      	ldrh	r3, [r7, #30]
 8000e94:	4413      	add	r3, r2
 8000e96:	2b40      	cmp	r3, #64	; 0x40
 8000e98:	dc6b      	bgt.n	8000f72 <modbus_receive+0x17e>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	7852      	ldrb	r2, [r2, #1]
 8000eaa:	701a      	strb	r2, [r3, #0]

						tx_buffer[byte_size_low_byte]= (temp2 *2) + 3;
 8000eac:	8bbb      	ldrh	r3, [r7, #28]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3305      	adds	r3, #5
 8000eb8:	3203      	adds	r2, #3
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	701a      	strb	r2, [r3, #0]
						tx_buffer[8] = (temp2 * 2);
 8000ebe:	8bbb      	ldrh	r3, [r7, #28]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	0052      	lsls	r2, r2, #1
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	701a      	strb	r2, [r3, #0]
						tx_buffer[function_code_byte] = rx_buffer[function_code_byte];
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	3307      	adds	r3, #7
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	79d2      	ldrb	r2, [r2, #7]
 8000ed4:	701a      	strb	r2, [r3, #0]


					if (temp2 > 1)
 8000ed6:	8bbb      	ldrh	r3, [r7, #28]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d92b      	bls.n	8000f34 <modbus_receive+0x140>
					{
						int i = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8000ee0:	8bfb      	ldrh	r3, [r7, #30]
 8000ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ee4:	e021      	b.n	8000f2a <modbus_receive+0x136>
						{
							get_HB_LB(read_registers[((temp1 - addr_holding_reg_start) + temp3)], &high_byte, &low_byte);
 8000ee6:	8bfa      	ldrh	r2, [r7, #30]
 8000ee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <modbus_receive+0x1b4>)
 8000ef6:	492d      	ldr	r1, [pc, #180]	; (8000fac <modbus_receive+0x1b8>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff48 	bl	8000d8e <get_HB_LB>
							tx_buffer[9 + i] = high_byte;
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	3309      	adds	r3, #9
 8000f02:	461a      	mov	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a28      	ldr	r2, [pc, #160]	; (8000fac <modbus_receive+0x1b8>)
 8000f0a:	7812      	ldrb	r2, [r2, #0]
 8000f0c:	701a      	strb	r2, [r3, #0]
							tx_buffer[10 + i] = low_byte;
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	330a      	adds	r3, #10
 8000f12:	461a      	mov	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <modbus_receive+0x1b4>)
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	701a      	strb	r2, [r3, #0]
							i = i + 2;
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	3302      	adds	r3, #2
 8000f22:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8000f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f26:	3301      	adds	r3, #1
 8000f28:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f2c:	8bbb      	ldrh	r3, [r7, #28]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3d9      	bcc.n	8000ee6 <modbus_receive+0xf2>
 8000f32:	e013      	b.n	8000f5c <modbus_receive+0x168>
						}
					}

					else
					{
						get_HB_LB(read_registers[(temp1 - addr_holding_reg_start)], &high_byte, &low_byte);
 8000f34:	8bfb      	ldrh	r3, [r7, #30]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <modbus_receive+0x1b4>)
 8000f40:	491a      	ldr	r1, [pc, #104]	; (8000fac <modbus_receive+0x1b8>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff23 	bl	8000d8e <get_HB_LB>
						tx_buffer[1] = high_byte;
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <modbus_receive+0x1b8>)
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	701a      	strb	r2, [r3, #0]
						tx_buffer[2] = low_byte;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3302      	adds	r3, #2
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <modbus_receive+0x1b4>)
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	701a      	strb	r2, [r3, #0]
					}
					//memset(tx_buffer,0,sizeof(tx_buffer));
					send(1,tx_buffer,((temp2 * 2)+ 9 ));
 8000f5c:	8bbb      	ldrh	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3309      	adds	r3, #9
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 ff1e 	bl	8001dac <send>
 8000f70:	e006      	b.n	8000f80 <modbus_receive+0x18c>

				}

				else
				{
					error_flag = 1;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <modbus_receive+0x1bc>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e002      	b.n	8000f80 <modbus_receive+0x18c>
				}
			}

			else
			{
				error_flag = 1;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <modbus_receive+0x1bc>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
			}
			printf("You entered 1.\n");
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <modbus_receive+0x1c0>)
 8000f82:	f004 fea1 	bl	8005cc8 <puts>
			break;
 8000f86:	e00b      	b.n	8000fa0 <modbus_receive+0x1ac>
		}


		case FC_write_single_register:
			// Code to execute if choice is 2
			printf("You entered 2.\n");
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <modbus_receive+0x1c4>)
 8000f8a:	f004 fe9d 	bl	8005cc8 <puts>
			break;
 8000f8e:	e007      	b.n	8000fa0 <modbus_receive+0x1ac>
		case FC_write_multiple_registers:
			// Code to execute if choice is 3
			printf("You entered 3.\n");
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <modbus_receive+0x1c8>)
 8000f92:	f004 fe99 	bl	8005cc8 <puts>
			break;
 8000f96:	e003      	b.n	8000fa0 <modbus_receive+0x1ac>
		default:
			// Code to execute if choice doesn't match any case
			printf("Invalid choice.\n");
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <modbus_receive+0x1cc>)
 8000f9a:	f004 fe95 	bl	8005cc8 <puts>
			break;
 8000f9e:	bf00      	nop
		}
	}


}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000329 	.word	0x20000329
 8000fac:	2000032a 	.word	0x2000032a
 8000fb0:	20000328 	.word	0x20000328
 8000fb4:	08007124 	.word	0x08007124
 8000fb8:	08007134 	.word	0x08007134
 8000fbc:	08007144 	.word	0x08007144
 8000fc0:	08007154 	.word	0x08007154

08000fc4 <RTU_RX_Int>:
	*FrameNrBytes = 8 + data_length;
	send(1,TX_buffer,FrameNrBytes);
}

__weak void RTU_RX_Int(UART_HandleTypeDef *huart)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the RTU_RX_Int could be implemented in the user file
   */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_MspInit+0x4c>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_MspInit+0x4c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001016:	2007      	movs	r0, #7
 8001018:	f002 f84a 	bl	80030b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a34      	ldr	r2, [pc, #208]	; (8001118 <HAL_SPI_MspInit+0xf0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d162      	bne.n	8001110 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <HAL_SPI_MspInit+0xf4>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a32      	ldr	r2, [pc, #200]	; (800111c <HAL_SPI_MspInit+0xf4>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_SPI_MspInit+0xf4>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <HAL_SPI_MspInit+0xf4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a2b      	ldr	r2, [pc, #172]	; (800111c <HAL_SPI_MspInit+0xf4>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <HAL_SPI_MspInit+0xf4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_SPI_MspInit+0xf4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a24      	ldr	r2, [pc, #144]	; (800111c <HAL_SPI_MspInit+0xf4>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <HAL_SPI_MspInit+0xf4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800109e:	2302      	movs	r3, #2
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80010ae:	2307      	movs	r3, #7
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4819      	ldr	r0, [pc, #100]	; (8001120 <HAL_SPI_MspInit+0xf8>)
 80010ba:	f002 f8cd 	bl	8003258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010be:	2304      	movs	r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ce:	2305      	movs	r3, #5
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <HAL_SPI_MspInit+0xf8>)
 80010da:	f002 f8bd 	bl	8003258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f0:	2305      	movs	r3, #5
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480a      	ldr	r0, [pc, #40]	; (8001124 <HAL_SPI_MspInit+0xfc>)
 80010fc:	f002 f8ac 	bl	8003258 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2024      	movs	r0, #36	; 0x24
 8001106:	f001 ffde 	bl	80030c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800110a:	2024      	movs	r0, #36	; 0x24
 800110c:	f001 fff7 	bl	80030fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40003800 	.word	0x40003800
 800111c:	40023800 	.word	0x40023800
 8001120:	40020800 	.word	0x40020800
 8001124:	40020400 	.word	0x40020400

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_UART_MspInit+0x94>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d133      	bne.n	80011b2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0x98>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_UART_MspInit+0x98>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001182:	230c      	movs	r3, #12
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001192:	2307      	movs	r3, #7
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_UART_MspInit+0x9c>)
 800119e:	f002 f85b 	bl	8003258 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2026      	movs	r0, #38	; 0x26
 80011a8:	f001 ff8d 	bl	80030c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ac:	2026      	movs	r0, #38	; 0x26
 80011ae:	f001 ffa6 	bl	80030fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f001 fe38 	bl	8002e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <SPI2_IRQHandler+0x14>)
 8001222:	f003 fa39 	bl	8004698 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */
  RTU_RX_Int(&huart2);
 8001226:	4803      	ldr	r0, [pc, #12]	; (8001234 <SPI2_IRQHandler+0x18>)
 8001228:	f7ff fecc 	bl	8000fc4 <RTU_RX_Int>
  /* USER CODE END SPI2_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000188 	.word	0x20000188
 8001234:	200001e0 	.word	0x200001e0

08001238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART2_IRQHandler+0x10>)
 800123e:	f003 fcf5 	bl	8004c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200001e0 	.word	0x200001e0

0800124c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e00a      	b.n	8001274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125e:	f3af 8000 	nop.w
 8001262:	4601      	mov	r1, r0
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	60ba      	str	r2, [r7, #8]
 800126a:	b2ca      	uxtb	r2, r1
 800126c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf0      	blt.n	800125e <_read+0x12>
  }

  return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e009      	b.n	80012ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fcf7 	bl	8000c94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbf1      	blt.n	8001298 <_write+0x12>
  }
  return len;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_close>:

int _close(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e6:	605a      	str	r2, [r3, #4]
  return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_isatty>:

int _isatty(int file)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f004 fe04 	bl	8005f64 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20020000 	.word	0x20020000
 8001388:	00000400 	.word	0x00000400
 800138c:	2000032c 	.word	0x2000032c
 8001390:	200004a8 	.word	0x200004a8

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <WIZCHIP_READ+0x94>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <WIZCHIP_READ+0x94>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <WIZCHIP_READ+0x94>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <WIZCHIP_READ+0x24>
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <WIZCHIP_READ+0x94>)
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d114      	bne.n	8001406 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <WIZCHIP_READ+0x94>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	0c12      	lsrs	r2, r2, #16
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	4610      	mov	r0, r2
 80013e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <WIZCHIP_READ+0x94>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	0a12      	lsrs	r2, r2, #8
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	4610      	mov	r0, r2
 80013f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <WIZCHIP_READ+0x94>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	4610      	mov	r0, r2
 8001402:	4798      	blx	r3
 8001404:	e011      	b.n	800142a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	b2db      	uxtb	r3, r3
 800140c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b2db      	uxtb	r3, r3
 8001414:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <WIZCHIP_READ+0x94>)
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f107 020c 	add.w	r2, r7, #12
 8001424:	2103      	movs	r1, #3
 8001426:	4610      	mov	r0, r2
 8001428:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <WIZCHIP_READ+0x94>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4798      	blx	r3
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <WIZCHIP_READ+0x94>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <WIZCHIP_READ+0x94>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	4798      	blx	r3
   return ret;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000a0 	.word	0x200000a0

08001450 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	2b00      	cmp	r3, #0
 8001476:	d119      	bne.n	80014ac <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	0c12      	lsrs	r2, r2, #16
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	4610      	mov	r0, r2
 8001484:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	0a12      	lsrs	r2, r2, #8
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	4610      	mov	r0, r2
 8001492:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	4610      	mov	r0, r2
 800149e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	4610      	mov	r0, r2
 80014a8:	4798      	blx	r3
 80014aa:	e013      	b.n	80014d4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0c1b      	lsrs	r3, r3, #16
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	f107 020c 	add.w	r2, r7, #12
 80014ce:	2104      	movs	r1, #4
 80014d0:	4610      	mov	r0, r2
 80014d2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80014da:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <WIZCHIP_WRITE+0x98>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	4798      	blx	r3
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200000a0 	.word	0x200000a0

080014ec <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	4613      	mov	r3, r2
 80014f8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <WIZCHIP_READ_BUF+0x2a>
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	2b00      	cmp	r3, #0
 8001514:	d126      	bne.n	8001564 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	0c12      	lsrs	r2, r2, #16
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	4610      	mov	r0, r2
 8001522:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	0a12      	lsrs	r2, r2, #8
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	4610      	mov	r0, r2
 8001530:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	4610      	mov	r0, r2
 800153c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	82fb      	strh	r3, [r7, #22]
 8001542:	e00a      	b.n	800155a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	8afa      	ldrh	r2, [r7, #22]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	188c      	adds	r4, r1, r2
 800154e:	4798      	blx	r3
 8001550:	4603      	mov	r3, r0
 8001552:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001554:	8afb      	ldrh	r3, [r7, #22]
 8001556:	3301      	adds	r3, #1
 8001558:	82fb      	strh	r3, [r7, #22]
 800155a:	8afa      	ldrh	r2, [r7, #22]
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3f0      	bcc.n	8001544 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001562:	e017      	b.n	8001594 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	0c1b      	lsrs	r3, r3, #16
 8001568:	b2db      	uxtb	r3, r3
 800156a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b2db      	uxtb	r3, r3
 8001572:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f107 0210 	add.w	r2, r7, #16
 8001582:	2103      	movs	r1, #3
 8001584:	4610      	mov	r0, r2
 8001586:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	88fa      	ldrh	r2, [r7, #6]
 800158e:	4611      	mov	r1, r2
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <WIZCHIP_READ_BUF+0xbc>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4798      	blx	r3
}
 80015a0:	bf00      	nop
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	200000a0 	.word	0x200000a0

080015ac <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	4613      	mov	r3, r2
 80015b8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4798      	blx	r3
   WIZCHIP.CS._select();
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d126      	bne.n	8001624 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80015d6:	4b24      	ldr	r3, [pc, #144]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	0c12      	lsrs	r2, r2, #16
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	4610      	mov	r0, r2
 80015e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	0a12      	lsrs	r2, r2, #8
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	4610      	mov	r0, r2
 80015f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	4610      	mov	r0, r2
 80015fc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	82fb      	strh	r3, [r7, #22]
 8001602:	e00a      	b.n	800161a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	8afa      	ldrh	r2, [r7, #22]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	440a      	add	r2, r1
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	4610      	mov	r0, r2
 8001612:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001614:	8afb      	ldrh	r3, [r7, #22]
 8001616:	3301      	adds	r3, #1
 8001618:	82fb      	strh	r3, [r7, #22]
 800161a:	8afa      	ldrh	r2, [r7, #22]
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	429a      	cmp	r2, r3
 8001620:	d3f0      	bcc.n	8001604 <WIZCHIP_WRITE_BUF+0x58>
 8001622:	e017      	b.n	8001654 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	b2db      	uxtb	r3, r3
 800162a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b2db      	uxtb	r3, r3
 8001632:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	f107 0210 	add.w	r2, r7, #16
 8001642:	2103      	movs	r1, #3
 8001644:	4610      	mov	r0, r2
 8001646:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	88fa      	ldrh	r2, [r7, #6]
 800164e:	4611      	mov	r1, r2
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800165a:	4b03      	ldr	r3, [pc, #12]	; (8001668 <WIZCHIP_WRITE_BUF+0xbc>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	4798      	blx	r3
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200000a0 	.word	0x200000a0

0800166c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001676:	2300      	movs	r3, #0
 8001678:	81fb      	strh	r3, [r7, #14]
 800167a:	2300      	movs	r3, #0
 800167c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	3301      	adds	r3, #1
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fe94 	bl	80013b8 <WIZCHIP_READ>
 8001690:	4603      	mov	r3, r0
 8001692:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001694:	89bb      	ldrh	r3, [r7, #12]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b29c      	uxth	r4, r3
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	3301      	adds	r3, #1
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fe86 	bl	80013b8 <WIZCHIP_READ>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4423      	add	r3, r4
 80016b2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80016b4:	89bb      	ldrh	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01a      	beq.n	80016f0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	3301      	adds	r3, #1
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe76 	bl	80013b8 <WIZCHIP_READ>
 80016cc:	4603      	mov	r3, r0
 80016ce:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b29c      	uxth	r4, r3
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	3301      	adds	r3, #1
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fe68 	bl	80013b8 <WIZCHIP_READ>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4423      	add	r3, r4
 80016ee:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80016f0:	89fa      	ldrh	r2, [r7, #14]
 80016f2:	89bb      	ldrh	r3, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1c2      	bne.n	800167e <getSn_TX_FSR+0x12>
   return val;
 80016f8:	89fb      	ldrh	r3, [r7, #14]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}

08001702 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001702:	b590      	push	{r4, r7, lr}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800170c:	2300      	movs	r3, #0
 800170e:	81fb      	strh	r3, [r7, #14]
 8001710:	2300      	movs	r3, #0
 8001712:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3301      	adds	r3, #1
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fe49 	bl	80013b8 <WIZCHIP_READ>
 8001726:	4603      	mov	r3, r0
 8001728:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b29c      	uxth	r4, r3
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	3301      	adds	r3, #1
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fe3b 	bl	80013b8 <WIZCHIP_READ>
 8001742:	4603      	mov	r3, r0
 8001744:	b29b      	uxth	r3, r3
 8001746:	4423      	add	r3, r4
 8001748:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800174a:	89bb      	ldrh	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01a      	beq.n	8001786 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	3301      	adds	r3, #1
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe2b 	bl	80013b8 <WIZCHIP_READ>
 8001762:	4603      	mov	r3, r0
 8001764:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b29c      	uxth	r4, r3
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	3301      	adds	r3, #1
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fe1d 	bl	80013b8 <WIZCHIP_READ>
 800177e:	4603      	mov	r3, r0
 8001780:	b29b      	uxth	r3, r3
 8001782:	4423      	add	r3, r4
 8001784:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001786:	89fa      	ldrh	r2, [r7, #14]
 8001788:	89bb      	ldrh	r3, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d1c2      	bne.n	8001714 <getSn_RX_RSR+0x12>
   return val;
 800178e:	89fb      	ldrh	r3, [r7, #14]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}

08001798 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d048      	beq.n	8001848 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	3301      	adds	r3, #1
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fdf8 	bl	80013b8 <WIZCHIP_READ>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b29c      	uxth	r4, r3
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	3301      	adds	r3, #1
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fdeb 	bl	80013b8 <WIZCHIP_READ>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4423      	add	r3, r4
 80017e8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	79fa      	ldrb	r2, [r7, #7]
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	3202      	adds	r2, #2
 80017f4:	00d2      	lsls	r2, r2, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	461a      	mov	r2, r3
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	68b8      	ldr	r0, [r7, #8]
 8001802:	f7ff fed3 	bl	80015ac <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001806:	89fa      	ldrh	r2, [r7, #14]
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	3301      	adds	r3, #1
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800181a:	461a      	mov	r2, r3
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f7ff fe12 	bl	8001450 <WIZCHIP_WRITE>
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	3301      	adds	r3, #1
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001838:	461a      	mov	r2, r3
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f7ff fe05 	bl	8001450 <WIZCHIP_WRITE>
 8001846:	e000      	b.n	800184a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001848:	bf00      	nop
}
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}

08001850 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d048      	beq.n	8001900 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	3301      	adds	r3, #1
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fd9c 	bl	80013b8 <WIZCHIP_READ>
 8001880:	4603      	mov	r3, r0
 8001882:	b29b      	uxth	r3, r3
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b29c      	uxth	r4, r3
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	3301      	adds	r3, #1
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fd8f 	bl	80013b8 <WIZCHIP_READ>
 800189a:	4603      	mov	r3, r0
 800189c:	b29b      	uxth	r3, r3
 800189e:	4423      	add	r3, r4
 80018a0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80018a2:	89fb      	ldrh	r3, [r7, #14]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	79fa      	ldrb	r2, [r7, #7]
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	3203      	adds	r2, #3
 80018ac:	00d2      	lsls	r2, r2, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	461a      	mov	r2, r3
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f7ff fe17 	bl	80014ec <WIZCHIP_READ_BUF>
   ptr += len;
 80018be:	89fa      	ldrh	r2, [r7, #14]
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	3301      	adds	r3, #1
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018d2:	461a      	mov	r2, r3
 80018d4:	89fb      	ldrh	r3, [r7, #14]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	b29b      	uxth	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f7ff fdb6 	bl	8001450 <WIZCHIP_WRITE>
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	3301      	adds	r3, #1
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80018f0:	461a      	mov	r2, r3
 80018f2:	89fb      	ldrh	r3, [r7, #14]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	f7ff fda9 	bl	8001450 <WIZCHIP_WRITE>
 80018fe:	e000      	b.n	8001902 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001900:	bf00      	nop
}
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}

08001908 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	4603      	mov	r3, r0
 800191c:	71bb      	strb	r3, [r7, #6]
 800191e:	460b      	mov	r3, r1
 8001920:	80bb      	strh	r3, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b08      	cmp	r3, #8
 800192a:	d902      	bls.n	8001932 <socket+0x2a>
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
 8001930:	e0f0      	b.n	8001b14 <socket+0x20c>
	switch(protocol)
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d005      	beq.n	8001944 <socket+0x3c>
 8001938:	2b00      	cmp	r3, #0
 800193a:	dd11      	ble.n	8001960 <socket+0x58>
 800193c:	3b02      	subs	r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	d80e      	bhi.n	8001960 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001942:	e011      	b.n	8001968 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2204      	movs	r2, #4
 800194a:	4619      	mov	r1, r3
 800194c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001950:	f7ff fdcc 	bl	80014ec <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d105      	bne.n	8001966 <socket+0x5e>
 800195a:	f06f 0302 	mvn.w	r3, #2
 800195e:	e0d9      	b.n	8001b14 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001960:	f06f 0304 	mvn.w	r3, #4
 8001964:	e0d6      	b.n	8001b14 <socket+0x20c>
	    break;
 8001966:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <socket+0x70>
 8001972:	f06f 0305 	mvn.w	r3, #5
 8001976:	e0cd      	b.n	8001b14 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d028      	beq.n	80019d0 <socket+0xc8>
	{
   	switch(protocol)
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d002      	beq.n	800198a <socket+0x82>
 8001984:	2b02      	cmp	r3, #2
 8001986:	d008      	beq.n	800199a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001988:	e022      	b.n	80019d0 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11a      	bne.n	80019ca <socket+0xc2>
 8001994:	f06f 0305 	mvn.w	r3, #5
 8001998:	e0bc      	b.n	8001b14 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80019a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db02      	blt.n	80019b2 <socket+0xaa>
 80019ac:	f06f 0305 	mvn.w	r3, #5
 80019b0:	e0b0      	b.n	8001b14 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80019bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db04      	blt.n	80019ce <socket+0xc6>
 80019c4:	f06f 0305 	mvn.w	r3, #5
 80019c8:	e0a4      	b.n	8001b14 <socket+0x20c>
   	      break;
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <socket+0xc8>
   	      break;
 80019ce:	bf00      	nop
   	}
   }
	close(sn);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f8ac 	bl	8001b30 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	3301      	adds	r3, #1
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e6:	f023 030f 	bic.w	r3, r3, #15
 80019ea:	b25a      	sxtb	r2, r3
 80019ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff fd2a 	bl	8001450 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d110      	bne.n	8001a24 <socket+0x11c>
	{
	   port = sock_any_port++;
 8001a02:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <socket+0x214>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	b291      	uxth	r1, r2
 8001a0a:	4a44      	ldr	r2, [pc, #272]	; (8001b1c <socket+0x214>)
 8001a0c:	8011      	strh	r1, [r2, #0]
 8001a0e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <socket+0x214>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d103      	bne.n	8001a24 <socket+0x11c>
 8001a1c:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <socket+0x214>)
 8001a1e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a22:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	3301      	adds	r3, #1
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a30:	461a      	mov	r2, r3
 8001a32:	88bb      	ldrh	r3, [r7, #4]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	f7ff fd07 	bl	8001450 <WIZCHIP_WRITE>
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	3301      	adds	r3, #1
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4e:	461a      	mov	r2, r3
 8001a50:	88bb      	ldrh	r3, [r7, #4]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f7ff fcfa 	bl	8001450 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	3301      	adds	r3, #1
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fcf0 	bl	8001450 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001a70:	bf00      	nop
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	3301      	adds	r3, #1
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc9a 	bl	80013b8 <WIZCHIP_READ>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f3      	bne.n	8001a72 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <socket+0x218>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <socket+0x218>)
 8001aa6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f003 0201 	and.w	r2, r3, #1
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <socket+0x218>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <socket+0x218>)
 8001ac4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <socket+0x21c>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	4013      	ands	r3, r2
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <socket+0x21c>)
 8001ae2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <socket+0x220>)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <socket+0x224>)
 8001af2:	2100      	movs	r1, #0
 8001af4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001af6:	bf00      	nop
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	3301      	adds	r3, #1
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fc57 	bl	80013b8 <WIZCHIP_READ>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f3      	beq.n	8001af8 <socket+0x1f0>
   return (int8_t)sn;
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	2000009c 	.word	0x2000009c
 8001b20:	20000330 	.word	0x20000330
 8001b24:	20000332 	.word	0x20000332
 8001b28:	20000334 	.word	0x20000334
 8001b2c:	20000344 	.word	0x20000344

08001b30 <close>:

int8_t close(uint8_t sn)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d902      	bls.n	8001b46 <close+0x16>
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	e055      	b.n	8001bf2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b52:	2110      	movs	r1, #16
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fc7b 	bl	8001450 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001b5a:	bf00      	nop
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	3301      	adds	r3, #1
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fc25 	bl	80013b8 <WIZCHIP_READ>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f3      	bne.n	8001b5c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	3301      	adds	r3, #1
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b80:	211f      	movs	r1, #31
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fc64 	bl	8001450 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <close+0xcc>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <close+0xcc>)
 8001ba4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <close+0xd0>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4013      	ands	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <close+0xd0>)
 8001bc2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <close+0xd4>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <close+0xd8>)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001bd6:	bf00      	nop
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	3301      	adds	r3, #1
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fbe7 	bl	80013b8 <WIZCHIP_READ>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f3      	bne.n	8001bd8 <close+0xa8>
	return SOCK_OK;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000330 	.word	0x20000330
 8001c00:	20000332 	.word	0x20000332
 8001c04:	20000334 	.word	0x20000334
 8001c08:	20000344 	.word	0x20000344

08001c0c <listen>:

int8_t listen(uint8_t sn)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d902      	bls.n	8001c22 <listen+0x16>
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	e049      	b.n	8001cb6 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3301      	adds	r3, #1
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fbc4 	bl	80013b8 <WIZCHIP_READ>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d002      	beq.n	8001c40 <listen+0x34>
 8001c3a:	f06f 0304 	mvn.w	r3, #4
 8001c3e:	e03a      	b.n	8001cb6 <listen+0xaa>
	CHECK_SOCKINIT();
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	3301      	adds	r3, #1
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fbb3 	bl	80013b8 <WIZCHIP_READ>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b13      	cmp	r3, #19
 8001c56:	d002      	beq.n	8001c5e <listen+0x52>
 8001c58:	f06f 0302 	mvn.w	r3, #2
 8001c5c:	e02b      	b.n	8001cb6 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	3301      	adds	r3, #1
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fbef 	bl	8001450 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001c72:	bf00      	nop
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3301      	adds	r3, #1
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fb99 	bl	80013b8 <WIZCHIP_READ>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f3      	bne.n	8001c74 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001c8c:	e006      	b.n	8001c9c <listen+0x90>
   {
         close(sn);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff4d 	bl	8001b30 <close>
         return SOCKERR_SOCKCLOSED;
 8001c96:	f06f 0303 	mvn.w	r3, #3
 8001c9a:	e00c      	b.n	8001cb6 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fb85 	bl	80013b8 <WIZCHIP_READ>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b14      	cmp	r3, #20
 8001cb2:	d1ec      	bne.n	8001c8e <listen+0x82>
   }
   return SOCK_OK;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d902      	bls.n	8001cd6 <disconnect+0x16>
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	e062      	b.n	8001d9c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3301      	adds	r3, #1
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fb6a 	bl	80013b8 <WIZCHIP_READ>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d002      	beq.n	8001cf4 <disconnect+0x34>
 8001cee:	f06f 0304 	mvn.w	r3, #4
 8001cf2:	e053      	b.n	8001d9c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d00:	2108      	movs	r1, #8
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fba4 	bl	8001450 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001d08:	bf00      	nop
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	3301      	adds	r3, #1
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fb4e 	bl	80013b8 <WIZCHIP_READ>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f3      	bne.n	8001d0a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2201      	movs	r2, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <disconnect+0xe4>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4013      	ands	r3, r2
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <disconnect+0xe4>)
 8001d3e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <disconnect+0xe8>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	fa42 f303 	asr.w	r3, r2, r3
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d016      	beq.n	8001d82 <disconnect+0xc2>
 8001d54:	2300      	movs	r3, #0
 8001d56:	e021      	b.n	8001d9c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fb27 	bl	80013b8 <WIZCHIP_READ>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <disconnect+0xc2>
	   {
	      close(sn);
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff feda 	bl	8001b30 <close>
	      return SOCKERR_TIMEOUT;
 8001d7c:	f06f 030c 	mvn.w	r3, #12
 8001d80:	e00c      	b.n	8001d9c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	3301      	adds	r3, #1
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fb12 	bl	80013b8 <WIZCHIP_READ>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1de      	bne.n	8001d58 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000332 	.word	0x20000332
 8001da8:	20000330 	.word	0x20000330

08001dac <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d902      	bls.n	8001dd0 <send+0x24>
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e0de      	b.n	8001f8e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff faed 	bl	80013b8 <WIZCHIP_READ>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d002      	beq.n	8001dee <send+0x42>
 8001de8:	f06f 0304 	mvn.w	r3, #4
 8001dec:	e0cf      	b.n	8001f8e <send+0x1e2>
   CHECK_SOCKDATA();
 8001dee:	88bb      	ldrh	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <send+0x4e>
 8001df4:	f06f 030d 	mvn.w	r3, #13
 8001df8:	e0c9      	b.n	8001f8e <send+0x1e2>
   tmp = getSn_SR(sn);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	3301      	adds	r3, #1
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fad6 	bl	80013b8 <WIZCHIP_READ>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	2b17      	cmp	r3, #23
 8001e14:	d005      	beq.n	8001e22 <send+0x76>
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b1c      	cmp	r3, #28
 8001e1a:	d002      	beq.n	8001e22 <send+0x76>
 8001e1c:	f06f 0306 	mvn.w	r3, #6
 8001e20:	e0b5      	b.n	8001f8e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001e22:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <send+0x1ec>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	fa42 f303 	asr.w	r3, r2, r3
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d039      	beq.n	8001eaa <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fab8 	bl	80013b8 <WIZCHIP_READ>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	3301      	adds	r3, #1
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e66:	2110      	movs	r1, #16
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff faf1 	bl	8001450 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2201      	movs	r2, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <send+0x1ec>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	4013      	ands	r3, r2
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <send+0x1ec>)
 8001e8a:	801a      	strh	r2, [r3, #0]
 8001e8c:	e00d      	b.n	8001eaa <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <send+0xfa>
      {
         close(sn);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fe48 	bl	8001b30 <close>
         return SOCKERR_TIMEOUT;
 8001ea0:	f06f 030c 	mvn.w	r3, #12
 8001ea4:	e073      	b.n	8001f8e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e071      	b.n	8001f8e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	3301      	adds	r3, #1
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fa7e 	bl	80013b8 <WIZCHIP_READ>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	029b      	lsls	r3, r3, #10
 8001ec2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001ec4:	88ba      	ldrh	r2, [r7, #4]
 8001ec6:	89bb      	ldrh	r3, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d901      	bls.n	8001ed0 <send+0x124>
 8001ecc:	89bb      	ldrh	r3, [r7, #12]
 8001ece:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fbca 	bl	800166c <getSn_TX_FSR>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fa65 	bl	80013b8 <WIZCHIP_READ>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b17      	cmp	r3, #23
 8001ef6:	d009      	beq.n	8001f0c <send+0x160>
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b1c      	cmp	r3, #28
 8001efc:	d006      	beq.n	8001f0c <send+0x160>
      {
         close(sn);
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fe15 	bl	8001b30 <close>
         return SOCKERR_SOCKSTATUS;
 8001f06:	f06f 0306 	mvn.w	r3, #6
 8001f0a:	e040      	b.n	8001f8e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <send+0x1f0>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	fa42 f303 	asr.w	r3, r2, r3
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <send+0x180>
 8001f20:	88ba      	ldrh	r2, [r7, #4]
 8001f22:	89bb      	ldrh	r3, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d901      	bls.n	8001f2c <send+0x180>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e030      	b.n	8001f8e <send+0x1e2>
      if(len <= freesize) break;
 8001f2c:	88ba      	ldrh	r2, [r7, #4]
 8001f2e:	89bb      	ldrh	r3, [r7, #12]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d900      	bls.n	8001f36 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001f34:	e7cc      	b.n	8001ed0 <send+0x124>
      if(len <= freesize) break;
 8001f36:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001f38:	88ba      	ldrh	r2, [r7, #4]
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fc2a 	bl	8001798 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	3301      	adds	r3, #1
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f50:	2120      	movs	r1, #32
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fa7c 	bl	8001450 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001f58:	bf00      	nop
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	3301      	adds	r3, #1
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa26 	bl	80013b8 <WIZCHIP_READ>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f3      	bne.n	8001f5a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	2201      	movs	r2, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <send+0x1ec>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <send+0x1ec>)
 8001f8a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000332 	.word	0x20000332
 8001f9c:	20000330 	.word	0x20000330

08001fa0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d902      	bls.n	8001fc4 <recv+0x24>
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e09c      	b.n	80020fe <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	3301      	adds	r3, #1
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f9f3 	bl	80013b8 <WIZCHIP_READ>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d002      	beq.n	8001fe2 <recv+0x42>
 8001fdc:	f06f 0304 	mvn.w	r3, #4
 8001fe0:	e08d      	b.n	80020fe <recv+0x15e>
   CHECK_SOCKDATA();
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <recv+0x4e>
 8001fe8:	f06f 030d 	mvn.w	r3, #13
 8001fec:	e087      	b.n	80020fe <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f9dc 	bl	80013b8 <WIZCHIP_READ>
 8002000:	4603      	mov	r3, r0
 8002002:	b29b      	uxth	r3, r3
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002008:	89ba      	ldrh	r2, [r7, #12]
 800200a:	88bb      	ldrh	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d201      	bcs.n	8002014 <recv+0x74>
 8002010:	89bb      	ldrh	r3, [r7, #12]
 8002012:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fb73 	bl	8001702 <getSn_RX_RSR>
 800201c:	4603      	mov	r3, r0
 800201e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	3301      	adds	r3, #1
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f9c3 	bl	80013b8 <WIZCHIP_READ>
 8002032:	4603      	mov	r3, r0
 8002034:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b17      	cmp	r3, #23
 800203a:	d026      	beq.n	800208a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b1c      	cmp	r3, #28
 8002040:	d11c      	bne.n	800207c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d133      	bne.n	80020b0 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fb0e 	bl	800166c <getSn_TX_FSR>
 8002050:	4603      	mov	r3, r0
 8002052:	461c      	mov	r4, r3
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	3301      	adds	r3, #1
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f9a9 	bl	80013b8 <WIZCHIP_READ>
 8002066:	4603      	mov	r3, r0
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	429c      	cmp	r4, r3
 800206c:	d10d      	bne.n	800208a <recv+0xea>
               {
                  close(sn);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fd5d 	bl	8001b30 <close>
                  return SOCKERR_SOCKSTATUS;
 8002076:	f06f 0306 	mvn.w	r3, #6
 800207a:	e040      	b.n	80020fe <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fd56 	bl	8001b30 <close>
               return SOCKERR_SOCKSTATUS;
 8002084:	f06f 0306 	mvn.w	r3, #6
 8002088:	e039      	b.n	80020fe <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <recv+0x168>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	fa42 f303 	asr.w	r3, r2, r3
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <recv+0x108>
 800209e:	89bb      	ldrh	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <recv+0x108>
 80020a4:	2300      	movs	r3, #0
 80020a6:	e02a      	b.n	80020fe <recv+0x15e>
         if(recvsize != 0) break;
 80020a8:	89bb      	ldrh	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80020ae:	e7b1      	b.n	8002014 <recv+0x74>
               if(recvsize != 0) break;
 80020b0:	bf00      	nop
 80020b2:	e000      	b.n	80020b6 <recv+0x116>
         if(recvsize != 0) break;
 80020b4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80020b6:	89ba      	ldrh	r2, [r7, #12]
 80020b8:	88bb      	ldrh	r3, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d201      	bcs.n	80020c2 <recv+0x122>
 80020be:	89bb      	ldrh	r3, [r7, #12]
 80020c0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80020c2:	88ba      	ldrh	r2, [r7, #4]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fbc1 	bl	8001850 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	3301      	adds	r3, #1
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020da:	2140      	movs	r1, #64	; 0x40
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f9b7 	bl	8001450 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80020e2:	bf00      	nop
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	3301      	adds	r3, #1
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f961 	bl	80013b8 <WIZCHIP_READ>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f3      	bne.n	80020e4 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80020fc:	88bb      	ldrh	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}
 8002106:	bf00      	nop
 8002108:	20000330 	.word	0x20000330

0800210c <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	603a      	str	r2, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
 8002118:	460b      	mov	r3, r1
 800211a:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d902      	bls.n	800212c <ctlsocket+0x20>
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e0c2      	b.n	80022b2 <ctlsocket+0x1a6>
   switch(cstype)
 800212c:	79bb      	ldrb	r3, [r7, #6]
 800212e:	2b07      	cmp	r3, #7
 8002130:	f200 80bb 	bhi.w	80022aa <ctlsocket+0x19e>
 8002134:	a201      	add	r2, pc, #4	; (adr r2, 800213c <ctlsocket+0x30>)
 8002136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213a:	bf00      	nop
 800213c:	0800215d 	.word	0x0800215d
 8002140:	080021b1 	.word	0x080021b1
 8002144:	080021cb 	.word	0x080021cb
 8002148:	080021eb 	.word	0x080021eb
 800214c:	0800220b 	.word	0x0800220b
 8002150:	0800223b 	.word	0x0800223b
 8002154:	0800225b 	.word	0x0800225b
 8002158:	0800228b 	.word	0x0800228b
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10d      	bne.n	8002184 <ctlsocket+0x78>
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2201      	movs	r2, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	b21a      	sxth	r2, r3
 8002172:	4b52      	ldr	r3, [pc, #328]	; (80022bc <ctlsocket+0x1b0>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b21b      	sxth	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b21b      	sxth	r3, r3
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b4f      	ldr	r3, [pc, #316]	; (80022bc <ctlsocket+0x1b0>)
 8002180:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8002182:	e095      	b.n	80022b0 <ctlsocket+0x1a4>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <ctlsocket+0x9e>
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	2201      	movs	r2, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	b21b      	sxth	r3, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	b21a      	sxth	r2, r3
 8002198:	4b48      	ldr	r3, [pc, #288]	; (80022bc <ctlsocket+0x1b0>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4013      	ands	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b45      	ldr	r3, [pc, #276]	; (80022bc <ctlsocket+0x1b0>)
 80021a6:	801a      	strh	r2, [r3, #0]
         break;
 80021a8:	e082      	b.n	80022b0 <ctlsocket+0x1a4>
         else return SOCKERR_ARG;
 80021aa:	f06f 0309 	mvn.w	r3, #9
 80021ae:	e080      	b.n	80022b2 <ctlsocket+0x1a6>
      case CS_GET_IOMODE:   
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 80021b0:	4b42      	ldr	r3, [pc, #264]	; (80022bc <ctlsocket+0x1b0>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	fa42 f303 	asr.w	r3, r2, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	701a      	strb	r2, [r3, #0]
         //
         break;
 80021c8:	e072      	b.n	80022b0 <ctlsocket+0x1a4>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	3301      	adds	r3, #1
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f8ee 	bl	80013b8 <WIZCHIP_READ>
 80021dc:	4603      	mov	r3, r0
 80021de:	b29b      	uxth	r3, r3
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	801a      	strh	r2, [r3, #0]
         break;
 80021e8:	e062      	b.n	80022b0 <ctlsocket+0x1a4>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	3301      	adds	r3, #1
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f8de 	bl	80013b8 <WIZCHIP_READ>
 80021fc:	4603      	mov	r3, r0
 80021fe:	b29b      	uxth	r3, r3
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	b29a      	uxth	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	801a      	strh	r2, [r3, #0]
         break;
 8002208:	e052      	b.n	80022b0 <ctlsocket+0x1a4>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b1f      	cmp	r3, #31
 8002210:	d902      	bls.n	8002218 <ctlsocket+0x10c>
 8002212:	f06f 0309 	mvn.w	r3, #9
 8002216:	e04c      	b.n	80022b2 <ctlsocket+0x1a6>
         setSn_IR(sn,*(uint8_t*)arg);
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	3301      	adds	r3, #1
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002224:	461a      	mov	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7ff f90c 	bl	8001450 <WIZCHIP_WRITE>
         break;
 8002238:	e03a      	b.n	80022b0 <ctlsocket+0x1a4>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	3301      	adds	r3, #1
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f8b6 	bl	80013b8 <WIZCHIP_READ>
 800224c:	4603      	mov	r3, r0
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	b2da      	uxtb	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	701a      	strb	r2, [r3, #0]
         break;
 8002258:	e02a      	b.n	80022b0 <ctlsocket+0x1a4>
   #if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b1f      	cmp	r3, #31
 8002260:	d902      	bls.n	8002268 <ctlsocket+0x15c>
 8002262:	f06f 0309 	mvn.w	r3, #9
 8002266:	e024      	b.n	80022b2 <ctlsocket+0x1a6>
         setSn_IMR(sn,*(uint8_t*)arg);
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	3301      	adds	r3, #1
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002274:	461a      	mov	r2, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	b2db      	uxtb	r3, r3
 8002280:	4619      	mov	r1, r3
 8002282:	4610      	mov	r0, r2
 8002284:	f7ff f8e4 	bl	8001450 <WIZCHIP_WRITE>
         break;
 8002288:	e012      	b.n	80022b0 <ctlsocket+0x1a4>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	3301      	adds	r3, #1
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f88e 	bl	80013b8 <WIZCHIP_READ>
 800229c:	4603      	mov	r3, r0
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
         break;
 80022a8:	e002      	b.n	80022b0 <ctlsocket+0x1a4>
   #endif
      default:
         return SOCKERR_ARG;
 80022aa:	f06f 0309 	mvn.w	r3, #9
 80022ae:	e000      	b.n	80022b2 <ctlsocket+0x1a6>
   }
   return SOCK_OK;
 80022b0:	2301      	movs	r3, #1
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000330 	.word	0x20000330

080022c0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
 8002334:	2300      	movs	r3, #0
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <reg_wizchip_cs_cbfunc+0x16>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <reg_wizchip_cs_cbfunc+0x40>)
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <reg_wizchip_cs_cbfunc+0x44>)
 8002372:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <reg_wizchip_cs_cbfunc+0x40>)
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <reg_wizchip_cs_cbfunc+0x48>)
 8002378:	619a      	str	r2, [r3, #24]
 800237a:	e006      	b.n	800238a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <reg_wizchip_cs_cbfunc+0x40>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <reg_wizchip_cs_cbfunc+0x40>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6193      	str	r3, [r2, #24]
   }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	200000a0 	.word	0x200000a0
 800239c:	080022dd 	.word	0x080022dd
 80023a0:	080022eb 	.word	0x080022eb

080023a4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80023ae:	bf00      	nop
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f9      	beq.n	80023b0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <reg_wizchip_spi_cbfunc+0x24>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d106      	bne.n	80023d6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <reg_wizchip_spi_cbfunc+0x50>)
 80023cc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <reg_wizchip_spi_cbfunc+0x54>)
 80023d2:	621a      	str	r2, [r3, #32]
 80023d4:	e006      	b.n	80023e4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80023d6:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6213      	str	r3, [r2, #32]
   }
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	200000a0 	.word	0x200000a0
 80023f4:	08002331 	.word	0x08002331
 80023f8:	08002341 	.word	0x08002341

080023fc <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	f200 80c7 	bhi.w	80025aa <ctlwizchip+0x1ae>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <ctlwizchip+0x28>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002465 	.word	0x08002465
 8002428:	0800246b 	.word	0x0800246b
 800242c:	08002497 	.word	0x08002497
 8002430:	0800248b 	.word	0x0800248b
 8002434:	080024a5 	.word	0x080024a5
 8002438:	080024b1 	.word	0x080024b1
 800243c:	080024bf 	.word	0x080024bf
 8002440:	080024e5 	.word	0x080024e5
 8002444:	0800250b 	.word	0x0800250b
 8002448:	0800254f 	.word	0x0800254f
 800244c:	08002555 	.word	0x08002555
 8002450:	0800255d 	.word	0x0800255d
 8002454:	080025b1 	.word	0x080025b1
 8002458:	08002565 	.word	0x08002565
 800245c:	08002573 	.word	0x08002573
 8002460:	0800258f 	.word	0x0800258f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002464:	f000 f8ea 	bl	800263c <wizchip_sw_reset>
         break;
 8002468:	e0a3      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3308      	adds	r3, #8
 8002478:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f927 	bl	80026d4 <wizchip_init>
 8002486:	4603      	mov	r3, r0
 8002488:	e094      	b.n	80025b4 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f9ac 	bl	80027ec <wizchip_clrinterrupt>
         break;
 8002494:	e08d      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002496:	f000 f9dd 	bl	8002854 <wizchip_getinterrupt>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	801a      	strh	r2, [r3, #0]
         break;
 80024a2:	e086      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f9f8 	bl	800289e <wizchip_setinterruptmask>
         break;         
 80024ae:	e080      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80024b0:	f000 fa10 	bl	80028d4 <wizchip_getinterruptmask>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	801a      	strh	r2, [r3, #0]
         break;
 80024bc:	e079      	b.n	80025b2 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80024ce:	f7fe ffbf 	bl	8001450 <WIZCHIP_WRITE>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80024de:	f7fe ffb7 	bl	8001450 <WIZCHIP_WRITE>
         break;
 80024e2:	e066      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80024e4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80024e8:	f7fe ff66 	bl	80013b8 <WIZCHIP_READ>
 80024ec:	4603      	mov	r3, r0
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	b29c      	uxth	r4, r3
 80024f4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80024f8:	f7fe ff5e 	bl	80013b8 <WIZCHIP_READ>
 80024fc:	4603      	mov	r3, r0
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4423      	add	r3, r4
 8002502:	b29a      	uxth	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	801a      	strh	r2, [r3, #0]
         break;
 8002508:	e053      	b.n	80025b2 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <ctlwizchip+0x1c0>)
 800250c:	789a      	ldrb	r2, [r3, #2]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a29      	ldr	r2, [pc, #164]	; (80025bc <ctlwizchip+0x1c0>)
 8002518:	78d2      	ldrb	r2, [r2, #3]
 800251a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	3302      	adds	r3, #2
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <ctlwizchip+0x1c0>)
 8002522:	7912      	ldrb	r2, [r2, #4]
 8002524:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3303      	adds	r3, #3
 800252a:	4a24      	ldr	r2, [pc, #144]	; (80025bc <ctlwizchip+0x1c0>)
 800252c:	7952      	ldrb	r2, [r2, #5]
 800252e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	3304      	adds	r3, #4
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <ctlwizchip+0x1c0>)
 8002536:	7992      	ldrb	r2, [r2, #6]
 8002538:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3305      	adds	r3, #5
 800253e:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <ctlwizchip+0x1c0>)
 8002540:	79d2      	ldrb	r2, [r2, #7]
 8002542:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	3306      	adds	r3, #6
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
         break;
 800254c:	e031      	b.n	80025b2 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800254e:	f000 fa13 	bl	8002978 <wizphy_reset>
         break;
 8002552:	e02e      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002554:	6838      	ldr	r0, [r7, #0]
 8002556:	f000 fa36 	bl	80029c6 <wizphy_setphyconf>
         break;
 800255a:	e02a      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800255c:	6838      	ldr	r0, [r7, #0]
 800255e:	f000 fa75 	bl	8002a4c <wizphy_getphyconf>
         break;
 8002562:	e026      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fad9 	bl	8002b20 <wizphy_setphypmode>
 800256e:	4603      	mov	r3, r0
 8002570:	e020      	b.n	80025b4 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002572:	f000 f9e8 	bl	8002946 <wizphy_getphypmode>
 8002576:	4603      	mov	r3, r0
 8002578:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800257a:	7dfb      	ldrb	r3, [r7, #23]
 800257c:	2bff      	cmp	r3, #255	; 0xff
 800257e:	d102      	bne.n	8002586 <ctlwizchip+0x18a>
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	e016      	b.n	80025b4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7dfa      	ldrb	r2, [r7, #23]
 800258a:	701a      	strb	r2, [r3, #0]
         break;
 800258c:	e011      	b.n	80025b2 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800258e:	f000 f9c4 	bl	800291a <wizphy_getphylink>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	2bff      	cmp	r3, #255	; 0xff
 800259a:	d102      	bne.n	80025a2 <ctlwizchip+0x1a6>
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	e008      	b.n	80025b4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7dfa      	ldrb	r2, [r7, #23]
 80025a6:	701a      	strb	r2, [r3, #0]
         break;
 80025a8:	e003      	b.n	80025b2 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	e001      	b.n	80025b4 <ctlwizchip+0x1b8>
         break;
 80025b0:	bf00      	nop
   }
   return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd90      	pop	{r4, r7, pc}
 80025bc:	200000a0 	.word	0x200000a0

080025c0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d82c      	bhi.n	800262c <ctlnetwork+0x6c>
 80025d2:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <ctlnetwork+0x18>)
 80025d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d8:	080025f1 	.word	0x080025f1
 80025dc:	080025f9 	.word	0x080025f9
 80025e0:	08002601 	.word	0x08002601
 80025e4:	0800260f 	.word	0x0800260f
 80025e8:	0800261d 	.word	0x0800261d
 80025ec:	08002625 	.word	0x08002625
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f000 fadf 	bl	8002bb4 <wizchip_setnetinfo>
         break;
 80025f6:	e01c      	b.n	8002632 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80025f8:	6838      	ldr	r0, [r7, #0]
 80025fa:	f000 fb1b 	bl	8002c34 <wizchip_getnetinfo>
         break;
 80025fe:	e018      	b.n	8002632 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fb55 	bl	8002cb4 <wizchip_setnetmode>
 800260a:	4603      	mov	r3, r0
 800260c:	e012      	b.n	8002634 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800260e:	f000 fb73 	bl	8002cf8 <wizchip_getnetmode>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	701a      	strb	r2, [r3, #0]
         break;
 800261a:	e00a      	b.n	8002632 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800261c:	6838      	ldr	r0, [r7, #0]
 800261e:	f000 fb73 	bl	8002d08 <wizchip_settimeout>
         break;
 8002622:	e006      	b.n	8002632 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	f000 fb90 	bl	8002d4a <wizchip_gettimeout>
         break;
 800262a:	e002      	b.n	8002632 <ctlnetwork+0x72>
      default:
         return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	e000      	b.n	8002634 <ctlnetwork+0x74>
   }
   return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2206      	movs	r2, #6
 8002646:	4619      	mov	r1, r3
 8002648:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800264c:	f7fe ff4e 	bl	80014ec <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2204      	movs	r2, #4
 8002656:	4619      	mov	r1, r3
 8002658:	f44f 7080 	mov.w	r0, #256	; 0x100
 800265c:	f7fe ff46 	bl	80014ec <WIZCHIP_READ_BUF>
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	2204      	movs	r2, #4
 8002666:	4619      	mov	r1, r3
 8002668:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800266c:	f7fe ff3e 	bl	80014ec <WIZCHIP_READ_BUF>
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	2204      	movs	r2, #4
 8002676:	4619      	mov	r1, r3
 8002678:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800267c:	f7fe ff36 	bl	80014ec <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe fee4 	bl	8001450 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe fe95 	bl	80013b8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2206      	movs	r2, #6
 8002692:	4619      	mov	r1, r3
 8002694:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002698:	f7fe ff88 	bl	80015ac <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2204      	movs	r2, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026a8:	f7fe ff80 	bl	80015ac <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	2204      	movs	r2, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80026b8:	f7fe ff78 	bl	80015ac <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	2204      	movs	r2, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80026c8:	f7fe ff70 	bl	80015ac <WIZCHIP_WRITE_BUF>
}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80026e2:	f7ff ffab 	bl	800263c <wizchip_sw_reset>
   if(txsize)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03b      	beq.n	8002764 <wizchip_init+0x90>
   {
      tmp = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e015      	b.n	8002722 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	7bbb      	ldrb	r3, [r7, #14]
 8002702:	4413      	add	r3, r2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800270c:	2b10      	cmp	r3, #16
 800270e:	dd02      	ble.n	8002716 <wizchip_init+0x42>
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	e066      	b.n	80027e4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	2b07      	cmp	r3, #7
 8002728:	dde5      	ble.n	80026f6 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	e015      	b.n	800275c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	3301      	adds	r3, #1
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800273e:	4618      	mov	r0, r3
 8002740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	f7fe fe80 	bl	8001450 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	3301      	adds	r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002760:	2b07      	cmp	r3, #7
 8002762:	dde5      	ble.n	8002730 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d03b      	beq.n	80027e2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	e015      	b.n	80027a0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4413      	add	r3, r2
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	7bbb      	ldrb	r3, [r7, #14]
 8002780:	4413      	add	r3, r2
 8002782:	b2db      	uxtb	r3, r3
 8002784:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800278a:	2b10      	cmp	r3, #16
 800278c:	dd02      	ble.n	8002794 <wizchip_init+0xc0>
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	e027      	b.n	80027e4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	3301      	adds	r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a4:	2b07      	cmp	r3, #7
 80027a6:	dde5      	ble.n	8002774 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e015      	b.n	80027da <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	3301      	adds	r3, #1
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80027bc:	4618      	mov	r0, r3
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7fe fe41 	bl	8001450 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	2b07      	cmp	r3, #7
 80027e0:	dde5      	ble.n	80027ae <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	b29b      	uxth	r3, r3
 8002800:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	f023 030f 	bic.w	r3, r3, #15
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002810:	f7fe fe1e 	bl	8001450 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	e014      	b.n	8002844 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800281a:	7bba      	ldrb	r2, [r7, #14]
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	fa42 f303 	asr.w	r3, r2, r3
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <wizchip_clrinterrupt+0x52>
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	3301      	adds	r3, #1
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002836:	211f      	movs	r1, #31
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fe09 	bl	8001450 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	3301      	adds	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b07      	cmp	r3, #7
 8002848:	d9e7      	bls.n	800281a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002866:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800286a:	f7fe fda5 	bl	80013b8 <WIZCHIP_READ>
 800286e:	4603      	mov	r3, r0
 8002870:	f023 030f 	bic.w	r3, r3, #15
 8002874:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002876:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800287a:	f7fe fd9d 	bl	80013b8 <WIZCHIP_READ>
 800287e:	4603      	mov	r3, r0
 8002880:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002882:	79bb      	ldrb	r3, [r7, #6]
 8002884:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	b29a      	uxth	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	b29b      	uxth	r3, r3
 8002890:	4413      	add	r3, r2
 8002892:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002894:	88bb      	ldrh	r3, [r7, #4]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	4619      	mov	r1, r3
 80028b8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80028bc:	f7fe fdc8 	bl	8001450 <WIZCHIP_WRITE>
   setSIMR(simr);
 80028c0:	7bbb      	ldrb	r3, [r7, #14]
 80028c2:	4619      	mov	r1, r3
 80028c4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80028c8:	f7fe fdc2 	bl	8001450 <WIZCHIP_WRITE>
#endif   
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80028e6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80028ea:	f7fe fd65 	bl	80013b8 <WIZCHIP_READ>
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80028f2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80028f6:	f7fe fd5f 	bl	80013b8 <WIZCHIP_READ>
 80028fa:	4603      	mov	r3, r0
 80028fc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80028fe:	79bb      	ldrb	r3, [r7, #6]
 8002900:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002902:	88bb      	ldrh	r3, [r7, #4]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	b29a      	uxth	r2, r3
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	b29b      	uxth	r3, r3
 800290c:	4413      	add	r3, r2
 800290e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002910:	88bb      	ldrh	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002920:	2300      	movs	r3, #0
 8002922:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002924:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002928:	f7fe fd46 	bl	80013b8 <WIZCHIP_READ>
 800292c:	4603      	mov	r3, r0
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8002936:	2301      	movs	r3, #1
 8002938:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002950:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002954:	f7fe fd30 	bl	80013b8 <WIZCHIP_READ>
 8002958:	4603      	mov	r3, r0
 800295a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800295e:	2b30      	cmp	r3, #48	; 0x30
 8002960:	d102      	bne.n	8002968 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002962:	2301      	movs	r3, #1
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	e001      	b.n	800296c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002968:	2300      	movs	r3, #0
 800296a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800297e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002982:	f7fe fd19 	bl	80013b8 <WIZCHIP_READ>
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002990:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	4619      	mov	r1, r3
 8002996:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800299a:	f7fe fd59 	bl	8001450 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800299e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80029a2:	f7fe fd09 	bl	80013b8 <WIZCHIP_READ>
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029b0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80029ba:	f7fe fd49 	bl	8001450 <WIZCHIP_WRITE>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d104      	bne.n	80029e4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	e003      	b.n	80029ec <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ea:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	785b      	ldrb	r3, [r3, #1]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d104      	bne.n	80029fe <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e019      	b.n	8002a32 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	78db      	ldrb	r3, [r3, #3]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d10d      	bne.n	8002a22 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	789b      	ldrb	r3, [r3, #2]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d104      	bne.n	8002a18 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	f043 0318 	orr.w	r3, r3, #24
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e00c      	b.n	8002a32 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e007      	b.n	8002a32 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	789b      	ldrb	r3, [r3, #2]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d103      	bne.n	8002a32 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	f043 0310 	orr.w	r3, r3, #16
 8002a30:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002a3a:	f7fe fd09 	bl	8001450 <WIZCHIP_WRITE>
   wizphy_reset();
 8002a3e:	f7ff ff9b 	bl	8002978 <wizphy_reset>
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002a58:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002a5c:	f7fe fcac 	bl	80013b8 <WIZCHIP_READ>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	119b      	asrs	r3, r3, #6
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d001      	beq.n	8002a82 <wizphy_getphyconf+0x36>
 8002a7e:	2b38      	cmp	r3, #56	; 0x38
 8002a80:	d103      	bne.n	8002a8a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	705a      	strb	r2, [r3, #1]
         break;
 8002a88:	e003      	b.n	8002a92 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	705a      	strb	r2, [r3, #1]
         break;
 8002a90:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a98:	3b10      	subs	r3, #16
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	bf8c      	ite	hi
 8002a9e:	2201      	movhi	r2, #1
 8002aa0:	2200      	movls	r2, #0
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	2a00      	cmp	r2, #0
 8002aa6:	d10f      	bne.n	8002ac8 <wizphy_getphyconf+0x7c>
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <wizphy_getphyconf+0xcc>)
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf14      	ite	ne
 8002ab6:	2301      	movne	r3, #1
 8002ab8:	2300      	moveq	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	709a      	strb	r2, [r3, #2]
         break;
 8002ac6:	e003      	b.n	8002ad0 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	709a      	strb	r2, [r3, #2]
         break;
 8002ace:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ad6:	3b08      	subs	r3, #8
 8002ad8:	2b18      	cmp	r3, #24
 8002ada:	bf8c      	ite	hi
 8002adc:	2201      	movhi	r2, #1
 8002ade:	2200      	movls	r2, #0
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	2a00      	cmp	r2, #0
 8002ae4:	d10f      	bne.n	8002b06 <wizphy_getphyconf+0xba>
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <wizphy_getphyconf+0xd0>)
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	70da      	strb	r2, [r3, #3]
         break;
 8002b04:	e003      	b.n	8002b0e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	70da      	strb	r2, [r3, #3]
         break;
 8002b0c:	bf00      	nop
   }
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	00010101 	.word	0x00010101
 8002b1c:	01010001 	.word	0x01010001

08002b20 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002b2e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b32:	f7fe fc41 	bl	80013b8 <WIZCHIP_READ>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <wizphy_setphypmode+0x2a>
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295
 8002b48:	e030      	b.n	8002bac <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002b50:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d104      	bne.n	8002b62 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002b5e:	73fb      	strb	r3, [r7, #15]
 8002b60:	e003      	b.n	8002b6a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002b68:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b72:	f7fe fc6d 	bl	8001450 <WIZCHIP_WRITE>
   wizphy_reset();
 8002b76:	f7ff feff 	bl	8002978 <wizphy_reset>
   tmp = getPHYCFGR();
 8002b7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b7e:	f7fe fc1b 	bl	80013b8 <WIZCHIP_READ>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <wizphy_setphypmode+0x88>
 8002b96:	2300      	movs	r3, #0
 8002b98:	e008      	b.n	8002bac <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <wizphy_setphypmode+0x88>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e001      	b.n	8002bac <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2206      	movs	r2, #6
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002bc6:	f7fe fcf1 	bl	80015ac <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	330e      	adds	r3, #14
 8002bce:	2204      	movs	r2, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002bd6:	f7fe fce9 	bl	80015ac <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	330a      	adds	r3, #10
 8002bde:	2204      	movs	r2, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002be6:	f7fe fce1 	bl	80015ac <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3306      	adds	r3, #6
 8002bee:	2204      	movs	r2, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002bf6:	f7fe fcd9 	bl	80015ac <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7c9a      	ldrb	r2, [r3, #18]
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <wizchip_setnetinfo+0x78>)
 8002c00:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7cda      	ldrb	r2, [r3, #19]
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <wizchip_setnetinfo+0x78>)
 8002c08:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7d1a      	ldrb	r2, [r3, #20]
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <wizchip_setnetinfo+0x78>)
 8002c10:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7d5a      	ldrb	r2, [r3, #21]
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <wizchip_setnetinfo+0x78>)
 8002c18:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7d9a      	ldrb	r2, [r3, #22]
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <wizchip_setnetinfo+0x7c>)
 8002c20:	701a      	strb	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000034c 	.word	0x2000034c
 8002c30:	20000350 	.word	0x20000350

08002c34 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2206      	movs	r2, #6
 8002c40:	4619      	mov	r1, r3
 8002c42:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002c46:	f7fe fc51 	bl	80014ec <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	330e      	adds	r3, #14
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c56:	f7fe fc49 	bl	80014ec <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	330a      	adds	r3, #10
 8002c5e:	2204      	movs	r2, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002c66:	f7fe fc41 	bl	80014ec <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3306      	adds	r3, #6
 8002c6e:	2204      	movs	r2, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002c76:	f7fe fc39 	bl	80014ec <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <wizchip_getnetinfo+0x78>)
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <wizchip_getnetinfo+0x78>)
 8002c84:	785a      	ldrb	r2, [r3, #1]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <wizchip_getnetinfo+0x78>)
 8002c8c:	789a      	ldrb	r2, [r3, #2]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <wizchip_getnetinfo+0x78>)
 8002c94:	78da      	ldrb	r2, [r3, #3]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <wizchip_getnetinfo+0x7c>)
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	759a      	strb	r2, [r3, #22]
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000034c 	.word	0x2000034c
 8002cb0:	20000350 	.word	0x20000350

08002cb4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <wizchip_setnetmode+0x1e>
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	e00e      	b.n	8002cf0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fe fb70 	bl	80013b8 <WIZCHIP_READ>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fe fbb1 	bl	8001450 <WIZCHIP_WRITE>
   return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fe fb5b 	bl	80013b8 <WIZCHIP_READ>
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002d1a:	f7fe fb99 	bl	8001450 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	885b      	ldrh	r3, [r3, #2]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002d2e:	f7fe fb8f 	bl	8001450 <WIZCHIP_WRITE>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	885b      	ldrh	r3, [r3, #2]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002d3e:	f7fe fb87 	bl	8001450 <WIZCHIP_WRITE>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002d4a:	b590      	push	{r4, r7, lr}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002d52:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002d56:	f7fe fb2f 	bl	80013b8 <WIZCHIP_READ>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8002d62:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002d66:	f7fe fb27 	bl	80013b8 <WIZCHIP_READ>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	b29c      	uxth	r4, r3
 8002d72:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002d76:	f7fe fb1f 	bl	80013b8 <WIZCHIP_READ>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4423      	add	r3, r4
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	805a      	strh	r2, [r3, #2]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd90      	pop	{r4, r7, pc}
	...

08002d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d94:	f7fe fafe 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d98:	480c      	ldr	r0, [pc, #48]	; (8002dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d9a:	490d      	ldr	r1, [pc, #52]	; (8002dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002db0:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002dbe:	f003 f8d7 	bl	8005f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc2:	f7fd fc0b 	bl	80005dc <main>
  bx  lr    
 8002dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002dd4:	080071c0 	.word	0x080071c0
  ldr r2, =_sbss
 8002dd8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002ddc:	200004a4 	.word	0x200004a4

08002de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de0:	e7fe      	b.n	8002de0 <ADC_IRQHandler>
	...

08002de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_Init+0x40>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <HAL_Init+0x40>)
 8002dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_Init+0x40>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <HAL_Init+0x40>)
 8002dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_Init+0x40>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <HAL_Init+0x40>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e0c:	2003      	movs	r0, #3
 8002e0e:	f000 f94f 	bl	80030b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f000 f808 	bl	8002e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e18:	f7fe f8de 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00

08002e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_InitTick+0x54>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x58>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f967 	bl	800311a <HAL_SYSTICK_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00e      	b.n	8002e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b0f      	cmp	r3, #15
 8002e5a:	d80a      	bhi.n	8002e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f000 f92f 	bl	80030c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <HAL_InitTick+0x5c>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000098 	.word	0x20000098
 8002e80:	200000d0 	.word	0x200000d0
 8002e84:	200000cc 	.word	0x200000cc

08002e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_IncTick+0x20>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x24>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_IncTick+0x24>)
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200000d0 	.word	0x200000d0
 8002eac:	20000354 	.word	0x20000354

08002eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_GetTick+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000354 	.word	0x20000354

08002ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff ffee 	bl	8002eb0 <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d005      	beq.n	8002eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_Delay+0x44>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eee:	bf00      	nop
 8002ef0:	f7ff ffde 	bl	8002eb0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d8f7      	bhi.n	8002ef0 <HAL_Delay+0x28>
  {
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200000d0 	.word	0x200000d0

08002f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f42:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	60d3      	str	r3, [r2, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <__NVIC_GetPriorityGrouping+0x18>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 0307 	and.w	r3, r3, #7
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db0b      	blt.n	8002f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4907      	ldr	r1, [pc, #28]	; (8002fac <__NVIC_EnableIRQ+0x38>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2001      	movs	r0, #1
 8002f96:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	; (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800307c:	d301      	bcc.n	8003082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307e:	2301      	movs	r3, #1
 8003080:	e00f      	b.n	80030a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <SysTick_Config+0x40>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308a:	210f      	movs	r1, #15
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	f7ff ff8e 	bl	8002fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <SysTick_Config+0x40>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <SysTick_Config+0x40>)
 800309c:	2207      	movs	r2, #7
 800309e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	e000e010 	.word	0xe000e010

080030b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff29 	bl	8002f10 <__NVIC_SetPriorityGrouping>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030d8:	f7ff ff3e 	bl	8002f58 <__NVIC_GetPriorityGrouping>
 80030dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	6978      	ldr	r0, [r7, #20]
 80030e4:	f7ff ff8e 	bl	8003004 <NVIC_EncodePriority>
 80030e8:	4602      	mov	r2, r0
 80030ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff5d 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030f6:	bf00      	nop
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff31 	bl	8002f74 <__NVIC_EnableIRQ>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ffa2 	bl	800306c <SysTick_Config>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff feb6 	bl	8002eb0 <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d008      	beq.n	8003164 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e052      	b.n	800320a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0216 	bic.w	r2, r2, #22
 8003172:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003182:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d103      	bne.n	8003194 <HAL_DMA_Abort+0x62>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0208 	bic.w	r2, r2, #8
 80031a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b4:	e013      	b.n	80031de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031b6:	f7ff fe7b 	bl	8002eb0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d90c      	bls.n	80031de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2203      	movs	r2, #3
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e015      	b.n	800320a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e4      	bne.n	80031b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	223f      	movs	r2, #63	; 0x3f
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d004      	beq.n	8003230 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2280      	movs	r2, #128	; 0x80
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e00c      	b.n	800324a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2205      	movs	r2, #5
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e165      	b.n	8003540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003274:	2201      	movs	r2, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	429a      	cmp	r2, r3
 800328e:	f040 8154 	bne.w	800353a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d005      	beq.n	80032aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d130      	bne.n	800330c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	2203      	movs	r2, #3
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 0201 	and.w	r2, r3, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b03      	cmp	r3, #3
 8003316:	d017      	beq.n	8003348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d123      	bne.n	800339c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	08da      	lsrs	r2, r3, #3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3208      	adds	r2, #8
 800335c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	220f      	movs	r2, #15
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	08da      	lsrs	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3208      	adds	r2, #8
 8003396:	69b9      	ldr	r1, [r7, #24]
 8003398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0203 	and.w	r2, r3, #3
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80ae 	beq.w	800353a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b5d      	ldr	r3, [pc, #372]	; (8003558 <HAL_GPIO_Init+0x300>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	4a5c      	ldr	r2, [pc, #368]	; (8003558 <HAL_GPIO_Init+0x300>)
 80033e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ec:	6453      	str	r3, [r2, #68]	; 0x44
 80033ee:	4b5a      	ldr	r3, [pc, #360]	; (8003558 <HAL_GPIO_Init+0x300>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fa:	4a58      	ldr	r2, [pc, #352]	; (800355c <HAL_GPIO_Init+0x304>)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	3302      	adds	r3, #2
 8003402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	220f      	movs	r2, #15
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a4f      	ldr	r2, [pc, #316]	; (8003560 <HAL_GPIO_Init+0x308>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d025      	beq.n	8003472 <HAL_GPIO_Init+0x21a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4e      	ldr	r2, [pc, #312]	; (8003564 <HAL_GPIO_Init+0x30c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01f      	beq.n	800346e <HAL_GPIO_Init+0x216>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4d      	ldr	r2, [pc, #308]	; (8003568 <HAL_GPIO_Init+0x310>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d019      	beq.n	800346a <HAL_GPIO_Init+0x212>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4c      	ldr	r2, [pc, #304]	; (800356c <HAL_GPIO_Init+0x314>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_GPIO_Init+0x20e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4b      	ldr	r2, [pc, #300]	; (8003570 <HAL_GPIO_Init+0x318>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00d      	beq.n	8003462 <HAL_GPIO_Init+0x20a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4a      	ldr	r2, [pc, #296]	; (8003574 <HAL_GPIO_Init+0x31c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <HAL_GPIO_Init+0x206>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a49      	ldr	r2, [pc, #292]	; (8003578 <HAL_GPIO_Init+0x320>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_GPIO_Init+0x202>
 8003456:	2306      	movs	r3, #6
 8003458:	e00c      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 800345a:	2307      	movs	r3, #7
 800345c:	e00a      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 800345e:	2305      	movs	r3, #5
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 8003462:	2304      	movs	r3, #4
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 8003472:	2300      	movs	r3, #0
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003484:	4935      	ldr	r1, [pc, #212]	; (800355c <HAL_GPIO_Init+0x304>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b3a      	ldr	r3, [pc, #232]	; (800357c <HAL_GPIO_Init+0x324>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_GPIO_Init+0x324>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b2f      	ldr	r3, [pc, #188]	; (800357c <HAL_GPIO_Init+0x324>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a26      	ldr	r2, [pc, #152]	; (800357c <HAL_GPIO_Init+0x324>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <HAL_GPIO_Init+0x324>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350a:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_GPIO_Init+0x324>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_GPIO_Init+0x324>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003534:	4a11      	ldr	r2, [pc, #68]	; (800357c <HAL_GPIO_Init+0x324>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	f67f ae96 	bls.w	8003274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021000 	.word	0x40021000
 8003574:	40021400 	.word	0x40021400
 8003578:	40021800 	.word	0x40021800
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
 800358c:	4613      	mov	r3, r2
 800358e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003590:	787b      	ldrb	r3, [r7, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800359c:	e003      	b.n	80035a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_PWREx_EnableOverDrive+0x90>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <HAL_PWREx_EnableOverDrive+0x90>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_PWREx_EnableOverDrive+0x90>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_PWREx_EnableOverDrive+0x94>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e0:	f7ff fc66 	bl	8002eb0 <HAL_GetTick>
 80035e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035e6:	e009      	b.n	80035fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035e8:	f7ff fc62 	bl	8002eb0 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035f6:	d901      	bls.n	80035fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e01f      	b.n	800363c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_PWREx_EnableOverDrive+0x98>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d1ee      	bne.n	80035e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003610:	f7ff fc4e 	bl	8002eb0 <HAL_GetTick>
 8003614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003616:	e009      	b.n	800362c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003618:	f7ff fc4a 	bl	8002eb0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003626:	d901      	bls.n	800362c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e007      	b.n	800363c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_PWREx_EnableOverDrive+0x98>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003638:	d1ee      	bne.n	8003618 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	420e0040 	.word	0x420e0040
 800364c:	40007000 	.word	0x40007000
 8003650:	420e0044 	.word	0x420e0044

08003654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0cc      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003668:	4b68      	ldr	r3, [pc, #416]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d90c      	bls.n	8003690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b65      	ldr	r3, [pc, #404]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b63      	ldr	r3, [pc, #396]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0b8      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a8:	4b59      	ldr	r3, [pc, #356]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a58      	ldr	r2, [pc, #352]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c0:	4b53      	ldr	r3, [pc, #332]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a52      	ldr	r2, [pc, #328]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	494d      	ldr	r1, [pc, #308]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d044      	beq.n	8003774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d119      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e07f      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d003      	beq.n	8003712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370e:	2b03      	cmp	r3, #3
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003712:	4b3f      	ldr	r3, [pc, #252]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e06f      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e067      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4934      	ldr	r1, [pc, #208]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	4313      	orrs	r3, r2
 8003742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003744:	f7ff fbb4 	bl	8002eb0 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374a:	e00a      	b.n	8003762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374c:	f7ff fbb0 	bl	8002eb0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e04f      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 020c 	and.w	r2, r3, #12
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	429a      	cmp	r2, r3
 8003772:	d1eb      	bne.n	800374c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003774:	4b25      	ldr	r3, [pc, #148]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d20c      	bcs.n	800379c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b22      	ldr	r3, [pc, #136]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e032      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4916      	ldr	r1, [pc, #88]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	490e      	ldr	r1, [pc, #56]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037da:	f000 f855 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 80037de:	4602      	mov	r2, r0
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	490a      	ldr	r1, [pc, #40]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 80037ec:	5ccb      	ldrb	r3, [r1, r3]
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	4a09      	ldr	r2, [pc, #36]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fb14 	bl	8002e28 <HAL_InitTick>

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023c00 	.word	0x40023c00
 8003810:	40023800 	.word	0x40023800
 8003814:	08007164 	.word	0x08007164
 8003818:	20000098 	.word	0x20000098
 800381c:	200000cc 	.word	0x200000cc

08003820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCC_GetHCLKFreq+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000098 	.word	0x20000098

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800383c:	f7ff fff0 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	0a9b      	lsrs	r3, r3, #10
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4903      	ldr	r1, [pc, #12]	; (800385c <HAL_RCC_GetPCLK1Freq+0x24>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	08007174 	.word	0x08007174

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003864:	f7ff ffdc 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0b5b      	lsrs	r3, r3, #13
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4903      	ldr	r1, [pc, #12]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40023800 	.word	0x40023800
 8003884:	08007174 	.word	0x08007174

08003888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b0ae      	sub	sp, #184	; 0xb8
 800388e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ae:	4bcb      	ldr	r3, [pc, #812]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	f200 8206 	bhi.w	8003cc8 <HAL_RCC_GetSysClockFreq+0x440>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003cc9 	.word	0x08003cc9
 80038cc:	08003cc9 	.word	0x08003cc9
 80038d0:	08003cc9 	.word	0x08003cc9
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003cc9 	.word	0x08003cc9
 80038dc:	08003cc9 	.word	0x08003cc9
 80038e0:	08003cc9 	.word	0x08003cc9
 80038e4:	08003909 	.word	0x08003909
 80038e8:	08003cc9 	.word	0x08003cc9
 80038ec:	08003cc9 	.word	0x08003cc9
 80038f0:	08003cc9 	.word	0x08003cc9
 80038f4:	08003af9 	.word	0x08003af9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4bb9      	ldr	r3, [pc, #740]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x358>)
 80038fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80038fe:	e1e7      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003900:	4bb8      	ldr	r3, [pc, #736]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003906:	e1e3      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003908:	4bb4      	ldr	r3, [pc, #720]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003914:	4bb1      	ldr	r3, [pc, #708]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d071      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003920:	4bae      	ldr	r3, [pc, #696]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	2200      	movs	r2, #0
 8003928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800392c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003946:	4622      	mov	r2, r4
 8003948:	462b      	mov	r3, r5
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	0159      	lsls	r1, r3, #5
 8003954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003958:	0150      	lsls	r0, r2, #5
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4621      	mov	r1, r4
 8003960:	1a51      	subs	r1, r2, r1
 8003962:	6439      	str	r1, [r7, #64]	; 0x40
 8003964:	4629      	mov	r1, r5
 8003966:	eb63 0301 	sbc.w	r3, r3, r1
 800396a:	647b      	str	r3, [r7, #68]	; 0x44
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003978:	4649      	mov	r1, r9
 800397a:	018b      	lsls	r3, r1, #6
 800397c:	4641      	mov	r1, r8
 800397e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003982:	4641      	mov	r1, r8
 8003984:	018a      	lsls	r2, r1, #6
 8003986:	4641      	mov	r1, r8
 8003988:	1a51      	subs	r1, r2, r1
 800398a:	63b9      	str	r1, [r7, #56]	; 0x38
 800398c:	4649      	mov	r1, r9
 800398e:	eb63 0301 	sbc.w	r3, r3, r1
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80039a0:	4649      	mov	r1, r9
 80039a2:	00cb      	lsls	r3, r1, #3
 80039a4:	4641      	mov	r1, r8
 80039a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039aa:	4641      	mov	r1, r8
 80039ac:	00ca      	lsls	r2, r1, #3
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	4622      	mov	r2, r4
 80039b6:	189b      	adds	r3, r3, r2
 80039b8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ba:	462b      	mov	r3, r5
 80039bc:	460a      	mov	r2, r1
 80039be:	eb42 0303 	adc.w	r3, r2, r3
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039d0:	4629      	mov	r1, r5
 80039d2:	024b      	lsls	r3, r1, #9
 80039d4:	4621      	mov	r1, r4
 80039d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039da:	4621      	mov	r1, r4
 80039dc:	024a      	lsls	r2, r1, #9
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80039f4:	f7fc fc74 	bl	80002e0 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a02:	e067      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a04:	4b75      	ldr	r3, [pc, #468]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a1e:	2300      	movs	r3, #0
 8003a20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a26:	4622      	mov	r2, r4
 8003a28:	462b      	mov	r3, r5
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	0159      	lsls	r1, r3, #5
 8003a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a38:	0150      	lsls	r0, r2, #5
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4621      	mov	r1, r4
 8003a40:	1a51      	subs	r1, r2, r1
 8003a42:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a44:	4629      	mov	r1, r5
 8003a46:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a58:	4649      	mov	r1, r9
 8003a5a:	018b      	lsls	r3, r1, #6
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a62:	4641      	mov	r1, r8
 8003a64:	018a      	lsls	r2, r1, #6
 8003a66:	4641      	mov	r1, r8
 8003a68:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a86:	4692      	mov	sl, r2
 8003a88:	469b      	mov	fp, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	eb1a 0303 	adds.w	r3, sl, r3
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	462b      	mov	r3, r5
 8003a94:	eb4b 0303 	adc.w	r3, fp, r3
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	028b      	lsls	r3, r1, #10
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	028a      	lsls	r2, r1, #10
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003abc:	2200      	movs	r2, #0
 8003abe:	673b      	str	r3, [r7, #112]	; 0x70
 8003ac0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ac2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003ac6:	f7fc fc0b 	bl	80002e0 <__aeabi_uldivmod>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4613      	mov	r3, r2
 8003ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ad4:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003af6:	e0eb      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af8:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b04:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d06b      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	2200      	movs	r2, #0
 8003b18:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b22:	663b      	str	r3, [r7, #96]	; 0x60
 8003b24:	2300      	movs	r3, #0
 8003b26:	667b      	str	r3, [r7, #100]	; 0x64
 8003b28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	462b      	mov	r3, r5
 8003b30:	f04f 0000 	mov.w	r0, #0
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	0159      	lsls	r1, r3, #5
 8003b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3e:	0150      	lsls	r0, r2, #5
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4621      	mov	r1, r4
 8003b46:	1a51      	subs	r1, r2, r1
 8003b48:	61b9      	str	r1, [r7, #24]
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b5e:	4659      	mov	r1, fp
 8003b60:	018b      	lsls	r3, r1, #6
 8003b62:	4651      	mov	r1, sl
 8003b64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b68:	4651      	mov	r1, sl
 8003b6a:	018a      	lsls	r2, r1, #6
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	ebb2 0801 	subs.w	r8, r2, r1
 8003b72:	4659      	mov	r1, fp
 8003b74:	eb63 0901 	sbc.w	r9, r3, r1
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b8c:	4690      	mov	r8, r2
 8003b8e:	4699      	mov	r9, r3
 8003b90:	4623      	mov	r3, r4
 8003b92:	eb18 0303 	adds.w	r3, r8, r3
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	462b      	mov	r3, r5
 8003b9a:	eb49 0303 	adc.w	r3, r9, r3
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bac:	4629      	mov	r1, r5
 8003bae:	024b      	lsls	r3, r1, #9
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	024a      	lsls	r2, r1, #9
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bcc:	f7fc fb88 	bl	80002e0 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bda:	e065      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x420>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be8:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bf8:	653b      	str	r3, [r7, #80]	; 0x50
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8003bfe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c02:	4642      	mov	r2, r8
 8003c04:	464b      	mov	r3, r9
 8003c06:	f04f 0000 	mov.w	r0, #0
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	0159      	lsls	r1, r3, #5
 8003c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c14:	0150      	lsls	r0, r2, #5
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4641      	mov	r1, r8
 8003c1c:	1a51      	subs	r1, r2, r1
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	4649      	mov	r1, r9
 8003c22:	eb63 0301 	sbc.w	r3, r3, r1
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c34:	4659      	mov	r1, fp
 8003c36:	018b      	lsls	r3, r1, #6
 8003c38:	4651      	mov	r1, sl
 8003c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c3e:	4651      	mov	r1, sl
 8003c40:	018a      	lsls	r2, r1, #6
 8003c42:	4651      	mov	r1, sl
 8003c44:	1a54      	subs	r4, r2, r1
 8003c46:	4659      	mov	r1, fp
 8003c48:	eb63 0501 	sbc.w	r5, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	00eb      	lsls	r3, r5, #3
 8003c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5a:	00e2      	lsls	r2, r4, #3
 8003c5c:	4614      	mov	r4, r2
 8003c5e:	461d      	mov	r5, r3
 8003c60:	4643      	mov	r3, r8
 8003c62:	18e3      	adds	r3, r4, r3
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	464b      	mov	r3, r9
 8003c68:	eb45 0303 	adc.w	r3, r5, r3
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	028b      	lsls	r3, r1, #10
 8003c7e:	4621      	mov	r1, r4
 8003c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c84:	4621      	mov	r1, r4
 8003c86:	028a      	lsls	r2, r1, #10
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c90:	2200      	movs	r2, #0
 8003c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c9a:	f7fc fb21 	bl	80002e0 <__aeabi_uldivmod>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0f1b      	lsrs	r3, r3, #28
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003cb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cc6:	e003      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	37b8      	adds	r7, #184	; 0xb8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	00f42400 	.word	0x00f42400

08003ce8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e28d      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8083 	beq.w	8003e0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d08:	4b94      	ldr	r3, [pc, #592]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d019      	beq.n	8003d48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d14:	4b91      	ldr	r3, [pc, #580]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d20:	4b8e      	ldr	r3, [pc, #568]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2c:	d00c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2e:	4b8b      	ldr	r3, [pc, #556]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d112      	bne.n	8003d60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3a:	4b88      	ldr	r3, [pc, #544]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d05b      	beq.n	8003e0c <HAL_RCC_OscConfig+0x124>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d157      	bne.n	8003e0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e25a      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d106      	bne.n	8003d78 <HAL_RCC_OscConfig+0x90>
 8003d6a:	4b7c      	ldr	r3, [pc, #496]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7b      	ldr	r2, [pc, #492]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e01d      	b.n	8003db4 <HAL_RCC_OscConfig+0xcc>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0xb4>
 8003d82:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a75      	ldr	r2, [pc, #468]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a72      	ldr	r2, [pc, #456]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0xcc>
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6e      	ldr	r2, [pc, #440]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b6c      	ldr	r3, [pc, #432]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6b      	ldr	r2, [pc, #428]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7ff f878 	bl	8002eb0 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7ff f874 	bl	8002eb0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e21f      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xdc>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7ff f864 	bl	8002eb0 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7ff f860 	bl	8002eb0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e20b      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x104>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d06f      	beq.n	8003efa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e1a:	4b50      	ldr	r3, [pc, #320]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d017      	beq.n	8003e56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e26:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d105      	bne.n	8003e3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e32:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3e:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d11c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4a:	4b44      	ldr	r3, [pc, #272]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d116      	bne.n	8003e84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	4b41      	ldr	r3, [pc, #260]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_RCC_OscConfig+0x186>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e1d3      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4937      	ldr	r1, [pc, #220]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	e03a      	b.n	8003efa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8c:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <HAL_RCC_OscConfig+0x278>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7ff f80d 	bl	8002eb0 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7ff f809 	bl	8002eb0 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1b4      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4925      	ldr	r1, [pc, #148]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
 8003ecc:	e015      	b.n	8003efa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_RCC_OscConfig+0x278>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe ffec 	bl	8002eb0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003edc:	f7fe ffe8 	bl	8002eb0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e193      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d036      	beq.n	8003f74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fe ffcc 	bl	8002eb0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1c:	f7fe ffc8 	bl	8002eb0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e173      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x234>
 8003f3a:	e01b      	b.n	8003f74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe ffb5 	bl	8002eb0 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	e00e      	b.n	8003f68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fe ffb1 	bl	8002eb0 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d907      	bls.n	8003f68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e15c      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	42470000 	.word	0x42470000
 8003f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	4b8a      	ldr	r3, [pc, #552]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ea      	bne.n	8003f4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8097 	beq.w	80040b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f86:	4b83      	ldr	r3, [pc, #524]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	4b7f      	ldr	r3, [pc, #508]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4a7e      	ldr	r2, [pc, #504]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa2:	4b7c      	ldr	r3, [pc, #496]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b79      	ldr	r3, [pc, #484]	; (8004198 <HAL_RCC_OscConfig+0x4b0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbe:	4b76      	ldr	r3, [pc, #472]	; (8004198 <HAL_RCC_OscConfig+0x4b0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a75      	ldr	r2, [pc, #468]	; (8004198 <HAL_RCC_OscConfig+0x4b0>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fe ff71 	bl	8002eb0 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fe ff6d 	bl	8002eb0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e118      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <HAL_RCC_OscConfig+0x4b0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x31e>
 8003ff8:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a65      	ldr	r2, [pc, #404]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	e01c      	b.n	8004040 <HAL_RCC_OscConfig+0x358>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b05      	cmp	r3, #5
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x340>
 800400e:	4b61      	ldr	r3, [pc, #388]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a60      	ldr	r2, [pc, #384]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	4b5e      	ldr	r3, [pc, #376]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a5d      	ldr	r2, [pc, #372]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	e00b      	b.n	8004040 <HAL_RCC_OscConfig+0x358>
 8004028:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a59      	ldr	r2, [pc, #356]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
 8004034:	4b57      	ldr	r3, [pc, #348]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a56      	ldr	r2, [pc, #344]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 800403a:	f023 0304 	bic.w	r3, r3, #4
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fe ff32 	bl	8002eb0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fe ff2e 	bl	8002eb0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0d7      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ee      	beq.n	8004050 <HAL_RCC_OscConfig+0x368>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fe ff1c 	bl	8002eb0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fe ff18 	bl	8002eb0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0c1      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004092:	4b40      	ldr	r3, [pc, #256]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ee      	bne.n	800407c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 80040aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80ad 	beq.w	8004214 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d060      	beq.n	8004188 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d145      	bne.n	800415a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ce:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_RCC_OscConfig+0x4b4>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe feec 	bl	8002eb0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fe fee8 	bl	8002eb0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e093      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	3b01      	subs	r3, #1
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	071b      	lsls	r3, r3, #28
 8004126:	491b      	ldr	r1, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <HAL_RCC_OscConfig+0x4b4>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe febd 	bl	8002eb0 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe feb9 	bl	8002eb0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e064      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x452>
 8004158:	e05c      	b.n	8004214 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <HAL_RCC_OscConfig+0x4b4>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fe fea6 	bl	8002eb0 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004168:	f7fe fea2 	bl	8002eb0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e04d      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_OscConfig+0x4ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x480>
 8004186:	e045      	b.n	8004214 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e040      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
 8004194:	40023800 	.word	0x40023800
 8004198:	40007000 	.word	0x40007000
 800419c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a0:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <HAL_RCC_OscConfig+0x538>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d030      	beq.n	8004210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d129      	bne.n	8004210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d122      	bne.n	8004210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d8:	4293      	cmp	r3, r2
 80041da:	d119      	bne.n	8004210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	3b01      	subs	r3, #1
 80041ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d10f      	bne.n	8004210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800

08004224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e07b      	b.n	800432e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d108      	bne.n	8004250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004246:	d009      	beq.n	800425c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]
 800424e:	e005      	b.n	800425c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fc fed6 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e0:	ea42 0103 	orr.w	r1, r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	f003 0104 	and.w	r1, r3, #4
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f003 0210 	and.w	r2, r3, #16
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08c      	sub	sp, #48	; 0x30
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_SPI_TransmitReceive+0x26>
 8004358:	2302      	movs	r3, #2
 800435a:	e198      	b.n	800468e <HAL_SPI_TransmitReceive+0x358>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004364:	f7fe fda4 	bl	8002eb0 <HAL_GetTick>
 8004368:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800437e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004382:	2b01      	cmp	r3, #1
 8004384:	d00f      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x70>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438c:	d107      	bne.n	800439e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <HAL_SPI_TransmitReceive+0x68>
 8004396:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800439a:	2b04      	cmp	r3, #4
 800439c:	d003      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800439e:	2302      	movs	r3, #2
 80043a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043a4:	e16d      	b.n	8004682 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x82>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x82>
 80043b2:	887b      	ldrh	r3, [r7, #2]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d103      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043be:	e160      	b.n	8004682 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d003      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2205      	movs	r2, #5
 80043d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	887a      	ldrh	r2, [r7, #2]
 80043ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	887a      	ldrh	r2, [r7, #2]
 80043f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	887a      	ldrh	r2, [r7, #2]
 80043fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d007      	beq.n	8004428 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	d17c      	bne.n	800452c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_TransmitReceive+0x10a>
 800443a:	8b7b      	ldrh	r3, [r7, #26]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d16a      	bne.n	8004516 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004464:	e057      	b.n	8004516 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d11b      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x176>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x176>
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d113      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	881a      	ldrh	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d119      	bne.n	80044ee <HAL_SPI_TransmitReceive+0x1b8>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d014      	beq.n	80044ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	b292      	uxth	r2, r2
 80044d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	1c9a      	adds	r2, r3, #2
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ea:	2301      	movs	r3, #1
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044ee:	f7fe fcdf 	bl	8002eb0 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d80b      	bhi.n	8004516 <HAL_SPI_TransmitReceive+0x1e0>
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d007      	beq.n	8004516 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004514:	e0b5      	b.n	8004682 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1a2      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x130>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d19d      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x130>
 800452a:	e080      	b.n	800462e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_SPI_TransmitReceive+0x204>
 8004534:	8b7b      	ldrh	r3, [r7, #26]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d16f      	bne.n	800461a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004560:	e05b      	b.n	800461a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d11c      	bne.n	80045aa <HAL_SPI_TransmitReceive+0x274>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d017      	beq.n	80045aa <HAL_SPI_TransmitReceive+0x274>
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d114      	bne.n	80045aa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	7812      	ldrb	r2, [r2, #0]
 800458c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d119      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x2b6>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d014      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045e8:	2301      	movs	r3, #1
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045ec:	f7fe fc60 	bl	8002eb0 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d803      	bhi.n	8004604 <HAL_SPI_TransmitReceive+0x2ce>
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d102      	bne.n	800460a <HAL_SPI_TransmitReceive+0x2d4>
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004618:	e033      	b.n	8004682 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d19e      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x22c>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d199      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f9ca 	bl	80049cc <SPI_EndRxTxTransaction>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800464a:	e01a      	b.n	8004682 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004678:	e003      	b.n	8004682 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800468a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800468e:	4618      	mov	r0, r3
 8004690:	3730      	adds	r7, #48	; 0x30
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
    return;
 80046d6:	e0ce      	b.n	8004876 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_SPI_IRQHandler+0x5e>
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4798      	blx	r3
    return;
 80046f4:	e0bf      	b.n	8004876 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_SPI_IRQHandler+0x7e>
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 80b0 	beq.w	8004876 <HAL_SPI_IRQHandler+0x1de>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80aa 	beq.w	8004876 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d023      	beq.n	8004774 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d011      	beq.n	800475c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	f043 0204 	orr.w	r2, r3, #4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	e00b      	b.n	8004774 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]
        return;
 8004772:	e080      	b.n	8004876 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d014      	beq.n	80047a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00c      	beq.n	80047cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	f043 0208 	orr.w	r2, r3, #8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d04f      	beq.n	8004874 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_SPI_IRQHandler+0x168>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d034      	beq.n	800486a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0203 	bic.w	r2, r2, #3
 800480e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	4a17      	ldr	r2, [pc, #92]	; (800487c <HAL_SPI_IRQHandler+0x1e4>)
 800481e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe fcf4 	bl	8003212 <HAL_DMA_Abort_IT>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004848:	4a0c      	ldr	r2, [pc, #48]	; (800487c <HAL_SPI_IRQHandler+0x1e4>)
 800484a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe fcde 	bl	8003212 <HAL_DMA_Abort_IT>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004868:	e003      	b.n	8004872 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f808 	bl	8004880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004870:	e000      	b.n	8004874 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004872:	bf00      	nop
    return;
 8004874:	bf00      	nop
  }
}
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	08004895 	.word	0x08004895

08004880 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff ffe6 	bl	8004880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048cc:	f7fe faf0 	bl	8002eb0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	4413      	add	r3, r2
 80048da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048dc:	f7fe fae8 	bl	8002eb0 <HAL_GetTick>
 80048e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048e2:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	015b      	lsls	r3, r3, #5
 80048e8:	0d1b      	lsrs	r3, r3, #20
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048f2:	e054      	b.n	800499e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d050      	beq.n	800499e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048fc:	f7fe fad8 	bl	8002eb0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	429a      	cmp	r2, r3
 800490a:	d902      	bls.n	8004912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d13d      	bne.n	800498e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492a:	d111      	bne.n	8004950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004934:	d004      	beq.n	8004940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493e:	d107      	bne.n	8004950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004958:	d10f      	bne.n	800497a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e017      	b.n	80049be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3b01      	subs	r3, #1
 800499c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d19b      	bne.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000098 	.word	0x20000098

080049cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2201      	movs	r2, #1
 80049e0:	2102      	movs	r1, #2
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ff6a 	bl	80048bc <SPI_WaitFlagStateUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e032      	b.n	8004a64 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049fe:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <SPI_EndRxTxTransaction+0xa0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <SPI_EndRxTxTransaction+0xa4>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	0d5b      	lsrs	r3, r3, #21
 8004a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1c:	d112      	bne.n	8004a44 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2200      	movs	r2, #0
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff ff47 	bl	80048bc <SPI_WaitFlagStateUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d016      	beq.n	8004a62 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e00f      	b.n	8004a64 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d0f2      	beq.n	8004a44 <SPI_EndRxTxTransaction+0x78>
 8004a5e:	e000      	b.n	8004a62 <SPI_EndRxTxTransaction+0x96>
        break;
 8004a60:	bf00      	nop
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000098 	.word	0x20000098
 8004a70:	165e9f81 	.word	0x165e9f81

08004a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e042      	b.n	8004b0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc fb44 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	; 0x24
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fd69 	bl	8005590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	; 0x28
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d175      	bne.n	8004c20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Transmit+0x2c>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e06e      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2221      	movs	r2, #33	; 0x21
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b52:	f7fe f9ad 	bl	8002eb0 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	88fa      	ldrh	r2, [r7, #6]
 8004b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6c:	d108      	bne.n	8004b80 <HAL_UART_Transmit+0x6c>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e003      	b.n	8004b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b88:	e02e      	b.n	8004be8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	; 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fb05 	bl	80051a4 <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e03a      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e007      	b.n	8004bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1cb      	bne.n	8004b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2140      	movs	r1, #64	; 0x40
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fad1 	bl	80051a4 <UART_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e006      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b0ba      	sub	sp, #232	; 0xe8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_UART_IRQHandler+0x66>
 8004c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fbc2 	bl	8005414 <UART_Receive_IT>
      return;
 8004c90:	e25b      	b.n	800514a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80de 	beq.w	8004e58 <HAL_UART_IRQHandler+0x22c>
 8004c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80d1 	beq.w	8004e58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_UART_IRQHandler+0xae>
 8004cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_UART_IRQHandler+0xd2>
 8004ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f043 0202 	orr.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_UART_IRQHandler+0xf6>
 8004d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f043 0204 	orr.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d011      	beq.n	8004d52 <HAL_UART_IRQHandler+0x126>
 8004d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f043 0208 	orr.w	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 81f2 	beq.w	8005140 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_UART_IRQHandler+0x14e>
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fb4d 	bl	8005414 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <HAL_UART_IRQHandler+0x17a>
 8004d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d04f      	beq.n	8004e46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa55 	bl	8005256 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d141      	bne.n	8004e3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3314      	adds	r3, #20
 8004de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004de6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1d9      	bne.n	8004dba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d013      	beq.n	8004e36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	4a7e      	ldr	r2, [pc, #504]	; (800500c <HAL_UART_IRQHandler+0x3e0>)
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe f9f9 	bl	8003212 <HAL_DMA_Abort_IT>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d016      	beq.n	8004e54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e00e      	b.n	8004e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f99e 	bl	8005178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e00a      	b.n	8004e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f99a 	bl	8005178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	e006      	b.n	8004e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f996 	bl	8005178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004e52:	e175      	b.n	8005140 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	bf00      	nop
    return;
 8004e56:	e173      	b.n	8005140 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	f040 814f 	bne.w	8005100 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8148 	beq.w	8005100 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8141 	beq.w	8005100 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	f040 80b6 	bne.w	8005010 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8145 	beq.w	8005144 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	f080 813e 	bcs.w	8005144 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ece:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eda:	f000 8088 	beq.w	8004fee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1d9      	bne.n	8004ede <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e1      	bne.n	8004f2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3314      	adds	r3, #20
 8004f6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3314      	adds	r3, #20
 8004f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e3      	bne.n	8004f66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbe:	f023 0310 	bic.w	r3, r3, #16
 8004fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e3      	bne.n	8004fac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe f8a2 	bl	8003132 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	b29b      	uxth	r3, r3
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f8c1 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800500a:	e09b      	b.n	8005144 <HAL_UART_IRQHandler+0x518>
 800500c:	0800531d 	.word	0x0800531d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005018:	b29b      	uxth	r3, r3
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 808e 	beq.w	8005148 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800502c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8089 	beq.w	8005148 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800504c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800505a:	647a      	str	r2, [r7, #68]	; 0x44
 800505c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e3      	bne.n	8005036 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	623b      	str	r3, [r7, #32]
   return(result);
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005092:	633a      	str	r2, [r7, #48]	; 0x30
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e3      	bne.n	800506e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0310 	bic.w	r3, r3, #16
 80050ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050d8:	61fa      	str	r2, [r7, #28]
 80050da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	617b      	str	r3, [r7, #20]
   return(result);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e3      	bne.n	80050b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f847 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050fe:	e023      	b.n	8005148 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <HAL_UART_IRQHandler+0x4f4>
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f913 	bl	8005344 <UART_Transmit_IT>
    return;
 800511e:	e014      	b.n	800514a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00e      	beq.n	800514a <HAL_UART_IRQHandler+0x51e>
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f953 	bl	80053e4 <UART_EndTransmit_IT>
    return;
 800513e:	e004      	b.n	800514a <HAL_UART_IRQHandler+0x51e>
    return;
 8005140:	bf00      	nop
 8005142:	e002      	b.n	800514a <HAL_UART_IRQHandler+0x51e>
      return;
 8005144:	bf00      	nop
 8005146:	e000      	b.n	800514a <HAL_UART_IRQHandler+0x51e>
      return;
 8005148:	bf00      	nop
  }
}
 800514a:	37e8      	adds	r7, #232	; 0xe8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	e03b      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d037      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051be:	f7fd fe77 	bl	8002eb0 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e03a      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d023      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b80      	cmp	r3, #128	; 0x80
 80051ea:	d020      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d01d      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d116      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f81d 	bl	8005256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2208      	movs	r2, #8
 8005220:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e00f      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4013      	ands	r3, r2
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	429a      	cmp	r2, r3
 800524a:	d0b4      	beq.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005256:	b480      	push	{r7}
 8005258:	b095      	sub	sp, #84	; 0x54
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800527e:	643a      	str	r2, [r7, #64]	; 0x40
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3314      	adds	r3, #20
 8005298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3314      	adds	r3, #20
 80052b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d119      	bne.n	8005302 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f023 0310 	bic.w	r3, r3, #16
 80052e4:	647b      	str	r3, [r7, #68]	; 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ee:	61ba      	str	r2, [r7, #24]
 80052f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6979      	ldr	r1, [r7, #20]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	613b      	str	r3, [r7, #16]
   return(result);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005310:	bf00      	nop
 8005312:	3754      	adds	r7, #84	; 0x54
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff ff1e 	bl	8005178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b21      	cmp	r3, #33	; 0x21
 8005356:	d13e      	bne.n	80053d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005360:	d114      	bne.n	800538c <UART_Transmit_IT+0x48>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d110      	bne.n	800538c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	1c9a      	adds	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]
 800538a:	e008      	b.n	800539e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	1c59      	adds	r1, r3, #1
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6211      	str	r1, [r2, #32]
 8005396:	781a      	ldrb	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	4619      	mov	r1, r3
 80053ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10f      	bne.n	80053d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e000      	b.n	80053d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fea3 	bl	8005150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b22      	cmp	r3, #34	; 0x22
 8005426:	f040 80ae 	bne.w	8005586 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005432:	d117      	bne.n	8005464 <UART_Receive_IT+0x50>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d113      	bne.n	8005464 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	b29a      	uxth	r2, r3
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	1c9a      	adds	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	629a      	str	r2, [r3, #40]	; 0x28
 8005462:	e026      	b.n	80054b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005476:	d007      	beq.n	8005488 <UART_Receive_IT+0x74>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <UART_Receive_IT+0x82>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e008      	b.n	80054a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	4619      	mov	r1, r3
 80054c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d15d      	bne.n	8005582 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0220 	bic.w	r2, r2, #32
 80054d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695a      	ldr	r2, [r3, #20]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	2b01      	cmp	r3, #1
 800550a:	d135      	bne.n	8005578 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	613b      	str	r3, [r7, #16]
   return(result);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f023 0310 	bic.w	r3, r3, #16
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	623a      	str	r2, [r7, #32]
 8005534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	69f9      	ldr	r1, [r7, #28]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b10      	cmp	r3, #16
 8005552:	d10a      	bne.n	800556a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fe0b 	bl	800518c <HAL_UARTEx_RxEventCallback>
 8005576:	e002      	b.n	800557e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff fdf3 	bl	8005164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e002      	b.n	8005588 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005586:	2302      	movs	r3, #2
  }
}
 8005588:	4618      	mov	r0, r3
 800558a:	3730      	adds	r7, #48	; 0x30
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005594:	b0c0      	sub	sp, #256	; 0x100
 8005596:	af00      	add	r7, sp, #0
 8005598:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	68d9      	ldr	r1, [r3, #12]
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	ea40 0301 	orr.w	r3, r0, r1
 80055b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055e8:	f021 010c 	bic.w	r1, r1, #12
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055f6:	430b      	orrs	r3, r1
 80055f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	6999      	ldr	r1, [r3, #24]
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	ea40 0301 	orr.w	r3, r0, r1
 8005616:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b8f      	ldr	r3, [pc, #572]	; (800585c <UART_SetConfig+0x2cc>)
 8005620:	429a      	cmp	r2, r3
 8005622:	d005      	beq.n	8005630 <UART_SetConfig+0xa0>
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b8d      	ldr	r3, [pc, #564]	; (8005860 <UART_SetConfig+0x2d0>)
 800562c:	429a      	cmp	r2, r3
 800562e:	d104      	bne.n	800563a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7fe f916 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 8005634:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005638:	e003      	b.n	8005642 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800563a:	f7fe f8fd 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 800563e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564c:	f040 810c 	bne.w	8005868 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800565a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800565e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005662:	4622      	mov	r2, r4
 8005664:	462b      	mov	r3, r5
 8005666:	1891      	adds	r1, r2, r2
 8005668:	65b9      	str	r1, [r7, #88]	; 0x58
 800566a:	415b      	adcs	r3, r3
 800566c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800566e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005672:	4621      	mov	r1, r4
 8005674:	eb12 0801 	adds.w	r8, r2, r1
 8005678:	4629      	mov	r1, r5
 800567a:	eb43 0901 	adc.w	r9, r3, r1
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800568a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800568e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005692:	4690      	mov	r8, r2
 8005694:	4699      	mov	r9, r3
 8005696:	4623      	mov	r3, r4
 8005698:	eb18 0303 	adds.w	r3, r8, r3
 800569c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056a0:	462b      	mov	r3, r5
 80056a2:	eb49 0303 	adc.w	r3, r9, r3
 80056a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056be:	460b      	mov	r3, r1
 80056c0:	18db      	adds	r3, r3, r3
 80056c2:	653b      	str	r3, [r7, #80]	; 0x50
 80056c4:	4613      	mov	r3, r2
 80056c6:	eb42 0303 	adc.w	r3, r2, r3
 80056ca:	657b      	str	r3, [r7, #84]	; 0x54
 80056cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056d4:	f7fa fe04 	bl	80002e0 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b61      	ldr	r3, [pc, #388]	; (8005864 <UART_SetConfig+0x2d4>)
 80056de:	fba3 2302 	umull	r2, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	011c      	lsls	r4, r3, #4
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005700:	415b      	adcs	r3, r3
 8005702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005708:	4641      	mov	r1, r8
 800570a:	eb12 0a01 	adds.w	sl, r2, r1
 800570e:	4649      	mov	r1, r9
 8005710:	eb43 0b01 	adc.w	fp, r3, r1
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005720:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005728:	4692      	mov	sl, r2
 800572a:	469b      	mov	fp, r3
 800572c:	4643      	mov	r3, r8
 800572e:	eb1a 0303 	adds.w	r3, sl, r3
 8005732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005736:	464b      	mov	r3, r9
 8005738:	eb4b 0303 	adc.w	r3, fp, r3
 800573c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800574c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005750:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005754:	460b      	mov	r3, r1
 8005756:	18db      	adds	r3, r3, r3
 8005758:	643b      	str	r3, [r7, #64]	; 0x40
 800575a:	4613      	mov	r3, r2
 800575c:	eb42 0303 	adc.w	r3, r2, r3
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
 8005762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005766:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800576a:	f7fa fdb9 	bl	80002e0 <__aeabi_uldivmod>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	4611      	mov	r1, r2
 8005774:	4b3b      	ldr	r3, [pc, #236]	; (8005864 <UART_SetConfig+0x2d4>)
 8005776:	fba3 2301 	umull	r2, r3, r3, r1
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	2264      	movs	r2, #100	; 0x64
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	1acb      	subs	r3, r1, r3
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800578a:	4b36      	ldr	r3, [pc, #216]	; (8005864 <UART_SetConfig+0x2d4>)
 800578c:	fba3 2302 	umull	r2, r3, r3, r2
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005798:	441c      	add	r4, r3
 800579a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	1891      	adds	r1, r2, r2
 80057b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80057b4:	415b      	adcs	r3, r3
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057bc:	4641      	mov	r1, r8
 80057be:	1851      	adds	r1, r2, r1
 80057c0:	6339      	str	r1, [r7, #48]	; 0x30
 80057c2:	4649      	mov	r1, r9
 80057c4:	414b      	adcs	r3, r1
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057d4:	4659      	mov	r1, fp
 80057d6:	00cb      	lsls	r3, r1, #3
 80057d8:	4651      	mov	r1, sl
 80057da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057de:	4651      	mov	r1, sl
 80057e0:	00ca      	lsls	r2, r1, #3
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	4642      	mov	r2, r8
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057f0:	464b      	mov	r3, r9
 80057f2:	460a      	mov	r2, r1
 80057f4:	eb42 0303 	adc.w	r3, r2, r3
 80057f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005808:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800580c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005810:	460b      	mov	r3, r1
 8005812:	18db      	adds	r3, r3, r3
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
 8005816:	4613      	mov	r3, r2
 8005818:	eb42 0303 	adc.w	r3, r2, r3
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005822:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005826:	f7fa fd5b 	bl	80002e0 <__aeabi_uldivmod>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <UART_SetConfig+0x2d4>)
 8005830:	fba3 1302 	umull	r1, r3, r3, r2
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	2164      	movs	r1, #100	; 0x64
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	3332      	adds	r3, #50	; 0x32
 8005842:	4a08      	ldr	r2, [pc, #32]	; (8005864 <UART_SetConfig+0x2d4>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	f003 0207 	and.w	r2, r3, #7
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4422      	add	r2, r4
 8005856:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005858:	e106      	b.n	8005a68 <UART_SetConfig+0x4d8>
 800585a:	bf00      	nop
 800585c:	40011000 	.word	0x40011000
 8005860:	40011400 	.word	0x40011400
 8005864:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586c:	2200      	movs	r2, #0
 800586e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005872:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005876:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800587a:	4642      	mov	r2, r8
 800587c:	464b      	mov	r3, r9
 800587e:	1891      	adds	r1, r2, r2
 8005880:	6239      	str	r1, [r7, #32]
 8005882:	415b      	adcs	r3, r3
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
 8005886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800588a:	4641      	mov	r1, r8
 800588c:	1854      	adds	r4, r2, r1
 800588e:	4649      	mov	r1, r9
 8005890:	eb43 0501 	adc.w	r5, r3, r1
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	00eb      	lsls	r3, r5, #3
 800589e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058a2:	00e2      	lsls	r2, r4, #3
 80058a4:	4614      	mov	r4, r2
 80058a6:	461d      	mov	r5, r3
 80058a8:	4643      	mov	r3, r8
 80058aa:	18e3      	adds	r3, r4, r3
 80058ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058b0:	464b      	mov	r3, r9
 80058b2:	eb45 0303 	adc.w	r3, r5, r3
 80058b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058d6:	4629      	mov	r1, r5
 80058d8:	008b      	lsls	r3, r1, #2
 80058da:	4621      	mov	r1, r4
 80058dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058e0:	4621      	mov	r1, r4
 80058e2:	008a      	lsls	r2, r1, #2
 80058e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058e8:	f7fa fcfa 	bl	80002e0 <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4b60      	ldr	r3, [pc, #384]	; (8005a74 <UART_SetConfig+0x4e4>)
 80058f2:	fba3 2302 	umull	r2, r3, r3, r2
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	011c      	lsls	r4, r3, #4
 80058fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005904:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005908:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800590c:	4642      	mov	r2, r8
 800590e:	464b      	mov	r3, r9
 8005910:	1891      	adds	r1, r2, r2
 8005912:	61b9      	str	r1, [r7, #24]
 8005914:	415b      	adcs	r3, r3
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800591c:	4641      	mov	r1, r8
 800591e:	1851      	adds	r1, r2, r1
 8005920:	6139      	str	r1, [r7, #16]
 8005922:	4649      	mov	r1, r9
 8005924:	414b      	adcs	r3, r1
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005934:	4659      	mov	r1, fp
 8005936:	00cb      	lsls	r3, r1, #3
 8005938:	4651      	mov	r1, sl
 800593a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593e:	4651      	mov	r1, sl
 8005940:	00ca      	lsls	r2, r1, #3
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	4603      	mov	r3, r0
 8005948:	4642      	mov	r2, r8
 800594a:	189b      	adds	r3, r3, r2
 800594c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005950:	464b      	mov	r3, r9
 8005952:	460a      	mov	r2, r1
 8005954:	eb42 0303 	adc.w	r3, r2, r3
 8005958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	67bb      	str	r3, [r7, #120]	; 0x78
 8005966:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005974:	4649      	mov	r1, r9
 8005976:	008b      	lsls	r3, r1, #2
 8005978:	4641      	mov	r1, r8
 800597a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597e:	4641      	mov	r1, r8
 8005980:	008a      	lsls	r2, r1, #2
 8005982:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005986:	f7fa fcab 	bl	80002e0 <__aeabi_uldivmod>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4611      	mov	r1, r2
 8005990:	4b38      	ldr	r3, [pc, #224]	; (8005a74 <UART_SetConfig+0x4e4>)
 8005992:	fba3 2301 	umull	r2, r3, r3, r1
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	2264      	movs	r2, #100	; 0x64
 800599a:	fb02 f303 	mul.w	r3, r2, r3
 800599e:	1acb      	subs	r3, r1, r3
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	3332      	adds	r3, #50	; 0x32
 80059a4:	4a33      	ldr	r2, [pc, #204]	; (8005a74 <UART_SetConfig+0x4e4>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b0:	441c      	add	r4, r3
 80059b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b6:	2200      	movs	r2, #0
 80059b8:	673b      	str	r3, [r7, #112]	; 0x70
 80059ba:	677a      	str	r2, [r7, #116]	; 0x74
 80059bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059c0:	4642      	mov	r2, r8
 80059c2:	464b      	mov	r3, r9
 80059c4:	1891      	adds	r1, r2, r2
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	415b      	adcs	r3, r3
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059d0:	4641      	mov	r1, r8
 80059d2:	1851      	adds	r1, r2, r1
 80059d4:	6039      	str	r1, [r7, #0]
 80059d6:	4649      	mov	r1, r9
 80059d8:	414b      	adcs	r3, r1
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059e8:	4659      	mov	r1, fp
 80059ea:	00cb      	lsls	r3, r1, #3
 80059ec:	4651      	mov	r1, sl
 80059ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059f2:	4651      	mov	r1, sl
 80059f4:	00ca      	lsls	r2, r1, #3
 80059f6:	4610      	mov	r0, r2
 80059f8:	4619      	mov	r1, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	4642      	mov	r2, r8
 80059fe:	189b      	adds	r3, r3, r2
 8005a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a02:	464b      	mov	r3, r9
 8005a04:	460a      	mov	r2, r1
 8005a06:	eb42 0303 	adc.w	r3, r2, r3
 8005a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	663b      	str	r3, [r7, #96]	; 0x60
 8005a16:	667a      	str	r2, [r7, #100]	; 0x64
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a24:	4649      	mov	r1, r9
 8005a26:	008b      	lsls	r3, r1, #2
 8005a28:	4641      	mov	r1, r8
 8005a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a2e:	4641      	mov	r1, r8
 8005a30:	008a      	lsls	r2, r1, #2
 8005a32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a36:	f7fa fc53 	bl	80002e0 <__aeabi_uldivmod>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <UART_SetConfig+0x4e4>)
 8005a40:	fba3 1302 	umull	r1, r3, r3, r2
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	2164      	movs	r1, #100	; 0x64
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	3332      	adds	r3, #50	; 0x32
 8005a52:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <UART_SetConfig+0x4e4>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	f003 020f 	and.w	r2, r3, #15
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4422      	add	r2, r4
 8005a66:	609a      	str	r2, [r3, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a74:	51eb851f 	.word	0x51eb851f

08005a78 <std>:
 8005a78:	2300      	movs	r3, #0
 8005a7a:	b510      	push	{r4, lr}
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a86:	6083      	str	r3, [r0, #8]
 8005a88:	8181      	strh	r1, [r0, #12]
 8005a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a8c:	81c2      	strh	r2, [r0, #14]
 8005a8e:	6183      	str	r3, [r0, #24]
 8005a90:	4619      	mov	r1, r3
 8005a92:	2208      	movs	r2, #8
 8005a94:	305c      	adds	r0, #92	; 0x5c
 8005a96:	f000 fa17 	bl	8005ec8 <memset>
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <std+0x58>)
 8005a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <std+0x5c>)
 8005aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <std+0x60>)
 8005aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <std+0x64>)
 8005aa8:	6323      	str	r3, [r4, #48]	; 0x30
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <std+0x68>)
 8005aac:	6224      	str	r4, [r4, #32]
 8005aae:	429c      	cmp	r4, r3
 8005ab0:	d006      	beq.n	8005ac0 <std+0x48>
 8005ab2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ab6:	4294      	cmp	r4, r2
 8005ab8:	d002      	beq.n	8005ac0 <std+0x48>
 8005aba:	33d0      	adds	r3, #208	; 0xd0
 8005abc:	429c      	cmp	r4, r3
 8005abe:	d105      	bne.n	8005acc <std+0x54>
 8005ac0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac8:	f000 ba76 	b.w	8005fb8 <__retarget_lock_init_recursive>
 8005acc:	bd10      	pop	{r4, pc}
 8005ace:	bf00      	nop
 8005ad0:	08005d19 	.word	0x08005d19
 8005ad4:	08005d3b 	.word	0x08005d3b
 8005ad8:	08005d73 	.word	0x08005d73
 8005adc:	08005d97 	.word	0x08005d97
 8005ae0:	20000358 	.word	0x20000358

08005ae4 <stdio_exit_handler>:
 8005ae4:	4a02      	ldr	r2, [pc, #8]	; (8005af0 <stdio_exit_handler+0xc>)
 8005ae6:	4903      	ldr	r1, [pc, #12]	; (8005af4 <stdio_exit_handler+0x10>)
 8005ae8:	4803      	ldr	r0, [pc, #12]	; (8005af8 <stdio_exit_handler+0x14>)
 8005aea:	f000 b869 	b.w	8005bc0 <_fwalk_sglue>
 8005aee:	bf00      	nop
 8005af0:	200000d4 	.word	0x200000d4
 8005af4:	08006b15 	.word	0x08006b15
 8005af8:	200000e0 	.word	0x200000e0

08005afc <cleanup_stdio>:
 8005afc:	6841      	ldr	r1, [r0, #4]
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <cleanup_stdio+0x34>)
 8005b00:	4299      	cmp	r1, r3
 8005b02:	b510      	push	{r4, lr}
 8005b04:	4604      	mov	r4, r0
 8005b06:	d001      	beq.n	8005b0c <cleanup_stdio+0x10>
 8005b08:	f001 f804 	bl	8006b14 <_fflush_r>
 8005b0c:	68a1      	ldr	r1, [r4, #8]
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <cleanup_stdio+0x38>)
 8005b10:	4299      	cmp	r1, r3
 8005b12:	d002      	beq.n	8005b1a <cleanup_stdio+0x1e>
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 fffd 	bl	8006b14 <_fflush_r>
 8005b1a:	68e1      	ldr	r1, [r4, #12]
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <cleanup_stdio+0x3c>)
 8005b1e:	4299      	cmp	r1, r3
 8005b20:	d004      	beq.n	8005b2c <cleanup_stdio+0x30>
 8005b22:	4620      	mov	r0, r4
 8005b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b28:	f000 bff4 	b.w	8006b14 <_fflush_r>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000358 	.word	0x20000358
 8005b34:	200003c0 	.word	0x200003c0
 8005b38:	20000428 	.word	0x20000428

08005b3c <global_stdio_init.part.0>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <global_stdio_init.part.0+0x30>)
 8005b40:	4c0b      	ldr	r4, [pc, #44]	; (8005b70 <global_stdio_init.part.0+0x34>)
 8005b42:	4a0c      	ldr	r2, [pc, #48]	; (8005b74 <global_stdio_init.part.0+0x38>)
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	4620      	mov	r0, r4
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2104      	movs	r1, #4
 8005b4c:	f7ff ff94 	bl	8005a78 <std>
 8005b50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b54:	2201      	movs	r2, #1
 8005b56:	2109      	movs	r1, #9
 8005b58:	f7ff ff8e 	bl	8005a78 <std>
 8005b5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b60:	2202      	movs	r2, #2
 8005b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b66:	2112      	movs	r1, #18
 8005b68:	f7ff bf86 	b.w	8005a78 <std>
 8005b6c:	20000490 	.word	0x20000490
 8005b70:	20000358 	.word	0x20000358
 8005b74:	08005ae5 	.word	0x08005ae5

08005b78 <__sfp_lock_acquire>:
 8005b78:	4801      	ldr	r0, [pc, #4]	; (8005b80 <__sfp_lock_acquire+0x8>)
 8005b7a:	f000 ba1e 	b.w	8005fba <__retarget_lock_acquire_recursive>
 8005b7e:	bf00      	nop
 8005b80:	20000499 	.word	0x20000499

08005b84 <__sfp_lock_release>:
 8005b84:	4801      	ldr	r0, [pc, #4]	; (8005b8c <__sfp_lock_release+0x8>)
 8005b86:	f000 ba19 	b.w	8005fbc <__retarget_lock_release_recursive>
 8005b8a:	bf00      	nop
 8005b8c:	20000499 	.word	0x20000499

08005b90 <__sinit>:
 8005b90:	b510      	push	{r4, lr}
 8005b92:	4604      	mov	r4, r0
 8005b94:	f7ff fff0 	bl	8005b78 <__sfp_lock_acquire>
 8005b98:	6a23      	ldr	r3, [r4, #32]
 8005b9a:	b11b      	cbz	r3, 8005ba4 <__sinit+0x14>
 8005b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba0:	f7ff bff0 	b.w	8005b84 <__sfp_lock_release>
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <__sinit+0x28>)
 8005ba6:	6223      	str	r3, [r4, #32]
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <__sinit+0x2c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f5      	bne.n	8005b9c <__sinit+0xc>
 8005bb0:	f7ff ffc4 	bl	8005b3c <global_stdio_init.part.0>
 8005bb4:	e7f2      	b.n	8005b9c <__sinit+0xc>
 8005bb6:	bf00      	nop
 8005bb8:	08005afd 	.word	0x08005afd
 8005bbc:	20000490 	.word	0x20000490

08005bc0 <_fwalk_sglue>:
 8005bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	4688      	mov	r8, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	2600      	movs	r6, #0
 8005bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8005bd4:	d505      	bpl.n	8005be2 <_fwalk_sglue+0x22>
 8005bd6:	6824      	ldr	r4, [r4, #0]
 8005bd8:	2c00      	cmp	r4, #0
 8005bda:	d1f7      	bne.n	8005bcc <_fwalk_sglue+0xc>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be2:	89ab      	ldrh	r3, [r5, #12]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d907      	bls.n	8005bf8 <_fwalk_sglue+0x38>
 8005be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bec:	3301      	adds	r3, #1
 8005bee:	d003      	beq.n	8005bf8 <_fwalk_sglue+0x38>
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c0      	blx	r8
 8005bf6:	4306      	orrs	r6, r0
 8005bf8:	3568      	adds	r5, #104	; 0x68
 8005bfa:	e7e9      	b.n	8005bd0 <_fwalk_sglue+0x10>

08005bfc <iprintf>:
 8005bfc:	b40f      	push	{r0, r1, r2, r3}
 8005bfe:	b507      	push	{r0, r1, r2, lr}
 8005c00:	4906      	ldr	r1, [pc, #24]	; (8005c1c <iprintf+0x20>)
 8005c02:	ab04      	add	r3, sp, #16
 8005c04:	6808      	ldr	r0, [r1, #0]
 8005c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c0a:	6881      	ldr	r1, [r0, #8]
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	f000 fc51 	bl	80064b4 <_vfiprintf_r>
 8005c12:	b003      	add	sp, #12
 8005c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c18:	b004      	add	sp, #16
 8005c1a:	4770      	bx	lr
 8005c1c:	2000012c 	.word	0x2000012c

08005c20 <_puts_r>:
 8005c20:	6a03      	ldr	r3, [r0, #32]
 8005c22:	b570      	push	{r4, r5, r6, lr}
 8005c24:	6884      	ldr	r4, [r0, #8]
 8005c26:	4605      	mov	r5, r0
 8005c28:	460e      	mov	r6, r1
 8005c2a:	b90b      	cbnz	r3, 8005c30 <_puts_r+0x10>
 8005c2c:	f7ff ffb0 	bl	8005b90 <__sinit>
 8005c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c32:	07db      	lsls	r3, r3, #31
 8005c34:	d405      	bmi.n	8005c42 <_puts_r+0x22>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	0598      	lsls	r0, r3, #22
 8005c3a:	d402      	bmi.n	8005c42 <_puts_r+0x22>
 8005c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c3e:	f000 f9bc 	bl	8005fba <__retarget_lock_acquire_recursive>
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	0719      	lsls	r1, r3, #28
 8005c46:	d513      	bpl.n	8005c70 <_puts_r+0x50>
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	b18b      	cbz	r3, 8005c70 <_puts_r+0x50>
 8005c4c:	3e01      	subs	r6, #1
 8005c4e:	68a3      	ldr	r3, [r4, #8]
 8005c50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c54:	3b01      	subs	r3, #1
 8005c56:	60a3      	str	r3, [r4, #8]
 8005c58:	b9e9      	cbnz	r1, 8005c96 <_puts_r+0x76>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da2e      	bge.n	8005cbc <_puts_r+0x9c>
 8005c5e:	4622      	mov	r2, r4
 8005c60:	210a      	movs	r1, #10
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 f89b 	bl	8005d9e <__swbuf_r>
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d007      	beq.n	8005c7c <_puts_r+0x5c>
 8005c6c:	250a      	movs	r5, #10
 8005c6e:	e007      	b.n	8005c80 <_puts_r+0x60>
 8005c70:	4621      	mov	r1, r4
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 f8d0 	bl	8005e18 <__swsetup_r>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d0e7      	beq.n	8005c4c <_puts_r+0x2c>
 8005c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c82:	07da      	lsls	r2, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_puts_r+0x72>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	059b      	lsls	r3, r3, #22
 8005c8a:	d402      	bmi.n	8005c92 <_puts_r+0x72>
 8005c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c8e:	f000 f995 	bl	8005fbc <__retarget_lock_release_recursive>
 8005c92:	4628      	mov	r0, r5
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da04      	bge.n	8005ca4 <_puts_r+0x84>
 8005c9a:	69a2      	ldr	r2, [r4, #24]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	dc06      	bgt.n	8005cae <_puts_r+0x8e>
 8005ca0:	290a      	cmp	r1, #10
 8005ca2:	d004      	beq.n	8005cae <_puts_r+0x8e>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	7019      	strb	r1, [r3, #0]
 8005cac:	e7cf      	b.n	8005c4e <_puts_r+0x2e>
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 f874 	bl	8005d9e <__swbuf_r>
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d1c9      	bne.n	8005c4e <_puts_r+0x2e>
 8005cba:	e7df      	b.n	8005c7c <_puts_r+0x5c>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	250a      	movs	r5, #10
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	6022      	str	r2, [r4, #0]
 8005cc4:	701d      	strb	r5, [r3, #0]
 8005cc6:	e7db      	b.n	8005c80 <_puts_r+0x60>

08005cc8 <puts>:
 8005cc8:	4b02      	ldr	r3, [pc, #8]	; (8005cd4 <puts+0xc>)
 8005cca:	4601      	mov	r1, r0
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	f7ff bfa7 	b.w	8005c20 <_puts_r>
 8005cd2:	bf00      	nop
 8005cd4:	2000012c 	.word	0x2000012c

08005cd8 <siprintf>:
 8005cd8:	b40e      	push	{r1, r2, r3}
 8005cda:	b500      	push	{lr}
 8005cdc:	b09c      	sub	sp, #112	; 0x70
 8005cde:	ab1d      	add	r3, sp, #116	; 0x74
 8005ce0:	9002      	str	r0, [sp, #8]
 8005ce2:	9006      	str	r0, [sp, #24]
 8005ce4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ce8:	4809      	ldr	r0, [pc, #36]	; (8005d10 <siprintf+0x38>)
 8005cea:	9107      	str	r1, [sp, #28]
 8005cec:	9104      	str	r1, [sp, #16]
 8005cee:	4909      	ldr	r1, [pc, #36]	; (8005d14 <siprintf+0x3c>)
 8005cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf4:	9105      	str	r1, [sp, #20]
 8005cf6:	6800      	ldr	r0, [r0, #0]
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	a902      	add	r1, sp, #8
 8005cfc:	f000 fab2 	bl	8006264 <_svfiprintf_r>
 8005d00:	9b02      	ldr	r3, [sp, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	b01c      	add	sp, #112	; 0x70
 8005d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d0c:	b003      	add	sp, #12
 8005d0e:	4770      	bx	lr
 8005d10:	2000012c 	.word	0x2000012c
 8005d14:	ffff0208 	.word	0xffff0208

08005d18 <__sread>:
 8005d18:	b510      	push	{r4, lr}
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d20:	f000 f8fc 	bl	8005f1c <_read_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	bfab      	itete	ge
 8005d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d2c:	181b      	addge	r3, r3, r0
 8005d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d32:	bfac      	ite	ge
 8005d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d36:	81a3      	strhlt	r3, [r4, #12]
 8005d38:	bd10      	pop	{r4, pc}

08005d3a <__swrite>:
 8005d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	461f      	mov	r7, r3
 8005d40:	898b      	ldrh	r3, [r1, #12]
 8005d42:	05db      	lsls	r3, r3, #23
 8005d44:	4605      	mov	r5, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4616      	mov	r6, r2
 8005d4a:	d505      	bpl.n	8005d58 <__swrite+0x1e>
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	2302      	movs	r3, #2
 8005d52:	2200      	movs	r2, #0
 8005d54:	f000 f8d0 	bl	8005ef8 <_lseek_r>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	4628      	mov	r0, r5
 8005d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6e:	f000 b8e7 	b.w	8005f40 <_write_r>

08005d72 <__sseek>:
 8005d72:	b510      	push	{r4, lr}
 8005d74:	460c      	mov	r4, r1
 8005d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7a:	f000 f8bd 	bl	8005ef8 <_lseek_r>
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	bf15      	itete	ne
 8005d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d8e:	81a3      	strheq	r3, [r4, #12]
 8005d90:	bf18      	it	ne
 8005d92:	81a3      	strhne	r3, [r4, #12]
 8005d94:	bd10      	pop	{r4, pc}

08005d96 <__sclose>:
 8005d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9a:	f000 b89d 	b.w	8005ed8 <_close_r>

08005d9e <__swbuf_r>:
 8005d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da0:	460e      	mov	r6, r1
 8005da2:	4614      	mov	r4, r2
 8005da4:	4605      	mov	r5, r0
 8005da6:	b118      	cbz	r0, 8005db0 <__swbuf_r+0x12>
 8005da8:	6a03      	ldr	r3, [r0, #32]
 8005daa:	b90b      	cbnz	r3, 8005db0 <__swbuf_r+0x12>
 8005dac:	f7ff fef0 	bl	8005b90 <__sinit>
 8005db0:	69a3      	ldr	r3, [r4, #24]
 8005db2:	60a3      	str	r3, [r4, #8]
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	071a      	lsls	r2, r3, #28
 8005db8:	d525      	bpl.n	8005e06 <__swbuf_r+0x68>
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	b31b      	cbz	r3, 8005e06 <__swbuf_r+0x68>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	6922      	ldr	r2, [r4, #16]
 8005dc2:	1a98      	subs	r0, r3, r2
 8005dc4:	6963      	ldr	r3, [r4, #20]
 8005dc6:	b2f6      	uxtb	r6, r6
 8005dc8:	4283      	cmp	r3, r0
 8005dca:	4637      	mov	r7, r6
 8005dcc:	dc04      	bgt.n	8005dd8 <__swbuf_r+0x3a>
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 fe9f 	bl	8006b14 <_fflush_r>
 8005dd6:	b9e0      	cbnz	r0, 8005e12 <__swbuf_r+0x74>
 8005dd8:	68a3      	ldr	r3, [r4, #8]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	6022      	str	r2, [r4, #0]
 8005de4:	701e      	strb	r6, [r3, #0]
 8005de6:	6962      	ldr	r2, [r4, #20]
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d004      	beq.n	8005df8 <__swbuf_r+0x5a>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	07db      	lsls	r3, r3, #31
 8005df2:	d506      	bpl.n	8005e02 <__swbuf_r+0x64>
 8005df4:	2e0a      	cmp	r6, #10
 8005df6:	d104      	bne.n	8005e02 <__swbuf_r+0x64>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 fe8a 	bl	8006b14 <_fflush_r>
 8005e00:	b938      	cbnz	r0, 8005e12 <__swbuf_r+0x74>
 8005e02:	4638      	mov	r0, r7
 8005e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e06:	4621      	mov	r1, r4
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 f805 	bl	8005e18 <__swsetup_r>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d0d5      	beq.n	8005dbe <__swbuf_r+0x20>
 8005e12:	f04f 37ff 	mov.w	r7, #4294967295
 8005e16:	e7f4      	b.n	8005e02 <__swbuf_r+0x64>

08005e18 <__swsetup_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4b2a      	ldr	r3, [pc, #168]	; (8005ec4 <__swsetup_r+0xac>)
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	460c      	mov	r4, r1
 8005e22:	b118      	cbz	r0, 8005e2c <__swsetup_r+0x14>
 8005e24:	6a03      	ldr	r3, [r0, #32]
 8005e26:	b90b      	cbnz	r3, 8005e2c <__swsetup_r+0x14>
 8005e28:	f7ff feb2 	bl	8005b90 <__sinit>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e32:	0718      	lsls	r0, r3, #28
 8005e34:	d422      	bmi.n	8005e7c <__swsetup_r+0x64>
 8005e36:	06d9      	lsls	r1, r3, #27
 8005e38:	d407      	bmi.n	8005e4a <__swsetup_r+0x32>
 8005e3a:	2309      	movs	r3, #9
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	e034      	b.n	8005eb4 <__swsetup_r+0x9c>
 8005e4a:	0758      	lsls	r0, r3, #29
 8005e4c:	d512      	bpl.n	8005e74 <__swsetup_r+0x5c>
 8005e4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e50:	b141      	cbz	r1, 8005e64 <__swsetup_r+0x4c>
 8005e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e56:	4299      	cmp	r1, r3
 8005e58:	d002      	beq.n	8005e60 <__swsetup_r+0x48>
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f000 f8b0 	bl	8005fc0 <_free_r>
 8005e60:	2300      	movs	r3, #0
 8005e62:	6363      	str	r3, [r4, #52]	; 0x34
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	6063      	str	r3, [r4, #4]
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	6023      	str	r3, [r4, #0]
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f043 0308 	orr.w	r3, r3, #8
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	b94b      	cbnz	r3, 8005e94 <__swsetup_r+0x7c>
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8a:	d003      	beq.n	8005e94 <__swsetup_r+0x7c>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 fe8e 	bl	8006bb0 <__smakebuf_r>
 8005e94:	89a0      	ldrh	r0, [r4, #12]
 8005e96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e9a:	f010 0301 	ands.w	r3, r0, #1
 8005e9e:	d00a      	beq.n	8005eb6 <__swsetup_r+0x9e>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60a3      	str	r3, [r4, #8]
 8005ea4:	6963      	ldr	r3, [r4, #20]
 8005ea6:	425b      	negs	r3, r3
 8005ea8:	61a3      	str	r3, [r4, #24]
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	b943      	cbnz	r3, 8005ec0 <__swsetup_r+0xa8>
 8005eae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005eb2:	d1c4      	bne.n	8005e3e <__swsetup_r+0x26>
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	0781      	lsls	r1, r0, #30
 8005eb8:	bf58      	it	pl
 8005eba:	6963      	ldrpl	r3, [r4, #20]
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	e7f4      	b.n	8005eaa <__swsetup_r+0x92>
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	e7f7      	b.n	8005eb4 <__swsetup_r+0x9c>
 8005ec4:	2000012c 	.word	0x2000012c

08005ec8 <memset>:
 8005ec8:	4402      	add	r2, r0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d100      	bne.n	8005ed2 <memset+0xa>
 8005ed0:	4770      	bx	lr
 8005ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed6:	e7f9      	b.n	8005ecc <memset+0x4>

08005ed8 <_close_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d06      	ldr	r5, [pc, #24]	; (8005ef4 <_close_r+0x1c>)
 8005edc:	2300      	movs	r3, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	f7fb f9eb 	bl	80012be <_close>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_close_r+0x1a>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_close_r+0x1a>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	20000494 	.word	0x20000494

08005ef8 <_lseek_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_lseek_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fb fa00 	bl	800130c <_lseek>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_lseek_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_lseek_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	20000494 	.word	0x20000494

08005f1c <_read_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	; (8005f3c <_read_r+0x20>)
 8005f20:	4604      	mov	r4, r0
 8005f22:	4608      	mov	r0, r1
 8005f24:	4611      	mov	r1, r2
 8005f26:	2200      	movs	r2, #0
 8005f28:	602a      	str	r2, [r5, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f7fb f98e 	bl	800124c <_read>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_read_r+0x1e>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_read_r+0x1e>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	20000494 	.word	0x20000494

08005f40 <_write_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d07      	ldr	r5, [pc, #28]	; (8005f60 <_write_r+0x20>)
 8005f44:	4604      	mov	r4, r0
 8005f46:	4608      	mov	r0, r1
 8005f48:	4611      	mov	r1, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f7fb f999 	bl	8001286 <_write>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_write_r+0x1e>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_write_r+0x1e>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	20000494 	.word	0x20000494

08005f64 <__errno>:
 8005f64:	4b01      	ldr	r3, [pc, #4]	; (8005f6c <__errno+0x8>)
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	2000012c 	.word	0x2000012c

08005f70 <__libc_init_array>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	4d0d      	ldr	r5, [pc, #52]	; (8005fa8 <__libc_init_array+0x38>)
 8005f74:	4c0d      	ldr	r4, [pc, #52]	; (8005fac <__libc_init_array+0x3c>)
 8005f76:	1b64      	subs	r4, r4, r5
 8005f78:	10a4      	asrs	r4, r4, #2
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	42a6      	cmp	r6, r4
 8005f7e:	d109      	bne.n	8005f94 <__libc_init_array+0x24>
 8005f80:	4d0b      	ldr	r5, [pc, #44]	; (8005fb0 <__libc_init_array+0x40>)
 8005f82:	4c0c      	ldr	r4, [pc, #48]	; (8005fb4 <__libc_init_array+0x44>)
 8005f84:	f000 fee2 	bl	8006d4c <_init>
 8005f88:	1b64      	subs	r4, r4, r5
 8005f8a:	10a4      	asrs	r4, r4, #2
 8005f8c:	2600      	movs	r6, #0
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	d105      	bne.n	8005f9e <__libc_init_array+0x2e>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f98:	4798      	blx	r3
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7ee      	b.n	8005f7c <__libc_init_array+0xc>
 8005f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa2:	4798      	blx	r3
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	e7f2      	b.n	8005f8e <__libc_init_array+0x1e>
 8005fa8:	080071b8 	.word	0x080071b8
 8005fac:	080071b8 	.word	0x080071b8
 8005fb0:	080071b8 	.word	0x080071b8
 8005fb4:	080071bc 	.word	0x080071bc

08005fb8 <__retarget_lock_init_recursive>:
 8005fb8:	4770      	bx	lr

08005fba <__retarget_lock_acquire_recursive>:
 8005fba:	4770      	bx	lr

08005fbc <__retarget_lock_release_recursive>:
 8005fbc:	4770      	bx	lr
	...

08005fc0 <_free_r>:
 8005fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d044      	beq.n	8006050 <_free_r+0x90>
 8005fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f1a1 0404 	sub.w	r4, r1, #4
 8005fd2:	bfb8      	it	lt
 8005fd4:	18e4      	addlt	r4, r4, r3
 8005fd6:	f000 f8df 	bl	8006198 <__malloc_lock>
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <_free_r+0x94>)
 8005fdc:	9801      	ldr	r0, [sp, #4]
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	b933      	cbnz	r3, 8005ff0 <_free_r+0x30>
 8005fe2:	6063      	str	r3, [r4, #4]
 8005fe4:	6014      	str	r4, [r2, #0]
 8005fe6:	b003      	add	sp, #12
 8005fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fec:	f000 b8da 	b.w	80061a4 <__malloc_unlock>
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d908      	bls.n	8006006 <_free_r+0x46>
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1961      	adds	r1, r4, r5
 8005ff8:	428b      	cmp	r3, r1
 8005ffa:	bf01      	itttt	eq
 8005ffc:	6819      	ldreq	r1, [r3, #0]
 8005ffe:	685b      	ldreq	r3, [r3, #4]
 8006000:	1949      	addeq	r1, r1, r5
 8006002:	6021      	streq	r1, [r4, #0]
 8006004:	e7ed      	b.n	8005fe2 <_free_r+0x22>
 8006006:	461a      	mov	r2, r3
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b10b      	cbz	r3, 8006010 <_free_r+0x50>
 800600c:	42a3      	cmp	r3, r4
 800600e:	d9fa      	bls.n	8006006 <_free_r+0x46>
 8006010:	6811      	ldr	r1, [r2, #0]
 8006012:	1855      	adds	r5, r2, r1
 8006014:	42a5      	cmp	r5, r4
 8006016:	d10b      	bne.n	8006030 <_free_r+0x70>
 8006018:	6824      	ldr	r4, [r4, #0]
 800601a:	4421      	add	r1, r4
 800601c:	1854      	adds	r4, r2, r1
 800601e:	42a3      	cmp	r3, r4
 8006020:	6011      	str	r1, [r2, #0]
 8006022:	d1e0      	bne.n	8005fe6 <_free_r+0x26>
 8006024:	681c      	ldr	r4, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6053      	str	r3, [r2, #4]
 800602a:	440c      	add	r4, r1
 800602c:	6014      	str	r4, [r2, #0]
 800602e:	e7da      	b.n	8005fe6 <_free_r+0x26>
 8006030:	d902      	bls.n	8006038 <_free_r+0x78>
 8006032:	230c      	movs	r3, #12
 8006034:	6003      	str	r3, [r0, #0]
 8006036:	e7d6      	b.n	8005fe6 <_free_r+0x26>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1961      	adds	r1, r4, r5
 800603c:	428b      	cmp	r3, r1
 800603e:	bf04      	itt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	6063      	str	r3, [r4, #4]
 8006046:	bf04      	itt	eq
 8006048:	1949      	addeq	r1, r1, r5
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	6054      	str	r4, [r2, #4]
 800604e:	e7ca      	b.n	8005fe6 <_free_r+0x26>
 8006050:	b003      	add	sp, #12
 8006052:	bd30      	pop	{r4, r5, pc}
 8006054:	2000049c 	.word	0x2000049c

08006058 <sbrk_aligned>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	4e0e      	ldr	r6, [pc, #56]	; (8006094 <sbrk_aligned+0x3c>)
 800605c:	460c      	mov	r4, r1
 800605e:	6831      	ldr	r1, [r6, #0]
 8006060:	4605      	mov	r5, r0
 8006062:	b911      	cbnz	r1, 800606a <sbrk_aligned+0x12>
 8006064:	f000 fe1c 	bl	8006ca0 <_sbrk_r>
 8006068:	6030      	str	r0, [r6, #0]
 800606a:	4621      	mov	r1, r4
 800606c:	4628      	mov	r0, r5
 800606e:	f000 fe17 	bl	8006ca0 <_sbrk_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	d00a      	beq.n	800608c <sbrk_aligned+0x34>
 8006076:	1cc4      	adds	r4, r0, #3
 8006078:	f024 0403 	bic.w	r4, r4, #3
 800607c:	42a0      	cmp	r0, r4
 800607e:	d007      	beq.n	8006090 <sbrk_aligned+0x38>
 8006080:	1a21      	subs	r1, r4, r0
 8006082:	4628      	mov	r0, r5
 8006084:	f000 fe0c 	bl	8006ca0 <_sbrk_r>
 8006088:	3001      	adds	r0, #1
 800608a:	d101      	bne.n	8006090 <sbrk_aligned+0x38>
 800608c:	f04f 34ff 	mov.w	r4, #4294967295
 8006090:	4620      	mov	r0, r4
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	200004a0 	.word	0x200004a0

08006098 <_malloc_r>:
 8006098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800609c:	1ccd      	adds	r5, r1, #3
 800609e:	f025 0503 	bic.w	r5, r5, #3
 80060a2:	3508      	adds	r5, #8
 80060a4:	2d0c      	cmp	r5, #12
 80060a6:	bf38      	it	cc
 80060a8:	250c      	movcc	r5, #12
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	4607      	mov	r7, r0
 80060ae:	db01      	blt.n	80060b4 <_malloc_r+0x1c>
 80060b0:	42a9      	cmp	r1, r5
 80060b2:	d905      	bls.n	80060c0 <_malloc_r+0x28>
 80060b4:	230c      	movs	r3, #12
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	2600      	movs	r6, #0
 80060ba:	4630      	mov	r0, r6
 80060bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006194 <_malloc_r+0xfc>
 80060c4:	f000 f868 	bl	8006198 <__malloc_lock>
 80060c8:	f8d8 3000 	ldr.w	r3, [r8]
 80060cc:	461c      	mov	r4, r3
 80060ce:	bb5c      	cbnz	r4, 8006128 <_malloc_r+0x90>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4638      	mov	r0, r7
 80060d4:	f7ff ffc0 	bl	8006058 <sbrk_aligned>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	4604      	mov	r4, r0
 80060dc:	d155      	bne.n	800618a <_malloc_r+0xf2>
 80060de:	f8d8 4000 	ldr.w	r4, [r8]
 80060e2:	4626      	mov	r6, r4
 80060e4:	2e00      	cmp	r6, #0
 80060e6:	d145      	bne.n	8006174 <_malloc_r+0xdc>
 80060e8:	2c00      	cmp	r4, #0
 80060ea:	d048      	beq.n	800617e <_malloc_r+0xe6>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	4631      	mov	r1, r6
 80060f0:	4638      	mov	r0, r7
 80060f2:	eb04 0903 	add.w	r9, r4, r3
 80060f6:	f000 fdd3 	bl	8006ca0 <_sbrk_r>
 80060fa:	4581      	cmp	r9, r0
 80060fc:	d13f      	bne.n	800617e <_malloc_r+0xe6>
 80060fe:	6821      	ldr	r1, [r4, #0]
 8006100:	1a6d      	subs	r5, r5, r1
 8006102:	4629      	mov	r1, r5
 8006104:	4638      	mov	r0, r7
 8006106:	f7ff ffa7 	bl	8006058 <sbrk_aligned>
 800610a:	3001      	adds	r0, #1
 800610c:	d037      	beq.n	800617e <_malloc_r+0xe6>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	442b      	add	r3, r5
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	f8d8 3000 	ldr.w	r3, [r8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d038      	beq.n	800618e <_malloc_r+0xf6>
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	42a2      	cmp	r2, r4
 8006120:	d12b      	bne.n	800617a <_malloc_r+0xe2>
 8006122:	2200      	movs	r2, #0
 8006124:	605a      	str	r2, [r3, #4]
 8006126:	e00f      	b.n	8006148 <_malloc_r+0xb0>
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	1b52      	subs	r2, r2, r5
 800612c:	d41f      	bmi.n	800616e <_malloc_r+0xd6>
 800612e:	2a0b      	cmp	r2, #11
 8006130:	d917      	bls.n	8006162 <_malloc_r+0xca>
 8006132:	1961      	adds	r1, r4, r5
 8006134:	42a3      	cmp	r3, r4
 8006136:	6025      	str	r5, [r4, #0]
 8006138:	bf18      	it	ne
 800613a:	6059      	strne	r1, [r3, #4]
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	bf08      	it	eq
 8006140:	f8c8 1000 	streq.w	r1, [r8]
 8006144:	5162      	str	r2, [r4, r5]
 8006146:	604b      	str	r3, [r1, #4]
 8006148:	4638      	mov	r0, r7
 800614a:	f104 060b 	add.w	r6, r4, #11
 800614e:	f000 f829 	bl	80061a4 <__malloc_unlock>
 8006152:	f026 0607 	bic.w	r6, r6, #7
 8006156:	1d23      	adds	r3, r4, #4
 8006158:	1af2      	subs	r2, r6, r3
 800615a:	d0ae      	beq.n	80060ba <_malloc_r+0x22>
 800615c:	1b9b      	subs	r3, r3, r6
 800615e:	50a3      	str	r3, [r4, r2]
 8006160:	e7ab      	b.n	80060ba <_malloc_r+0x22>
 8006162:	42a3      	cmp	r3, r4
 8006164:	6862      	ldr	r2, [r4, #4]
 8006166:	d1dd      	bne.n	8006124 <_malloc_r+0x8c>
 8006168:	f8c8 2000 	str.w	r2, [r8]
 800616c:	e7ec      	b.n	8006148 <_malloc_r+0xb0>
 800616e:	4623      	mov	r3, r4
 8006170:	6864      	ldr	r4, [r4, #4]
 8006172:	e7ac      	b.n	80060ce <_malloc_r+0x36>
 8006174:	4634      	mov	r4, r6
 8006176:	6876      	ldr	r6, [r6, #4]
 8006178:	e7b4      	b.n	80060e4 <_malloc_r+0x4c>
 800617a:	4613      	mov	r3, r2
 800617c:	e7cc      	b.n	8006118 <_malloc_r+0x80>
 800617e:	230c      	movs	r3, #12
 8006180:	603b      	str	r3, [r7, #0]
 8006182:	4638      	mov	r0, r7
 8006184:	f000 f80e 	bl	80061a4 <__malloc_unlock>
 8006188:	e797      	b.n	80060ba <_malloc_r+0x22>
 800618a:	6025      	str	r5, [r4, #0]
 800618c:	e7dc      	b.n	8006148 <_malloc_r+0xb0>
 800618e:	605b      	str	r3, [r3, #4]
 8006190:	deff      	udf	#255	; 0xff
 8006192:	bf00      	nop
 8006194:	2000049c 	.word	0x2000049c

08006198 <__malloc_lock>:
 8006198:	4801      	ldr	r0, [pc, #4]	; (80061a0 <__malloc_lock+0x8>)
 800619a:	f7ff bf0e 	b.w	8005fba <__retarget_lock_acquire_recursive>
 800619e:	bf00      	nop
 80061a0:	20000498 	.word	0x20000498

080061a4 <__malloc_unlock>:
 80061a4:	4801      	ldr	r0, [pc, #4]	; (80061ac <__malloc_unlock+0x8>)
 80061a6:	f7ff bf09 	b.w	8005fbc <__retarget_lock_release_recursive>
 80061aa:	bf00      	nop
 80061ac:	20000498 	.word	0x20000498

080061b0 <__ssputs_r>:
 80061b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	688e      	ldr	r6, [r1, #8]
 80061b6:	461f      	mov	r7, r3
 80061b8:	42be      	cmp	r6, r7
 80061ba:	680b      	ldr	r3, [r1, #0]
 80061bc:	4682      	mov	sl, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	4690      	mov	r8, r2
 80061c2:	d82c      	bhi.n	800621e <__ssputs_r+0x6e>
 80061c4:	898a      	ldrh	r2, [r1, #12]
 80061c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061ca:	d026      	beq.n	800621a <__ssputs_r+0x6a>
 80061cc:	6965      	ldr	r5, [r4, #20]
 80061ce:	6909      	ldr	r1, [r1, #16]
 80061d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061d4:	eba3 0901 	sub.w	r9, r3, r1
 80061d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061dc:	1c7b      	adds	r3, r7, #1
 80061de:	444b      	add	r3, r9
 80061e0:	106d      	asrs	r5, r5, #1
 80061e2:	429d      	cmp	r5, r3
 80061e4:	bf38      	it	cc
 80061e6:	461d      	movcc	r5, r3
 80061e8:	0553      	lsls	r3, r2, #21
 80061ea:	d527      	bpl.n	800623c <__ssputs_r+0x8c>
 80061ec:	4629      	mov	r1, r5
 80061ee:	f7ff ff53 	bl	8006098 <_malloc_r>
 80061f2:	4606      	mov	r6, r0
 80061f4:	b360      	cbz	r0, 8006250 <__ssputs_r+0xa0>
 80061f6:	6921      	ldr	r1, [r4, #16]
 80061f8:	464a      	mov	r2, r9
 80061fa:	f000 fd61 	bl	8006cc0 <memcpy>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	6126      	str	r6, [r4, #16]
 800620c:	6165      	str	r5, [r4, #20]
 800620e:	444e      	add	r6, r9
 8006210:	eba5 0509 	sub.w	r5, r5, r9
 8006214:	6026      	str	r6, [r4, #0]
 8006216:	60a5      	str	r5, [r4, #8]
 8006218:	463e      	mov	r6, r7
 800621a:	42be      	cmp	r6, r7
 800621c:	d900      	bls.n	8006220 <__ssputs_r+0x70>
 800621e:	463e      	mov	r6, r7
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	4632      	mov	r2, r6
 8006224:	4641      	mov	r1, r8
 8006226:	f000 fcff 	bl	8006c28 <memmove>
 800622a:	68a3      	ldr	r3, [r4, #8]
 800622c:	1b9b      	subs	r3, r3, r6
 800622e:	60a3      	str	r3, [r4, #8]
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	4433      	add	r3, r6
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	2000      	movs	r0, #0
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	462a      	mov	r2, r5
 800623e:	f000 fd4d 	bl	8006cdc <_realloc_r>
 8006242:	4606      	mov	r6, r0
 8006244:	2800      	cmp	r0, #0
 8006246:	d1e0      	bne.n	800620a <__ssputs_r+0x5a>
 8006248:	6921      	ldr	r1, [r4, #16]
 800624a:	4650      	mov	r0, sl
 800624c:	f7ff feb8 	bl	8005fc0 <_free_r>
 8006250:	230c      	movs	r3, #12
 8006252:	f8ca 3000 	str.w	r3, [sl]
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	e7e9      	b.n	8006238 <__ssputs_r+0x88>

08006264 <_svfiprintf_r>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	4698      	mov	r8, r3
 800626a:	898b      	ldrh	r3, [r1, #12]
 800626c:	061b      	lsls	r3, r3, #24
 800626e:	b09d      	sub	sp, #116	; 0x74
 8006270:	4607      	mov	r7, r0
 8006272:	460d      	mov	r5, r1
 8006274:	4614      	mov	r4, r2
 8006276:	d50e      	bpl.n	8006296 <_svfiprintf_r+0x32>
 8006278:	690b      	ldr	r3, [r1, #16]
 800627a:	b963      	cbnz	r3, 8006296 <_svfiprintf_r+0x32>
 800627c:	2140      	movs	r1, #64	; 0x40
 800627e:	f7ff ff0b 	bl	8006098 <_malloc_r>
 8006282:	6028      	str	r0, [r5, #0]
 8006284:	6128      	str	r0, [r5, #16]
 8006286:	b920      	cbnz	r0, 8006292 <_svfiprintf_r+0x2e>
 8006288:	230c      	movs	r3, #12
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	f04f 30ff 	mov.w	r0, #4294967295
 8006290:	e0d0      	b.n	8006434 <_svfiprintf_r+0x1d0>
 8006292:	2340      	movs	r3, #64	; 0x40
 8006294:	616b      	str	r3, [r5, #20]
 8006296:	2300      	movs	r3, #0
 8006298:	9309      	str	r3, [sp, #36]	; 0x24
 800629a:	2320      	movs	r3, #32
 800629c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80062a4:	2330      	movs	r3, #48	; 0x30
 80062a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800644c <_svfiprintf_r+0x1e8>
 80062aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ae:	f04f 0901 	mov.w	r9, #1
 80062b2:	4623      	mov	r3, r4
 80062b4:	469a      	mov	sl, r3
 80062b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062ba:	b10a      	cbz	r2, 80062c0 <_svfiprintf_r+0x5c>
 80062bc:	2a25      	cmp	r2, #37	; 0x25
 80062be:	d1f9      	bne.n	80062b4 <_svfiprintf_r+0x50>
 80062c0:	ebba 0b04 	subs.w	fp, sl, r4
 80062c4:	d00b      	beq.n	80062de <_svfiprintf_r+0x7a>
 80062c6:	465b      	mov	r3, fp
 80062c8:	4622      	mov	r2, r4
 80062ca:	4629      	mov	r1, r5
 80062cc:	4638      	mov	r0, r7
 80062ce:	f7ff ff6f 	bl	80061b0 <__ssputs_r>
 80062d2:	3001      	adds	r0, #1
 80062d4:	f000 80a9 	beq.w	800642a <_svfiprintf_r+0x1c6>
 80062d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062da:	445a      	add	r2, fp
 80062dc:	9209      	str	r2, [sp, #36]	; 0x24
 80062de:	f89a 3000 	ldrb.w	r3, [sl]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 80a1 	beq.w	800642a <_svfiprintf_r+0x1c6>
 80062e8:	2300      	movs	r3, #0
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f2:	f10a 0a01 	add.w	sl, sl, #1
 80062f6:	9304      	str	r3, [sp, #16]
 80062f8:	9307      	str	r3, [sp, #28]
 80062fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062fe:	931a      	str	r3, [sp, #104]	; 0x68
 8006300:	4654      	mov	r4, sl
 8006302:	2205      	movs	r2, #5
 8006304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006308:	4850      	ldr	r0, [pc, #320]	; (800644c <_svfiprintf_r+0x1e8>)
 800630a:	f7f9 ff99 	bl	8000240 <memchr>
 800630e:	9a04      	ldr	r2, [sp, #16]
 8006310:	b9d8      	cbnz	r0, 800634a <_svfiprintf_r+0xe6>
 8006312:	06d0      	lsls	r0, r2, #27
 8006314:	bf44      	itt	mi
 8006316:	2320      	movmi	r3, #32
 8006318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800631c:	0711      	lsls	r1, r2, #28
 800631e:	bf44      	itt	mi
 8006320:	232b      	movmi	r3, #43	; 0x2b
 8006322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006326:	f89a 3000 	ldrb.w	r3, [sl]
 800632a:	2b2a      	cmp	r3, #42	; 0x2a
 800632c:	d015      	beq.n	800635a <_svfiprintf_r+0xf6>
 800632e:	9a07      	ldr	r2, [sp, #28]
 8006330:	4654      	mov	r4, sl
 8006332:	2000      	movs	r0, #0
 8006334:	f04f 0c0a 	mov.w	ip, #10
 8006338:	4621      	mov	r1, r4
 800633a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800633e:	3b30      	subs	r3, #48	; 0x30
 8006340:	2b09      	cmp	r3, #9
 8006342:	d94d      	bls.n	80063e0 <_svfiprintf_r+0x17c>
 8006344:	b1b0      	cbz	r0, 8006374 <_svfiprintf_r+0x110>
 8006346:	9207      	str	r2, [sp, #28]
 8006348:	e014      	b.n	8006374 <_svfiprintf_r+0x110>
 800634a:	eba0 0308 	sub.w	r3, r0, r8
 800634e:	fa09 f303 	lsl.w	r3, r9, r3
 8006352:	4313      	orrs	r3, r2
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	46a2      	mov	sl, r4
 8006358:	e7d2      	b.n	8006300 <_svfiprintf_r+0x9c>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	1d19      	adds	r1, r3, #4
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	9103      	str	r1, [sp, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	bfbb      	ittet	lt
 8006366:	425b      	neglt	r3, r3
 8006368:	f042 0202 	orrlt.w	r2, r2, #2
 800636c:	9307      	strge	r3, [sp, #28]
 800636e:	9307      	strlt	r3, [sp, #28]
 8006370:	bfb8      	it	lt
 8006372:	9204      	strlt	r2, [sp, #16]
 8006374:	7823      	ldrb	r3, [r4, #0]
 8006376:	2b2e      	cmp	r3, #46	; 0x2e
 8006378:	d10c      	bne.n	8006394 <_svfiprintf_r+0x130>
 800637a:	7863      	ldrb	r3, [r4, #1]
 800637c:	2b2a      	cmp	r3, #42	; 0x2a
 800637e:	d134      	bne.n	80063ea <_svfiprintf_r+0x186>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	9203      	str	r2, [sp, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	bfb8      	it	lt
 800638c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006390:	3402      	adds	r4, #2
 8006392:	9305      	str	r3, [sp, #20]
 8006394:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800645c <_svfiprintf_r+0x1f8>
 8006398:	7821      	ldrb	r1, [r4, #0]
 800639a:	2203      	movs	r2, #3
 800639c:	4650      	mov	r0, sl
 800639e:	f7f9 ff4f 	bl	8000240 <memchr>
 80063a2:	b138      	cbz	r0, 80063b4 <_svfiprintf_r+0x150>
 80063a4:	9b04      	ldr	r3, [sp, #16]
 80063a6:	eba0 000a 	sub.w	r0, r0, sl
 80063aa:	2240      	movs	r2, #64	; 0x40
 80063ac:	4082      	lsls	r2, r0
 80063ae:	4313      	orrs	r3, r2
 80063b0:	3401      	adds	r4, #1
 80063b2:	9304      	str	r3, [sp, #16]
 80063b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b8:	4825      	ldr	r0, [pc, #148]	; (8006450 <_svfiprintf_r+0x1ec>)
 80063ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063be:	2206      	movs	r2, #6
 80063c0:	f7f9 ff3e 	bl	8000240 <memchr>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d038      	beq.n	800643a <_svfiprintf_r+0x1d6>
 80063c8:	4b22      	ldr	r3, [pc, #136]	; (8006454 <_svfiprintf_r+0x1f0>)
 80063ca:	bb1b      	cbnz	r3, 8006414 <_svfiprintf_r+0x1b0>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	3307      	adds	r3, #7
 80063d0:	f023 0307 	bic.w	r3, r3, #7
 80063d4:	3308      	adds	r3, #8
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	4433      	add	r3, r6
 80063dc:	9309      	str	r3, [sp, #36]	; 0x24
 80063de:	e768      	b.n	80062b2 <_svfiprintf_r+0x4e>
 80063e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e4:	460c      	mov	r4, r1
 80063e6:	2001      	movs	r0, #1
 80063e8:	e7a6      	b.n	8006338 <_svfiprintf_r+0xd4>
 80063ea:	2300      	movs	r3, #0
 80063ec:	3401      	adds	r4, #1
 80063ee:	9305      	str	r3, [sp, #20]
 80063f0:	4619      	mov	r1, r3
 80063f2:	f04f 0c0a 	mov.w	ip, #10
 80063f6:	4620      	mov	r0, r4
 80063f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063fc:	3a30      	subs	r2, #48	; 0x30
 80063fe:	2a09      	cmp	r2, #9
 8006400:	d903      	bls.n	800640a <_svfiprintf_r+0x1a6>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0c6      	beq.n	8006394 <_svfiprintf_r+0x130>
 8006406:	9105      	str	r1, [sp, #20]
 8006408:	e7c4      	b.n	8006394 <_svfiprintf_r+0x130>
 800640a:	fb0c 2101 	mla	r1, ip, r1, r2
 800640e:	4604      	mov	r4, r0
 8006410:	2301      	movs	r3, #1
 8006412:	e7f0      	b.n	80063f6 <_svfiprintf_r+0x192>
 8006414:	ab03      	add	r3, sp, #12
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	462a      	mov	r2, r5
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <_svfiprintf_r+0x1f4>)
 800641c:	a904      	add	r1, sp, #16
 800641e:	4638      	mov	r0, r7
 8006420:	f3af 8000 	nop.w
 8006424:	1c42      	adds	r2, r0, #1
 8006426:	4606      	mov	r6, r0
 8006428:	d1d6      	bne.n	80063d8 <_svfiprintf_r+0x174>
 800642a:	89ab      	ldrh	r3, [r5, #12]
 800642c:	065b      	lsls	r3, r3, #25
 800642e:	f53f af2d 	bmi.w	800628c <_svfiprintf_r+0x28>
 8006432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006434:	b01d      	add	sp, #116	; 0x74
 8006436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643a:	ab03      	add	r3, sp, #12
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	462a      	mov	r2, r5
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <_svfiprintf_r+0x1f4>)
 8006442:	a904      	add	r1, sp, #16
 8006444:	4638      	mov	r0, r7
 8006446:	f000 f9bd 	bl	80067c4 <_printf_i>
 800644a:	e7eb      	b.n	8006424 <_svfiprintf_r+0x1c0>
 800644c:	0800717c 	.word	0x0800717c
 8006450:	08007186 	.word	0x08007186
 8006454:	00000000 	.word	0x00000000
 8006458:	080061b1 	.word	0x080061b1
 800645c:	08007182 	.word	0x08007182

08006460 <__sfputc_r>:
 8006460:	6893      	ldr	r3, [r2, #8]
 8006462:	3b01      	subs	r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	b410      	push	{r4}
 8006468:	6093      	str	r3, [r2, #8]
 800646a:	da08      	bge.n	800647e <__sfputc_r+0x1e>
 800646c:	6994      	ldr	r4, [r2, #24]
 800646e:	42a3      	cmp	r3, r4
 8006470:	db01      	blt.n	8006476 <__sfputc_r+0x16>
 8006472:	290a      	cmp	r1, #10
 8006474:	d103      	bne.n	800647e <__sfputc_r+0x1e>
 8006476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800647a:	f7ff bc90 	b.w	8005d9e <__swbuf_r>
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	1c58      	adds	r0, r3, #1
 8006482:	6010      	str	r0, [r2, #0]
 8006484:	7019      	strb	r1, [r3, #0]
 8006486:	4608      	mov	r0, r1
 8006488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800648c:	4770      	bx	lr

0800648e <__sfputs_r>:
 800648e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006490:	4606      	mov	r6, r0
 8006492:	460f      	mov	r7, r1
 8006494:	4614      	mov	r4, r2
 8006496:	18d5      	adds	r5, r2, r3
 8006498:	42ac      	cmp	r4, r5
 800649a:	d101      	bne.n	80064a0 <__sfputs_r+0x12>
 800649c:	2000      	movs	r0, #0
 800649e:	e007      	b.n	80064b0 <__sfputs_r+0x22>
 80064a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a4:	463a      	mov	r2, r7
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ffda 	bl	8006460 <__sfputc_r>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d1f3      	bne.n	8006498 <__sfputs_r+0xa>
 80064b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064b4 <_vfiprintf_r>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	460d      	mov	r5, r1
 80064ba:	b09d      	sub	sp, #116	; 0x74
 80064bc:	4614      	mov	r4, r2
 80064be:	4698      	mov	r8, r3
 80064c0:	4606      	mov	r6, r0
 80064c2:	b118      	cbz	r0, 80064cc <_vfiprintf_r+0x18>
 80064c4:	6a03      	ldr	r3, [r0, #32]
 80064c6:	b90b      	cbnz	r3, 80064cc <_vfiprintf_r+0x18>
 80064c8:	f7ff fb62 	bl	8005b90 <__sinit>
 80064cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ce:	07d9      	lsls	r1, r3, #31
 80064d0:	d405      	bmi.n	80064de <_vfiprintf_r+0x2a>
 80064d2:	89ab      	ldrh	r3, [r5, #12]
 80064d4:	059a      	lsls	r2, r3, #22
 80064d6:	d402      	bmi.n	80064de <_vfiprintf_r+0x2a>
 80064d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064da:	f7ff fd6e 	bl	8005fba <__retarget_lock_acquire_recursive>
 80064de:	89ab      	ldrh	r3, [r5, #12]
 80064e0:	071b      	lsls	r3, r3, #28
 80064e2:	d501      	bpl.n	80064e8 <_vfiprintf_r+0x34>
 80064e4:	692b      	ldr	r3, [r5, #16]
 80064e6:	b99b      	cbnz	r3, 8006510 <_vfiprintf_r+0x5c>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7ff fc94 	bl	8005e18 <__swsetup_r>
 80064f0:	b170      	cbz	r0, 8006510 <_vfiprintf_r+0x5c>
 80064f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064f4:	07dc      	lsls	r4, r3, #31
 80064f6:	d504      	bpl.n	8006502 <_vfiprintf_r+0x4e>
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	b01d      	add	sp, #116	; 0x74
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	0598      	lsls	r0, r3, #22
 8006506:	d4f7      	bmi.n	80064f8 <_vfiprintf_r+0x44>
 8006508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800650a:	f7ff fd57 	bl	8005fbc <__retarget_lock_release_recursive>
 800650e:	e7f3      	b.n	80064f8 <_vfiprintf_r+0x44>
 8006510:	2300      	movs	r3, #0
 8006512:	9309      	str	r3, [sp, #36]	; 0x24
 8006514:	2320      	movs	r3, #32
 8006516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800651a:	f8cd 800c 	str.w	r8, [sp, #12]
 800651e:	2330      	movs	r3, #48	; 0x30
 8006520:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80066d4 <_vfiprintf_r+0x220>
 8006524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006528:	f04f 0901 	mov.w	r9, #1
 800652c:	4623      	mov	r3, r4
 800652e:	469a      	mov	sl, r3
 8006530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006534:	b10a      	cbz	r2, 800653a <_vfiprintf_r+0x86>
 8006536:	2a25      	cmp	r2, #37	; 0x25
 8006538:	d1f9      	bne.n	800652e <_vfiprintf_r+0x7a>
 800653a:	ebba 0b04 	subs.w	fp, sl, r4
 800653e:	d00b      	beq.n	8006558 <_vfiprintf_r+0xa4>
 8006540:	465b      	mov	r3, fp
 8006542:	4622      	mov	r2, r4
 8006544:	4629      	mov	r1, r5
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff ffa1 	bl	800648e <__sfputs_r>
 800654c:	3001      	adds	r0, #1
 800654e:	f000 80a9 	beq.w	80066a4 <_vfiprintf_r+0x1f0>
 8006552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006554:	445a      	add	r2, fp
 8006556:	9209      	str	r2, [sp, #36]	; 0x24
 8006558:	f89a 3000 	ldrb.w	r3, [sl]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80a1 	beq.w	80066a4 <_vfiprintf_r+0x1f0>
 8006562:	2300      	movs	r3, #0
 8006564:	f04f 32ff 	mov.w	r2, #4294967295
 8006568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656c:	f10a 0a01 	add.w	sl, sl, #1
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	9307      	str	r3, [sp, #28]
 8006574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006578:	931a      	str	r3, [sp, #104]	; 0x68
 800657a:	4654      	mov	r4, sl
 800657c:	2205      	movs	r2, #5
 800657e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006582:	4854      	ldr	r0, [pc, #336]	; (80066d4 <_vfiprintf_r+0x220>)
 8006584:	f7f9 fe5c 	bl	8000240 <memchr>
 8006588:	9a04      	ldr	r2, [sp, #16]
 800658a:	b9d8      	cbnz	r0, 80065c4 <_vfiprintf_r+0x110>
 800658c:	06d1      	lsls	r1, r2, #27
 800658e:	bf44      	itt	mi
 8006590:	2320      	movmi	r3, #32
 8006592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006596:	0713      	lsls	r3, r2, #28
 8006598:	bf44      	itt	mi
 800659a:	232b      	movmi	r3, #43	; 0x2b
 800659c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065a0:	f89a 3000 	ldrb.w	r3, [sl]
 80065a4:	2b2a      	cmp	r3, #42	; 0x2a
 80065a6:	d015      	beq.n	80065d4 <_vfiprintf_r+0x120>
 80065a8:	9a07      	ldr	r2, [sp, #28]
 80065aa:	4654      	mov	r4, sl
 80065ac:	2000      	movs	r0, #0
 80065ae:	f04f 0c0a 	mov.w	ip, #10
 80065b2:	4621      	mov	r1, r4
 80065b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b8:	3b30      	subs	r3, #48	; 0x30
 80065ba:	2b09      	cmp	r3, #9
 80065bc:	d94d      	bls.n	800665a <_vfiprintf_r+0x1a6>
 80065be:	b1b0      	cbz	r0, 80065ee <_vfiprintf_r+0x13a>
 80065c0:	9207      	str	r2, [sp, #28]
 80065c2:	e014      	b.n	80065ee <_vfiprintf_r+0x13a>
 80065c4:	eba0 0308 	sub.w	r3, r0, r8
 80065c8:	fa09 f303 	lsl.w	r3, r9, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	46a2      	mov	sl, r4
 80065d2:	e7d2      	b.n	800657a <_vfiprintf_r+0xc6>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	1d19      	adds	r1, r3, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	9103      	str	r1, [sp, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	bfbb      	ittet	lt
 80065e0:	425b      	neglt	r3, r3
 80065e2:	f042 0202 	orrlt.w	r2, r2, #2
 80065e6:	9307      	strge	r3, [sp, #28]
 80065e8:	9307      	strlt	r3, [sp, #28]
 80065ea:	bfb8      	it	lt
 80065ec:	9204      	strlt	r2, [sp, #16]
 80065ee:	7823      	ldrb	r3, [r4, #0]
 80065f0:	2b2e      	cmp	r3, #46	; 0x2e
 80065f2:	d10c      	bne.n	800660e <_vfiprintf_r+0x15a>
 80065f4:	7863      	ldrb	r3, [r4, #1]
 80065f6:	2b2a      	cmp	r3, #42	; 0x2a
 80065f8:	d134      	bne.n	8006664 <_vfiprintf_r+0x1b0>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	1d1a      	adds	r2, r3, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	9203      	str	r2, [sp, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	bfb8      	it	lt
 8006606:	f04f 33ff 	movlt.w	r3, #4294967295
 800660a:	3402      	adds	r4, #2
 800660c:	9305      	str	r3, [sp, #20]
 800660e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80066e4 <_vfiprintf_r+0x230>
 8006612:	7821      	ldrb	r1, [r4, #0]
 8006614:	2203      	movs	r2, #3
 8006616:	4650      	mov	r0, sl
 8006618:	f7f9 fe12 	bl	8000240 <memchr>
 800661c:	b138      	cbz	r0, 800662e <_vfiprintf_r+0x17a>
 800661e:	9b04      	ldr	r3, [sp, #16]
 8006620:	eba0 000a 	sub.w	r0, r0, sl
 8006624:	2240      	movs	r2, #64	; 0x40
 8006626:	4082      	lsls	r2, r0
 8006628:	4313      	orrs	r3, r2
 800662a:	3401      	adds	r4, #1
 800662c:	9304      	str	r3, [sp, #16]
 800662e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006632:	4829      	ldr	r0, [pc, #164]	; (80066d8 <_vfiprintf_r+0x224>)
 8006634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006638:	2206      	movs	r2, #6
 800663a:	f7f9 fe01 	bl	8000240 <memchr>
 800663e:	2800      	cmp	r0, #0
 8006640:	d03f      	beq.n	80066c2 <_vfiprintf_r+0x20e>
 8006642:	4b26      	ldr	r3, [pc, #152]	; (80066dc <_vfiprintf_r+0x228>)
 8006644:	bb1b      	cbnz	r3, 800668e <_vfiprintf_r+0x1da>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	3307      	adds	r3, #7
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	3308      	adds	r3, #8
 8006650:	9303      	str	r3, [sp, #12]
 8006652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006654:	443b      	add	r3, r7
 8006656:	9309      	str	r3, [sp, #36]	; 0x24
 8006658:	e768      	b.n	800652c <_vfiprintf_r+0x78>
 800665a:	fb0c 3202 	mla	r2, ip, r2, r3
 800665e:	460c      	mov	r4, r1
 8006660:	2001      	movs	r0, #1
 8006662:	e7a6      	b.n	80065b2 <_vfiprintf_r+0xfe>
 8006664:	2300      	movs	r3, #0
 8006666:	3401      	adds	r4, #1
 8006668:	9305      	str	r3, [sp, #20]
 800666a:	4619      	mov	r1, r3
 800666c:	f04f 0c0a 	mov.w	ip, #10
 8006670:	4620      	mov	r0, r4
 8006672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006676:	3a30      	subs	r2, #48	; 0x30
 8006678:	2a09      	cmp	r2, #9
 800667a:	d903      	bls.n	8006684 <_vfiprintf_r+0x1d0>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0c6      	beq.n	800660e <_vfiprintf_r+0x15a>
 8006680:	9105      	str	r1, [sp, #20]
 8006682:	e7c4      	b.n	800660e <_vfiprintf_r+0x15a>
 8006684:	fb0c 2101 	mla	r1, ip, r1, r2
 8006688:	4604      	mov	r4, r0
 800668a:	2301      	movs	r3, #1
 800668c:	e7f0      	b.n	8006670 <_vfiprintf_r+0x1bc>
 800668e:	ab03      	add	r3, sp, #12
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	462a      	mov	r2, r5
 8006694:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <_vfiprintf_r+0x22c>)
 8006696:	a904      	add	r1, sp, #16
 8006698:	4630      	mov	r0, r6
 800669a:	f3af 8000 	nop.w
 800669e:	4607      	mov	r7, r0
 80066a0:	1c78      	adds	r0, r7, #1
 80066a2:	d1d6      	bne.n	8006652 <_vfiprintf_r+0x19e>
 80066a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	d405      	bmi.n	80066b6 <_vfiprintf_r+0x202>
 80066aa:	89ab      	ldrh	r3, [r5, #12]
 80066ac:	059a      	lsls	r2, r3, #22
 80066ae:	d402      	bmi.n	80066b6 <_vfiprintf_r+0x202>
 80066b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066b2:	f7ff fc83 	bl	8005fbc <__retarget_lock_release_recursive>
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	065b      	lsls	r3, r3, #25
 80066ba:	f53f af1d 	bmi.w	80064f8 <_vfiprintf_r+0x44>
 80066be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066c0:	e71c      	b.n	80064fc <_vfiprintf_r+0x48>
 80066c2:	ab03      	add	r3, sp, #12
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	462a      	mov	r2, r5
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <_vfiprintf_r+0x22c>)
 80066ca:	a904      	add	r1, sp, #16
 80066cc:	4630      	mov	r0, r6
 80066ce:	f000 f879 	bl	80067c4 <_printf_i>
 80066d2:	e7e4      	b.n	800669e <_vfiprintf_r+0x1ea>
 80066d4:	0800717c 	.word	0x0800717c
 80066d8:	08007186 	.word	0x08007186
 80066dc:	00000000 	.word	0x00000000
 80066e0:	0800648f 	.word	0x0800648f
 80066e4:	08007182 	.word	0x08007182

080066e8 <_printf_common>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	4616      	mov	r6, r2
 80066ee:	4699      	mov	r9, r3
 80066f0:	688a      	ldr	r2, [r1, #8]
 80066f2:	690b      	ldr	r3, [r1, #16]
 80066f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	bfb8      	it	lt
 80066fc:	4613      	movlt	r3, r2
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006704:	4607      	mov	r7, r0
 8006706:	460c      	mov	r4, r1
 8006708:	b10a      	cbz	r2, 800670e <_printf_common+0x26>
 800670a:	3301      	adds	r3, #1
 800670c:	6033      	str	r3, [r6, #0]
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	0699      	lsls	r1, r3, #26
 8006712:	bf42      	ittt	mi
 8006714:	6833      	ldrmi	r3, [r6, #0]
 8006716:	3302      	addmi	r3, #2
 8006718:	6033      	strmi	r3, [r6, #0]
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	f015 0506 	ands.w	r5, r5, #6
 8006720:	d106      	bne.n	8006730 <_printf_common+0x48>
 8006722:	f104 0a19 	add.w	sl, r4, #25
 8006726:	68e3      	ldr	r3, [r4, #12]
 8006728:	6832      	ldr	r2, [r6, #0]
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	42ab      	cmp	r3, r5
 800672e:	dc26      	bgt.n	800677e <_printf_common+0x96>
 8006730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006734:	1e13      	subs	r3, r2, #0
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	bf18      	it	ne
 800673a:	2301      	movne	r3, #1
 800673c:	0692      	lsls	r2, r2, #26
 800673e:	d42b      	bmi.n	8006798 <_printf_common+0xb0>
 8006740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006744:	4649      	mov	r1, r9
 8006746:	4638      	mov	r0, r7
 8006748:	47c0      	blx	r8
 800674a:	3001      	adds	r0, #1
 800674c:	d01e      	beq.n	800678c <_printf_common+0xa4>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	6922      	ldr	r2, [r4, #16]
 8006752:	f003 0306 	and.w	r3, r3, #6
 8006756:	2b04      	cmp	r3, #4
 8006758:	bf02      	ittt	eq
 800675a:	68e5      	ldreq	r5, [r4, #12]
 800675c:	6833      	ldreq	r3, [r6, #0]
 800675e:	1aed      	subeq	r5, r5, r3
 8006760:	68a3      	ldr	r3, [r4, #8]
 8006762:	bf0c      	ite	eq
 8006764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006768:	2500      	movne	r5, #0
 800676a:	4293      	cmp	r3, r2
 800676c:	bfc4      	itt	gt
 800676e:	1a9b      	subgt	r3, r3, r2
 8006770:	18ed      	addgt	r5, r5, r3
 8006772:	2600      	movs	r6, #0
 8006774:	341a      	adds	r4, #26
 8006776:	42b5      	cmp	r5, r6
 8006778:	d11a      	bne.n	80067b0 <_printf_common+0xc8>
 800677a:	2000      	movs	r0, #0
 800677c:	e008      	b.n	8006790 <_printf_common+0xa8>
 800677e:	2301      	movs	r3, #1
 8006780:	4652      	mov	r2, sl
 8006782:	4649      	mov	r1, r9
 8006784:	4638      	mov	r0, r7
 8006786:	47c0      	blx	r8
 8006788:	3001      	adds	r0, #1
 800678a:	d103      	bne.n	8006794 <_printf_common+0xac>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006794:	3501      	adds	r5, #1
 8006796:	e7c6      	b.n	8006726 <_printf_common+0x3e>
 8006798:	18e1      	adds	r1, r4, r3
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	2030      	movs	r0, #48	; 0x30
 800679e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067a2:	4422      	add	r2, r4
 80067a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067ac:	3302      	adds	r3, #2
 80067ae:	e7c7      	b.n	8006740 <_printf_common+0x58>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4622      	mov	r2, r4
 80067b4:	4649      	mov	r1, r9
 80067b6:	4638      	mov	r0, r7
 80067b8:	47c0      	blx	r8
 80067ba:	3001      	adds	r0, #1
 80067bc:	d0e6      	beq.n	800678c <_printf_common+0xa4>
 80067be:	3601      	adds	r6, #1
 80067c0:	e7d9      	b.n	8006776 <_printf_common+0x8e>
	...

080067c4 <_printf_i>:
 80067c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	7e0f      	ldrb	r7, [r1, #24]
 80067ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067cc:	2f78      	cmp	r7, #120	; 0x78
 80067ce:	4691      	mov	r9, r2
 80067d0:	4680      	mov	r8, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	469a      	mov	sl, r3
 80067d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067da:	d807      	bhi.n	80067ec <_printf_i+0x28>
 80067dc:	2f62      	cmp	r7, #98	; 0x62
 80067de:	d80a      	bhi.n	80067f6 <_printf_i+0x32>
 80067e0:	2f00      	cmp	r7, #0
 80067e2:	f000 80d4 	beq.w	800698e <_printf_i+0x1ca>
 80067e6:	2f58      	cmp	r7, #88	; 0x58
 80067e8:	f000 80c0 	beq.w	800696c <_printf_i+0x1a8>
 80067ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067f4:	e03a      	b.n	800686c <_printf_i+0xa8>
 80067f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067fa:	2b15      	cmp	r3, #21
 80067fc:	d8f6      	bhi.n	80067ec <_printf_i+0x28>
 80067fe:	a101      	add	r1, pc, #4	; (adr r1, 8006804 <_printf_i+0x40>)
 8006800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006804:	0800685d 	.word	0x0800685d
 8006808:	08006871 	.word	0x08006871
 800680c:	080067ed 	.word	0x080067ed
 8006810:	080067ed 	.word	0x080067ed
 8006814:	080067ed 	.word	0x080067ed
 8006818:	080067ed 	.word	0x080067ed
 800681c:	08006871 	.word	0x08006871
 8006820:	080067ed 	.word	0x080067ed
 8006824:	080067ed 	.word	0x080067ed
 8006828:	080067ed 	.word	0x080067ed
 800682c:	080067ed 	.word	0x080067ed
 8006830:	08006975 	.word	0x08006975
 8006834:	0800689d 	.word	0x0800689d
 8006838:	0800692f 	.word	0x0800692f
 800683c:	080067ed 	.word	0x080067ed
 8006840:	080067ed 	.word	0x080067ed
 8006844:	08006997 	.word	0x08006997
 8006848:	080067ed 	.word	0x080067ed
 800684c:	0800689d 	.word	0x0800689d
 8006850:	080067ed 	.word	0x080067ed
 8006854:	080067ed 	.word	0x080067ed
 8006858:	08006937 	.word	0x08006937
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	1d1a      	adds	r2, r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	602a      	str	r2, [r5, #0]
 8006864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800686c:	2301      	movs	r3, #1
 800686e:	e09f      	b.n	80069b0 <_printf_i+0x1ec>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	682b      	ldr	r3, [r5, #0]
 8006874:	0607      	lsls	r7, r0, #24
 8006876:	f103 0104 	add.w	r1, r3, #4
 800687a:	6029      	str	r1, [r5, #0]
 800687c:	d501      	bpl.n	8006882 <_printf_i+0xbe>
 800687e:	681e      	ldr	r6, [r3, #0]
 8006880:	e003      	b.n	800688a <_printf_i+0xc6>
 8006882:	0646      	lsls	r6, r0, #25
 8006884:	d5fb      	bpl.n	800687e <_printf_i+0xba>
 8006886:	f9b3 6000 	ldrsh.w	r6, [r3]
 800688a:	2e00      	cmp	r6, #0
 800688c:	da03      	bge.n	8006896 <_printf_i+0xd2>
 800688e:	232d      	movs	r3, #45	; 0x2d
 8006890:	4276      	negs	r6, r6
 8006892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006896:	485a      	ldr	r0, [pc, #360]	; (8006a00 <_printf_i+0x23c>)
 8006898:	230a      	movs	r3, #10
 800689a:	e012      	b.n	80068c2 <_printf_i+0xfe>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	1d19      	adds	r1, r3, #4
 80068a2:	6029      	str	r1, [r5, #0]
 80068a4:	0605      	lsls	r5, r0, #24
 80068a6:	d501      	bpl.n	80068ac <_printf_i+0xe8>
 80068a8:	681e      	ldr	r6, [r3, #0]
 80068aa:	e002      	b.n	80068b2 <_printf_i+0xee>
 80068ac:	0641      	lsls	r1, r0, #25
 80068ae:	d5fb      	bpl.n	80068a8 <_printf_i+0xe4>
 80068b0:	881e      	ldrh	r6, [r3, #0]
 80068b2:	4853      	ldr	r0, [pc, #332]	; (8006a00 <_printf_i+0x23c>)
 80068b4:	2f6f      	cmp	r7, #111	; 0x6f
 80068b6:	bf0c      	ite	eq
 80068b8:	2308      	moveq	r3, #8
 80068ba:	230a      	movne	r3, #10
 80068bc:	2100      	movs	r1, #0
 80068be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068c2:	6865      	ldr	r5, [r4, #4]
 80068c4:	60a5      	str	r5, [r4, #8]
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	bfa2      	ittt	ge
 80068ca:	6821      	ldrge	r1, [r4, #0]
 80068cc:	f021 0104 	bicge.w	r1, r1, #4
 80068d0:	6021      	strge	r1, [r4, #0]
 80068d2:	b90e      	cbnz	r6, 80068d8 <_printf_i+0x114>
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	d04b      	beq.n	8006970 <_printf_i+0x1ac>
 80068d8:	4615      	mov	r5, r2
 80068da:	fbb6 f1f3 	udiv	r1, r6, r3
 80068de:	fb03 6711 	mls	r7, r3, r1, r6
 80068e2:	5dc7      	ldrb	r7, [r0, r7]
 80068e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068e8:	4637      	mov	r7, r6
 80068ea:	42bb      	cmp	r3, r7
 80068ec:	460e      	mov	r6, r1
 80068ee:	d9f4      	bls.n	80068da <_printf_i+0x116>
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d10b      	bne.n	800690c <_printf_i+0x148>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	07de      	lsls	r6, r3, #31
 80068f8:	d508      	bpl.n	800690c <_printf_i+0x148>
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	6861      	ldr	r1, [r4, #4]
 80068fe:	4299      	cmp	r1, r3
 8006900:	bfde      	ittt	le
 8006902:	2330      	movle	r3, #48	; 0x30
 8006904:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006908:	f105 35ff 	addle.w	r5, r5, #4294967295
 800690c:	1b52      	subs	r2, r2, r5
 800690e:	6122      	str	r2, [r4, #16]
 8006910:	f8cd a000 	str.w	sl, [sp]
 8006914:	464b      	mov	r3, r9
 8006916:	aa03      	add	r2, sp, #12
 8006918:	4621      	mov	r1, r4
 800691a:	4640      	mov	r0, r8
 800691c:	f7ff fee4 	bl	80066e8 <_printf_common>
 8006920:	3001      	adds	r0, #1
 8006922:	d14a      	bne.n	80069ba <_printf_i+0x1f6>
 8006924:	f04f 30ff 	mov.w	r0, #4294967295
 8006928:	b004      	add	sp, #16
 800692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	f043 0320 	orr.w	r3, r3, #32
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	4833      	ldr	r0, [pc, #204]	; (8006a04 <_printf_i+0x240>)
 8006938:	2778      	movs	r7, #120	; 0x78
 800693a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	6829      	ldr	r1, [r5, #0]
 8006942:	061f      	lsls	r7, r3, #24
 8006944:	f851 6b04 	ldr.w	r6, [r1], #4
 8006948:	d402      	bmi.n	8006950 <_printf_i+0x18c>
 800694a:	065f      	lsls	r7, r3, #25
 800694c:	bf48      	it	mi
 800694e:	b2b6      	uxthmi	r6, r6
 8006950:	07df      	lsls	r7, r3, #31
 8006952:	bf48      	it	mi
 8006954:	f043 0320 	orrmi.w	r3, r3, #32
 8006958:	6029      	str	r1, [r5, #0]
 800695a:	bf48      	it	mi
 800695c:	6023      	strmi	r3, [r4, #0]
 800695e:	b91e      	cbnz	r6, 8006968 <_printf_i+0x1a4>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	f023 0320 	bic.w	r3, r3, #32
 8006966:	6023      	str	r3, [r4, #0]
 8006968:	2310      	movs	r3, #16
 800696a:	e7a7      	b.n	80068bc <_printf_i+0xf8>
 800696c:	4824      	ldr	r0, [pc, #144]	; (8006a00 <_printf_i+0x23c>)
 800696e:	e7e4      	b.n	800693a <_printf_i+0x176>
 8006970:	4615      	mov	r5, r2
 8006972:	e7bd      	b.n	80068f0 <_printf_i+0x12c>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	6826      	ldr	r6, [r4, #0]
 8006978:	6961      	ldr	r1, [r4, #20]
 800697a:	1d18      	adds	r0, r3, #4
 800697c:	6028      	str	r0, [r5, #0]
 800697e:	0635      	lsls	r5, r6, #24
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	d501      	bpl.n	8006988 <_printf_i+0x1c4>
 8006984:	6019      	str	r1, [r3, #0]
 8006986:	e002      	b.n	800698e <_printf_i+0x1ca>
 8006988:	0670      	lsls	r0, r6, #25
 800698a:	d5fb      	bpl.n	8006984 <_printf_i+0x1c0>
 800698c:	8019      	strh	r1, [r3, #0]
 800698e:	2300      	movs	r3, #0
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	4615      	mov	r5, r2
 8006994:	e7bc      	b.n	8006910 <_printf_i+0x14c>
 8006996:	682b      	ldr	r3, [r5, #0]
 8006998:	1d1a      	adds	r2, r3, #4
 800699a:	602a      	str	r2, [r5, #0]
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	6862      	ldr	r2, [r4, #4]
 80069a0:	2100      	movs	r1, #0
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7f9 fc4c 	bl	8000240 <memchr>
 80069a8:	b108      	cbz	r0, 80069ae <_printf_i+0x1ea>
 80069aa:	1b40      	subs	r0, r0, r5
 80069ac:	6060      	str	r0, [r4, #4]
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	2300      	movs	r3, #0
 80069b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b8:	e7aa      	b.n	8006910 <_printf_i+0x14c>
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	462a      	mov	r2, r5
 80069be:	4649      	mov	r1, r9
 80069c0:	4640      	mov	r0, r8
 80069c2:	47d0      	blx	sl
 80069c4:	3001      	adds	r0, #1
 80069c6:	d0ad      	beq.n	8006924 <_printf_i+0x160>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	079b      	lsls	r3, r3, #30
 80069cc:	d413      	bmi.n	80069f6 <_printf_i+0x232>
 80069ce:	68e0      	ldr	r0, [r4, #12]
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	4298      	cmp	r0, r3
 80069d4:	bfb8      	it	lt
 80069d6:	4618      	movlt	r0, r3
 80069d8:	e7a6      	b.n	8006928 <_printf_i+0x164>
 80069da:	2301      	movs	r3, #1
 80069dc:	4632      	mov	r2, r6
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	47d0      	blx	sl
 80069e4:	3001      	adds	r0, #1
 80069e6:	d09d      	beq.n	8006924 <_printf_i+0x160>
 80069e8:	3501      	adds	r5, #1
 80069ea:	68e3      	ldr	r3, [r4, #12]
 80069ec:	9903      	ldr	r1, [sp, #12]
 80069ee:	1a5b      	subs	r3, r3, r1
 80069f0:	42ab      	cmp	r3, r5
 80069f2:	dcf2      	bgt.n	80069da <_printf_i+0x216>
 80069f4:	e7eb      	b.n	80069ce <_printf_i+0x20a>
 80069f6:	2500      	movs	r5, #0
 80069f8:	f104 0619 	add.w	r6, r4, #25
 80069fc:	e7f5      	b.n	80069ea <_printf_i+0x226>
 80069fe:	bf00      	nop
 8006a00:	0800718d 	.word	0x0800718d
 8006a04:	0800719e 	.word	0x0800719e

08006a08 <__sflush_r>:
 8006a08:	898a      	ldrh	r2, [r1, #12]
 8006a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0e:	4605      	mov	r5, r0
 8006a10:	0710      	lsls	r0, r2, #28
 8006a12:	460c      	mov	r4, r1
 8006a14:	d458      	bmi.n	8006ac8 <__sflush_r+0xc0>
 8006a16:	684b      	ldr	r3, [r1, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dc05      	bgt.n	8006a28 <__sflush_r+0x20>
 8006a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dc02      	bgt.n	8006a28 <__sflush_r+0x20>
 8006a22:	2000      	movs	r0, #0
 8006a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	d0f9      	beq.n	8006a22 <__sflush_r+0x1a>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a34:	682f      	ldr	r7, [r5, #0]
 8006a36:	6a21      	ldr	r1, [r4, #32]
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	d032      	beq.n	8006aa2 <__sflush_r+0x9a>
 8006a3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	075a      	lsls	r2, r3, #29
 8006a42:	d505      	bpl.n	8006a50 <__sflush_r+0x48>
 8006a44:	6863      	ldr	r3, [r4, #4]
 8006a46:	1ac0      	subs	r0, r0, r3
 8006a48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a4a:	b10b      	cbz	r3, 8006a50 <__sflush_r+0x48>
 8006a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a4e:	1ac0      	subs	r0, r0, r3
 8006a50:	2300      	movs	r3, #0
 8006a52:	4602      	mov	r2, r0
 8006a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a56:	6a21      	ldr	r1, [r4, #32]
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b0      	blx	r6
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	d106      	bne.n	8006a70 <__sflush_r+0x68>
 8006a62:	6829      	ldr	r1, [r5, #0]
 8006a64:	291d      	cmp	r1, #29
 8006a66:	d82b      	bhi.n	8006ac0 <__sflush_r+0xb8>
 8006a68:	4a29      	ldr	r2, [pc, #164]	; (8006b10 <__sflush_r+0x108>)
 8006a6a:	410a      	asrs	r2, r1
 8006a6c:	07d6      	lsls	r6, r2, #31
 8006a6e:	d427      	bmi.n	8006ac0 <__sflush_r+0xb8>
 8006a70:	2200      	movs	r2, #0
 8006a72:	6062      	str	r2, [r4, #4]
 8006a74:	04d9      	lsls	r1, r3, #19
 8006a76:	6922      	ldr	r2, [r4, #16]
 8006a78:	6022      	str	r2, [r4, #0]
 8006a7a:	d504      	bpl.n	8006a86 <__sflush_r+0x7e>
 8006a7c:	1c42      	adds	r2, r0, #1
 8006a7e:	d101      	bne.n	8006a84 <__sflush_r+0x7c>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b903      	cbnz	r3, 8006a86 <__sflush_r+0x7e>
 8006a84:	6560      	str	r0, [r4, #84]	; 0x54
 8006a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a88:	602f      	str	r7, [r5, #0]
 8006a8a:	2900      	cmp	r1, #0
 8006a8c:	d0c9      	beq.n	8006a22 <__sflush_r+0x1a>
 8006a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a92:	4299      	cmp	r1, r3
 8006a94:	d002      	beq.n	8006a9c <__sflush_r+0x94>
 8006a96:	4628      	mov	r0, r5
 8006a98:	f7ff fa92 	bl	8005fc0 <_free_r>
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	6360      	str	r0, [r4, #52]	; 0x34
 8006aa0:	e7c0      	b.n	8006a24 <__sflush_r+0x1c>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b0      	blx	r6
 8006aa8:	1c41      	adds	r1, r0, #1
 8006aaa:	d1c8      	bne.n	8006a3e <__sflush_r+0x36>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0c5      	beq.n	8006a3e <__sflush_r+0x36>
 8006ab2:	2b1d      	cmp	r3, #29
 8006ab4:	d001      	beq.n	8006aba <__sflush_r+0xb2>
 8006ab6:	2b16      	cmp	r3, #22
 8006ab8:	d101      	bne.n	8006abe <__sflush_r+0xb6>
 8006aba:	602f      	str	r7, [r5, #0]
 8006abc:	e7b1      	b.n	8006a22 <__sflush_r+0x1a>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	e7ad      	b.n	8006a24 <__sflush_r+0x1c>
 8006ac8:	690f      	ldr	r7, [r1, #16]
 8006aca:	2f00      	cmp	r7, #0
 8006acc:	d0a9      	beq.n	8006a22 <__sflush_r+0x1a>
 8006ace:	0793      	lsls	r3, r2, #30
 8006ad0:	680e      	ldr	r6, [r1, #0]
 8006ad2:	bf08      	it	eq
 8006ad4:	694b      	ldreq	r3, [r1, #20]
 8006ad6:	600f      	str	r7, [r1, #0]
 8006ad8:	bf18      	it	ne
 8006ada:	2300      	movne	r3, #0
 8006adc:	eba6 0807 	sub.w	r8, r6, r7
 8006ae0:	608b      	str	r3, [r1, #8]
 8006ae2:	f1b8 0f00 	cmp.w	r8, #0
 8006ae6:	dd9c      	ble.n	8006a22 <__sflush_r+0x1a>
 8006ae8:	6a21      	ldr	r1, [r4, #32]
 8006aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006aec:	4643      	mov	r3, r8
 8006aee:	463a      	mov	r2, r7
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b0      	blx	r6
 8006af4:	2800      	cmp	r0, #0
 8006af6:	dc06      	bgt.n	8006b06 <__sflush_r+0xfe>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	f04f 30ff 	mov.w	r0, #4294967295
 8006b04:	e78e      	b.n	8006a24 <__sflush_r+0x1c>
 8006b06:	4407      	add	r7, r0
 8006b08:	eba8 0800 	sub.w	r8, r8, r0
 8006b0c:	e7e9      	b.n	8006ae2 <__sflush_r+0xda>
 8006b0e:	bf00      	nop
 8006b10:	dfbffffe 	.word	0xdfbffffe

08006b14 <_fflush_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	690b      	ldr	r3, [r1, #16]
 8006b18:	4605      	mov	r5, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	b913      	cbnz	r3, 8006b24 <_fflush_r+0x10>
 8006b1e:	2500      	movs	r5, #0
 8006b20:	4628      	mov	r0, r5
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	b118      	cbz	r0, 8006b2e <_fflush_r+0x1a>
 8006b26:	6a03      	ldr	r3, [r0, #32]
 8006b28:	b90b      	cbnz	r3, 8006b2e <_fflush_r+0x1a>
 8006b2a:	f7ff f831 	bl	8005b90 <__sinit>
 8006b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f3      	beq.n	8006b1e <_fflush_r+0xa>
 8006b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b38:	07d0      	lsls	r0, r2, #31
 8006b3a:	d404      	bmi.n	8006b46 <_fflush_r+0x32>
 8006b3c:	0599      	lsls	r1, r3, #22
 8006b3e:	d402      	bmi.n	8006b46 <_fflush_r+0x32>
 8006b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b42:	f7ff fa3a 	bl	8005fba <__retarget_lock_acquire_recursive>
 8006b46:	4628      	mov	r0, r5
 8006b48:	4621      	mov	r1, r4
 8006b4a:	f7ff ff5d 	bl	8006a08 <__sflush_r>
 8006b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b50:	07da      	lsls	r2, r3, #31
 8006b52:	4605      	mov	r5, r0
 8006b54:	d4e4      	bmi.n	8006b20 <_fflush_r+0xc>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	059b      	lsls	r3, r3, #22
 8006b5a:	d4e1      	bmi.n	8006b20 <_fflush_r+0xc>
 8006b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5e:	f7ff fa2d 	bl	8005fbc <__retarget_lock_release_recursive>
 8006b62:	e7dd      	b.n	8006b20 <_fflush_r+0xc>

08006b64 <__swhatbuf_r>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	460c      	mov	r4, r1
 8006b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	b096      	sub	sp, #88	; 0x58
 8006b70:	4615      	mov	r5, r2
 8006b72:	461e      	mov	r6, r3
 8006b74:	da0d      	bge.n	8006b92 <__swhatbuf_r+0x2e>
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b7c:	f04f 0100 	mov.w	r1, #0
 8006b80:	bf0c      	ite	eq
 8006b82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b86:	2340      	movne	r3, #64	; 0x40
 8006b88:	2000      	movs	r0, #0
 8006b8a:	6031      	str	r1, [r6, #0]
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	b016      	add	sp, #88	; 0x58
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	466a      	mov	r2, sp
 8006b94:	f000 f862 	bl	8006c5c <_fstat_r>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	dbec      	blt.n	8006b76 <__swhatbuf_r+0x12>
 8006b9c:	9901      	ldr	r1, [sp, #4]
 8006b9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ba2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ba6:	4259      	negs	r1, r3
 8006ba8:	4159      	adcs	r1, r3
 8006baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bae:	e7eb      	b.n	8006b88 <__swhatbuf_r+0x24>

08006bb0 <__smakebuf_r>:
 8006bb0:	898b      	ldrh	r3, [r1, #12]
 8006bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bb4:	079d      	lsls	r5, r3, #30
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	460c      	mov	r4, r1
 8006bba:	d507      	bpl.n	8006bcc <__smakebuf_r+0x1c>
 8006bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	6123      	str	r3, [r4, #16]
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	6163      	str	r3, [r4, #20]
 8006bc8:	b002      	add	sp, #8
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	ab01      	add	r3, sp, #4
 8006bce:	466a      	mov	r2, sp
 8006bd0:	f7ff ffc8 	bl	8006b64 <__swhatbuf_r>
 8006bd4:	9900      	ldr	r1, [sp, #0]
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f7ff fa5d 	bl	8006098 <_malloc_r>
 8006bde:	b948      	cbnz	r0, 8006bf4 <__smakebuf_r+0x44>
 8006be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be4:	059a      	lsls	r2, r3, #22
 8006be6:	d4ef      	bmi.n	8006bc8 <__smakebuf_r+0x18>
 8006be8:	f023 0303 	bic.w	r3, r3, #3
 8006bec:	f043 0302 	orr.w	r3, r3, #2
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	e7e3      	b.n	8006bbc <__smakebuf_r+0xc>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	6020      	str	r0, [r4, #0]
 8006bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	6163      	str	r3, [r4, #20]
 8006c02:	9b01      	ldr	r3, [sp, #4]
 8006c04:	6120      	str	r0, [r4, #16]
 8006c06:	b15b      	cbz	r3, 8006c20 <__smakebuf_r+0x70>
 8006c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f000 f837 	bl	8006c80 <_isatty_r>
 8006c12:	b128      	cbz	r0, 8006c20 <__smakebuf_r+0x70>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	431d      	orrs	r5, r3
 8006c24:	81a5      	strh	r5, [r4, #12]
 8006c26:	e7cf      	b.n	8006bc8 <__smakebuf_r+0x18>

08006c28 <memmove>:
 8006c28:	4288      	cmp	r0, r1
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	eb01 0402 	add.w	r4, r1, r2
 8006c30:	d902      	bls.n	8006c38 <memmove+0x10>
 8006c32:	4284      	cmp	r4, r0
 8006c34:	4623      	mov	r3, r4
 8006c36:	d807      	bhi.n	8006c48 <memmove+0x20>
 8006c38:	1e43      	subs	r3, r0, #1
 8006c3a:	42a1      	cmp	r1, r4
 8006c3c:	d008      	beq.n	8006c50 <memmove+0x28>
 8006c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c46:	e7f8      	b.n	8006c3a <memmove+0x12>
 8006c48:	4402      	add	r2, r0
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	428a      	cmp	r2, r1
 8006c4e:	d100      	bne.n	8006c52 <memmove+0x2a>
 8006c50:	bd10      	pop	{r4, pc}
 8006c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c5a:	e7f7      	b.n	8006c4c <memmove+0x24>

08006c5c <_fstat_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d07      	ldr	r5, [pc, #28]	; (8006c7c <_fstat_r+0x20>)
 8006c60:	2300      	movs	r3, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	4611      	mov	r1, r2
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	f7fa fb34 	bl	80012d6 <_fstat>
 8006c6e:	1c43      	adds	r3, r0, #1
 8006c70:	d102      	bne.n	8006c78 <_fstat_r+0x1c>
 8006c72:	682b      	ldr	r3, [r5, #0]
 8006c74:	b103      	cbz	r3, 8006c78 <_fstat_r+0x1c>
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	bd38      	pop	{r3, r4, r5, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000494 	.word	0x20000494

08006c80 <_isatty_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d06      	ldr	r5, [pc, #24]	; (8006c9c <_isatty_r+0x1c>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	f7fa fb33 	bl	80012f6 <_isatty>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_isatty_r+0x1a>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_isatty_r+0x1a>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	20000494 	.word	0x20000494

08006ca0 <_sbrk_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d06      	ldr	r5, [pc, #24]	; (8006cbc <_sbrk_r+0x1c>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fa fb3c 	bl	8001328 <_sbrk>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_sbrk_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_sbrk_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	20000494 	.word	0x20000494

08006cc0 <memcpy>:
 8006cc0:	440a      	add	r2, r1
 8006cc2:	4291      	cmp	r1, r2
 8006cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cc8:	d100      	bne.n	8006ccc <memcpy+0xc>
 8006cca:	4770      	bx	lr
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd6:	4291      	cmp	r1, r2
 8006cd8:	d1f9      	bne.n	8006cce <memcpy+0xe>
 8006cda:	bd10      	pop	{r4, pc}

08006cdc <_realloc_r>:
 8006cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	4614      	mov	r4, r2
 8006ce4:	460e      	mov	r6, r1
 8006ce6:	b921      	cbnz	r1, 8006cf2 <_realloc_r+0x16>
 8006ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	4611      	mov	r1, r2
 8006cee:	f7ff b9d3 	b.w	8006098 <_malloc_r>
 8006cf2:	b92a      	cbnz	r2, 8006d00 <_realloc_r+0x24>
 8006cf4:	f7ff f964 	bl	8005fc0 <_free_r>
 8006cf8:	4625      	mov	r5, r4
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	f000 f81b 	bl	8006d3a <_malloc_usable_size_r>
 8006d04:	4284      	cmp	r4, r0
 8006d06:	4607      	mov	r7, r0
 8006d08:	d802      	bhi.n	8006d10 <_realloc_r+0x34>
 8006d0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d0e:	d812      	bhi.n	8006d36 <_realloc_r+0x5a>
 8006d10:	4621      	mov	r1, r4
 8006d12:	4640      	mov	r0, r8
 8006d14:	f7ff f9c0 	bl	8006098 <_malloc_r>
 8006d18:	4605      	mov	r5, r0
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0ed      	beq.n	8006cfa <_realloc_r+0x1e>
 8006d1e:	42bc      	cmp	r4, r7
 8006d20:	4622      	mov	r2, r4
 8006d22:	4631      	mov	r1, r6
 8006d24:	bf28      	it	cs
 8006d26:	463a      	movcs	r2, r7
 8006d28:	f7ff ffca 	bl	8006cc0 <memcpy>
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7ff f946 	bl	8005fc0 <_free_r>
 8006d34:	e7e1      	b.n	8006cfa <_realloc_r+0x1e>
 8006d36:	4635      	mov	r5, r6
 8006d38:	e7df      	b.n	8006cfa <_realloc_r+0x1e>

08006d3a <_malloc_usable_size_r>:
 8006d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3e:	1f18      	subs	r0, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	bfbc      	itt	lt
 8006d44:	580b      	ldrlt	r3, [r1, r0]
 8006d46:	18c0      	addlt	r0, r0, r3
 8006d48:	4770      	bx	lr
	...

08006d4c <_init>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	bf00      	nop
 8006d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d52:	bc08      	pop	{r3}
 8006d54:	469e      	mov	lr, r3
 8006d56:	4770      	bx	lr

08006d58 <_fini>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr
